--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/0xbaa3de6504690efb064420d89e871c27065cdd52.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/unchecked_low_level_calls/0xbaa3de6504690efb064420d89e871c27065cdd52/0xbaa3de6504690efb064420d89e871c27065cdd52_1round.sol
@@ -1,32 +1,27 @@
-/*

- * @source: etherscan.io

- * @author: -

- * @vulnerable_at_lines: 14

- */

-

 pragma solidity ^0.4.23;

 

 contract Proxy {

     modifier onlyOwner() {

-        if (msg.sender == Owner) _;

+        require(msg.sender == Owner);

+        _;

     }

-    address Owner = msg.sender;

+    address public Owner;

+

     function transferOwner(address _owner) public onlyOwner {

         Owner = _owner;

     }

+

     function proxy(address target, bytes data) public payable {

-        // <yes> <report> UNCHECKED_LL_CALLS

-        target.call.value(msg.value)(data);

+        require(target.call.value(msg.value)(data));

     }

 }

 

 contract VaultProxy is Proxy {

-    address public Owner;

     mapping(address => uint256) public Deposits;

 

     function() public payable {}

 

-    function Vault() public payable {

+    function VaultProxy() public payable {

         if (msg.sender == tx.origin) {

             Owner = msg.sender;

             deposit();

@@ -40,8 +35,7 @@
     }

 

     function withdraw(uint256 amount) public onlyOwner {

-        if (amount > 0 && Deposits[msg.sender] >= amount) {

-            msg.sender.transfer(amount);

-        }

+        require(amount > 0 && Deposits[msg.sender] >= amount);

+        msg.sender.transfer(amount);

     }

 }
