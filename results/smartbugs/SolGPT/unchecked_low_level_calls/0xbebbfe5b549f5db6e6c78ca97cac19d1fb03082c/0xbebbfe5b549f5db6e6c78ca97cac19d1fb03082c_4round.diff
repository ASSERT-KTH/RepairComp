--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/unchecked_low_level_calls/0xbebbfe5b549f5db6e6c78ca97cac19d1fb03082c.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/unchecked_low_level_calls/0xbebbfe5b549f5db6e6c78ca97cac19d1fb03082c/0xbebbfe5b549f5db6e6c78ca97cac19d1fb03082c_4round.sol
@@ -1,23 +1,27 @@
+/*

+ * @source: etherscan.io

+ * @author: -

+ * @vulnerable_at_lines: 14

+ */

+

 pragma solidity ^0.4.24;

 

 contract Proxy {

     modifier onlyOwner() {

-        require(msg.sender == Owner);

-        _;

+        if (msg.sender == Owner) _;

     }

-

-    address public Owner = msg.sender;

-

+    address Owner = msg.sender;

     function transferOwner(address _owner) public onlyOwner {

         Owner = _owner;

     }

-

     function proxy(address target, bytes data) public payable {

-        require(target.call.value(msg.value)(data));

+        // <yes> <report> UNCHECKED_LL_CALLS

+        target.call.value(msg.value)(data);

     }

 }

 

 contract VaultProxy is Proxy {

+    address public Owner;

     mapping(address => uint256) public Deposits;

 

     function() public payable {}

@@ -36,7 +40,8 @@
     }

 

     function withdraw(uint256 amount) public onlyOwner {

-        require(amount > 0 && Deposits[msg.sender] >= amount);

-        msg.sender.transfer(amount);

+        if (amount > 0 && Deposits[msg.sender] >= amount) {

+            msg.sender.transfer(amount);

+        }

     }

 }
