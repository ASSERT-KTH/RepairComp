--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/0x4e73b32ed6c35f570686b89848e5f39f20ecc106.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/SolGPT/reentrancy/0x4e73b32ed6c35f570686b89848e5f39f20ecc106/0x4e73b32ed6c35f570686b89848e5f39f20ecc106_3round.sol
@@ -1,23 +1,32 @@
+/*

+ * @source: etherscan.io

+ * @author: -

+ * @vulnerable_at_lines: 54

+ */

+

 pragma solidity ^0.4.19;

 

 contract PRIVATE_ETH_CELL {

     mapping(address => uint256) public balances;

+

     uint public MinSum;

+

     LogFile Log;

-    bool initialized;

+

+    bool intitalized;

 

     function SetMinSum(uint _val) public {

-        require(!initialized);

+        require(!intitalized);

         MinSum = _val;

     }

 

     function SetLogFile(address _log) public {

-        require(!initialized);

+        require(!intitalized);

         Log = LogFile(_log);

     }

 

     function Initialized() public {

-        initialized = true;

+        intitalized = true;

     }

 

     function Deposit() public payable {

@@ -25,13 +34,14 @@
         Log.AddMessage(msg.sender, msg.value, "Put");

     }

 

-    function Collect(uint _am) public {

-        require(balances[msg.sender] >= MinSum && balances[msg.sender] >= _am);

-

-        balances[msg.sender] -= _am;

-        Log.AddMessage(msg.sender, _am, "Collect");

-

-        require(msg.sender.call.value(_am)());

+    function Collect(uint _am) public payable {

+        if (balances[msg.sender] >= MinSum && balances[msg.sender] >= _am) {

+            // <yes> <report> REENTRANCY

+            if (msg.sender.call.value(_am)()) {

+                balances[msg.sender] -= _am;

+                Log.AddMessage(msg.sender, _am, "Collect");

+            }

+        }

     }

 

     function() public payable {

@@ -49,12 +59,13 @@
 

     Message[] public History;

 

+    Message LastMsg;

+

     function AddMessage(address _adr, uint _val, string _data) public {

-        Message memory newMessage;

-        newMessage.Sender = _adr;

-        newMessage.Time = now;

-        newMessage.Val = _val;

-        newMessage.Data = _data;

-        History.push(newMessage);

+        LastMsg.Sender = _adr;

+        LastMsg.Time = now;

+        LastMsg.Val = _val;

+        LastMsg.Data = _data;

+        History.push(LastMsg);

     }

 }
