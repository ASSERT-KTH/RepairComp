--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/arithmetic/token.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/sGuardPlus/arithmetic/token/token.sol
@@ -1,25 +1,26 @@
-/*

- * @source: https://github.com/sigp/solidity-security-blog

- * @author: Steve Marx

- * @vulnerable_at_lines: 20,22

- */

-

-pragma solidity ^0.4.18;

-

-contract Token {

+contract sGuardPlus {

+    constructor() internal {}

+    function sub_uint(uint a, uint b) internal pure returns (uint) {

+        assert(b <= a);

+        return a - b;

+    }

+    function add_uint(uint a, uint b) internal pure returns (uint) {

+        uint c = a + b;

+        assert(c >= a);

+        return c;

+    }

+}

+contract Token is sGuardPlus {

     mapping(address => uint) balances;

     uint public totalSupply;

-

-    function Token(uint _initialSupply) {

+    constructor(uint _initialSupply) {

         balances[msg.sender] = totalSupply = _initialSupply;

     }

 

     function transfer(address _to, uint _value) public returns (bool) {

-        // <yes> <report> ARITHMETIC

-        require(balances[msg.sender] - _value >= 0);

-        // <yes> <report> ARITHMETIC

-        balances[msg.sender] -= _value;

-        balances[_to] += _value;

+        require(sub_uint(balances[msg.sender], _value) >= 0);

+        balances[msg.sender] = sub_uint(balances[msg.sender], _value);

+        balances[_to] = add_uint(balances[_to], _value);

         return true;

     }

 
