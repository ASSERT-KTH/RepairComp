--- https://github.com/smartbugs/smartbugs-curated/tree/main/dataset/reentrancy/reentrancy_simple.sol
+++ https://github.com/ASSERT-KTH/RepairComp/blob/main/results/smartbugs/TIPS/reentrancy/reentrancy_simple/reentrancy_simpleR1.sol
@@ -1,27 +1,13 @@
-/*

- * @source: https://github.com/trailofbits/not-so-smart-contracts/blob/master/reentrancy/Reentrancy.sol

- * @author: -

- * @vulnerable_at_lines: 24

- */

-

-pragma solidity ^0.4.15;

-

 contract Reentrance {

     mapping(address => uint) userBalance;

-

-    function getBalance(address u) constant returns (uint) {

+    function getBalance(address u) public view returns (uint) {

         return userBalance[u];

     }

-

-    function addToBalance() payable {

+    function addToBalance() public payable {

         userBalance[msg.sender] += msg.value;

     }

-

-    function withdrawBalance() {

-        // send userBalance[msg.sender] ethers to msg.sender

-        // if mgs.sender is a contract, it will call its fallback function

-        // <yes> <report> REENTRANCY

-        if (!(msg.sender.call.value(userBalance[msg.sender])())) {

+    function withdrawBalance() public {

+        if (!(msg.sender.send(userBalance[msg.sender]))) {

             throw;

         }

         userBalance[msg.sender] = 0;
