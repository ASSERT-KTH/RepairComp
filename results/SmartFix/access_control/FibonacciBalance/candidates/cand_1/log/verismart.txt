[CHECKER] Integer Over/Underflows
[CHECKER] Suicidal
[CHECKER] Re-Entrancy
[CHECKER] Improper use of Tx.origin
[CHECKER] Ether-Leaking

[INFO] all funcs : 13
[INFO] reachable : 7
[INFO] Generating Paths ... took 0.000124s
[INFO] # path : 13

[INFO] Violate CEI: false
[INFO] msg.sender = this possible: false
[INFO] Performing Interval Analysis ... took 0.000392s
Generating VCs ... took 0.000868s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 1 Total elapsed : 0.034335
[
0 -> true
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... unproven
took 0.33151s

Generating VCs ... took 0.000331s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 2 Total elapsed : 0.36709
[
0 -> (Read(@TU, fibonacciLibrary__@3) == true)
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... unproven
took 0.204937s

Generating VCs ... took 0.000354s
Checking validity of VCs ... took 0.070751s

Generating VCs ... took 0.000383s
Checking validity of VCs ... took 0.009003s

Generating VCs ... took 0.000325s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 5 Total elapsed : 0.72066
[
0 -> ((start__@8 == 3) /\ (Read(@TU, fibonacciLibrary__@3) == true))
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... unproven
took 0.572756s

Generating VCs ... took 0.000339s
Checking validity of VCs ... took 0.070738s

Generating VCs ... took 0.000334s
Checking validity of VCs ... took 0.06663s

Generating VCs ... took 0.000335s
Checking validity of VCs ... took 0.065491s

Generating VCs ... took 0.000338s
Checking validity of VCs ... took 0.07278s

Iter : 10 To explore : 75 Explored : 197 Total elapsed : 1.519298
Generating VCs ... took 0.000335s
Checking validity of VCs ... took 0.070492s

Generating VCs ... took 0.000473s
Checking validity of VCs ... took 0.068714s

Generating VCs ... took 0.000345s
Checking validity of VCs ... took 0.067175s

Generating VCs ... took 0.000336s
Checking validity of VCs ... took 0.067588s

Generating VCs ... took 0.000333s
Checking validity of VCs ... took 0.072096s

Generating VCs ... took 0.000362s
Checking validity of VCs ... took 0.06808s

Generating VCs ... took 0.00034s
Checking validity of VCs ... took 0.073245s

Generating VCs ... took 0.000344s
Checking validity of VCs ... took 0.067824s

Generating VCs ... took 0.000336s
Checking validity of VCs ... took 0.071563s

Generating VCs ... took 0.00034s
Checking validity of VCs ... took 0.069302s

Iter : 20 To explore : 230 Explored : 362 Total elapsed : 2.245524
Generating VCs ... took 0.000326s
Checking validity of VCs ... 
=============== Invariants Found ===============
Iter: 20 Total elapsed : 2.312285
[
0 -> (((calculatedFibNumber__@5 == 0) /\ (start__@8 == 3)) /\ (Read(@TU, fibonacciLibrary__@3) == true))
]
[
]
1/4 ... [IO] line 27, (withdrawalCounter + 1) ... proven
2/4 ... [IO] line 28, (withdrawalCounter + 1) ... proven
3/4 ... [IO] line 33, (calculatedFibNumber * 1000000000000000000) ... proven
4/4 ... [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); ... proven
took 0.083058s

Generating VCs ... took 0.00012s
Checking validity of VCs ... 
1/4 ... [NO_EFFECT] line 28, (@pre1 == withdrawalCounter) ... unproven
2/4 ... [ASSIGN_CONST] line 28, (withdrawalCounter == 0) ... unproven
3/4 ... [DEAD] line 27, false ... unproven
4/4 ... [DEAD] line 33, false ... unproven
took 0.229828s


===== Vulnerability Report =====
[1] [IO] line 27, (withdrawalCounter + 1) : proven
[2] [IO] line 28, (withdrawalCounter + 1) : proven
[3] [IO] line 33, (calculatedFibNumber * 1000000000000000000) : proven
[4] [ETH_LEAK] line 33, msg.sender.transfer((calculatedFibNumber * 1000000000000000000)); : proven

===== Regression Report =====
[1] [NO_EFFECT] line 28, (@pre1 == withdrawalCounter) : unproven
[2] [ASSIGN_CONST] line 28, (withdrawalCounter == 0) : unproven
[3] [DEAD] line 27, false : unproven
[4] [DEAD] line 33, false : unproven

============ Statistics ============
# Iter                    : 20
# Alarm / Query           : 0 / 4
- integer over/underflow  : 0 / 3
- kill-anyone             : 0 / 0
- ether-leaking           : 0 / 1
- reentrancy-leaking      : 0 / 0
- reentrancy              : 0 / 0
- tx.origin               : 0 / 0

Time Elapsed (Real) : 2.58034896851
Time Elapsed (CPU)  : 2.55898
