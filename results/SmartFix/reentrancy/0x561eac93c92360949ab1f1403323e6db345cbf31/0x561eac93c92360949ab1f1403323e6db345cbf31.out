[INFO] compiled with solc ver. 0.4.25
[INFO] all funcs : 10
[INFO] reachable : 9

[INFO] Violate CEI: true
[INFO] msg.sender = this possible: false
[STEP] Run analyzer
[STEP] Collect fix targets
    (IO, (BANK_SAFE/Collect/[uint256]), 56, (balances[msg.sender] - _am)),
    (IO, (BANK_SAFE/Deposit/[]), 43, (balances[msg.sender] + msg.value)),
    (ETH_LEAK, (BANK_SAFE/Collect/[uint256]), 54, msg.sender.call.value(_am)()),
    (RE_EL, (BANK_SAFE/Collect/[uint256]), 54, msg.sender.call.value(_am)())

[INFO] # of basic patch components : 6
[INFO] extracted components
[
InsertLine (43, assume(((balances[msg.sender] + msg.value) >= balances[msg.sender]));),
InsertLine (56, assume((balances[msg.sender] >= _am));),
Replace (51, (balances[msg.sender] >= _am), (balances[msg.sender] < _am)),
AtomLst [
Move ([56] -> 54)
ElseRevert (line 58)
],
AtomLst [
Add @nonReentrant to (BANK_SAFE, SetMinSum, [uint256]) (line 19)
Add @nonReentrant to (BANK_SAFE, SetLogFile, [address]) (line 26)
Add @nonReentrant to (BANK_SAFE, Initialized, []) (line 33)
Add @nonReentrant to (BANK_SAFE, Deposit, []) (line 39)
Add @nonReentrant to (BANK_SAFE, Collect, [uint256]) (line 47)
],
AtomLst [
Add @nonReentrant to (BANK_SAFE, SetMinSum, [uint256]) (line 19)
Add @nonReentrant to (BANK_SAFE, SetLogFile, [address]) (line 26)
Add @nonReentrant to (BANK_SAFE, Initialized, []) (line 33)
Add @nonReentrant to (BANK_SAFE, Deposit, []) (line 39)
Add @nonReentrant to (BANK_SAFE, Collect, [uint256]) (line 47)
Add @nonReentrant to (BANK_SAFE, @fallback, []) (line 62)
]
]
- New best candidate, iter 1, 321.272169113s : results/reentrancy/0x561eac93c92360949ab1f1403323e6db345cbf31/candidates/cand_4/patch.sol
