Syntax trees:


======= /smartbugs-curated/dataset/reentrancy/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.19;"
ContractDefinition "MONEY_BOX"
   Source: "contract MONEY_BOX   \n{\n    struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }\n    \n    mapping (address => Holder) public Acc;\n    \n    uint public MinSum;\n    \n    Log LogFile;\n    \n    bool intitalized;\n    \n    function SetMinSum(uint _val)\n    public\n    {\n        if(intitalized)throw;\n        MinSum = _val;\n    }\n    \n    function SetLogFile(address _log)\n    public\n    {\n        if(intitalized)throw;\n        LogFile = Log(_log);\n    }\n    \n    function Initialized()\n    public\n    {\n        intitalized = true;\n    }\n    \n    function Put(uint _lockTime)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;\n        LogFile.AddMessage(msg.sender,msg.value,\"Put\");\n    }\n    \n    function Collect(uint _am)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }\n    \n    function() \n    public \n    payable\n    {\n        Put(0);\n    }\n    \n}"
  StructDefinition "Holder"
     Gas costs: 0
     Source: "struct Holder   \n    {\n        uint unlockTime;\n        uint balance;\n    }"
    VariableDeclaration "unlockTime"
       Type: uint256
       Source: "uint unlockTime"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "balance"
       Type: uint256
       Source: "uint balance"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "Acc"
     Type: mapping(address => struct MONEY_BOX.Holder storage ref)
     Gas costs: 0
     Source: "mapping (address => Holder) public Acc"
    Mapping
       Source: "mapping (address => Holder)"
      ElementaryTypeName address
         Source: "address"
      UserDefinedTypeName "Holder"
         Source: "Holder"
  VariableDeclaration "MinSum"
     Type: uint256
     Gas costs: 0
     Source: "uint public MinSum"
    ElementaryTypeName uint
       Source: "uint"
  VariableDeclaration "LogFile"
     Type: contract Log
     Gas costs: 0
     Source: "Log LogFile"
    UserDefinedTypeName "Log"
       Source: "Log"
  VariableDeclaration "intitalized"
     Type: bool
     Gas costs: 0
     Source: "bool intitalized"
    ElementaryTypeName bool
       Source: "bool"
  FunctionDefinition "SetMinSum" - public
     Source: "function SetMinSum(uint _val)\n    public\n    {\n        if(intitalized)throw;\n        MinSum = _val;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _val)"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        if(intitalized)throw;\n        MinSum = _val;\n    }"
      IfStatement
         Source: "if(intitalized)throw"
        Identifier intitalized
           Type: bool
           Gas costs: 0
           Source: "intitalized"
        Throw
           Gas costs: 0
           Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "MinSum = _val"
        Assignment using operator =
           Type: uint256
           Source: "MinSum = _val"
          Identifier MinSum
             Type: uint256
             Source: "MinSum"
          Identifier _val
             Type: uint256
             Source: "_val"
  FunctionDefinition "SetLogFile" - public
     Source: "function SetLogFile(address _log)\n    public\n    {\n        if(intitalized)throw;\n        LogFile = Log(_log);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _log)"
      VariableDeclaration "_log"
         Type: address
         Source: "address _log"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        if(intitalized)throw;\n        LogFile = Log(_log);\n    }"
      IfStatement
         Source: "if(intitalized)throw"
        Identifier intitalized
           Type: bool
           Gas costs: 0
           Source: "intitalized"
        Throw
           Gas costs: 0
           Source: "throw"
      ExpressionStatement
         Gas costs: 0
         Source: "LogFile = Log(_log)"
        Assignment using operator =
           Type: contract Log
           Source: "LogFile = Log(_log)"
          Identifier LogFile
             Type: contract Log
             Source: "LogFile"
          FunctionCall
             Type: contract Log
             Source: "Log(_log)"
            Identifier Log
               Type: type(contract Log)
               Source: "Log"
            Identifier _log
               Type: address
               Source: "_log"
  FunctionDefinition "Initialized" - public
     Source: "function Initialized()\n    public\n    {\n        intitalized = true;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        intitalized = true;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "intitalized = true"
        Assignment using operator =
           Type: bool
           Source: "intitalized = true"
          Identifier intitalized
             Type: bool
             Source: "intitalized"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "Put" - public
     Source: "function Put(uint _lockTime)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;\n        LogFile.AddMessage(msg.sender,msg.value,\"Put\");\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _lockTime)"
      VariableDeclaration "_lockTime"
         Type: uint256
         Source: "uint _lockTime"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        var acc = Acc[msg.sender];\n        acc.balance += msg.value;\n        if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime;\n        LogFile.AddMessage(msg.sender,msg.value,\"Put\");\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "var acc = Acc[msg.sender]"
        VariableDeclaration "acc"
           Type: struct MONEY_BOX.Holder storage pointer
           Source: "var acc"
        IndexAccess
           Type: struct MONEY_BOX.Holder storage ref
           Source: "Acc[msg.sender]"
          Identifier Acc
             Type: mapping(address => struct MONEY_BOX.Holder storage ref)
             Source: "Acc"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "acc.balance += msg.value"
        Assignment using operator +=
           Type: uint256
           Source: "acc.balance += msg.value"
          MemberAccess to member balance
             Type: uint256
             Source: "acc.balance"
            Identifier acc
               Type: struct MONEY_BOX.Holder storage pointer
               Source: "acc"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if(now+_lockTime>acc.unlockTime)acc.unlockTime=now+_lockTime"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "now+_lockTime>acc.unlockTime"
          BinaryOperation using operator +
             Type: uint256
             Source: "now+_lockTime"
            Identifier now
               Type: uint256
               Source: "now"
            Identifier _lockTime
               Type: uint256
               Source: "_lockTime"
          MemberAccess to member unlockTime
             Type: uint256
             Source: "acc.unlockTime"
            Identifier acc
               Type: struct MONEY_BOX.Holder storage pointer
               Source: "acc"
        ExpressionStatement
           Gas costs: 0
           Source: "acc.unlockTime=now+_lockTime"
          Assignment using operator =
             Type: uint256
             Source: "acc.unlockTime=now+_lockTime"
            MemberAccess to member unlockTime
               Type: uint256
               Source: "acc.unlockTime"
              Identifier acc
                 Type: struct MONEY_BOX.Holder storage pointer
                 Source: "acc"
            BinaryOperation using operator +
               Type: uint256
               Source: "now+_lockTime"
              Identifier now
                 Type: uint256
                 Source: "now"
              Identifier _lockTime
                 Type: uint256
                 Source: "_lockTime"
      ExpressionStatement
         Gas costs: 0
         Source: "LogFile.AddMessage(msg.sender,msg.value,\"Put\")"
        FunctionCall
           Type: tuple()
           Source: "LogFile.AddMessage(msg.sender,msg.value,\"Put\")"
          MemberAccess to member AddMessage
             Type: function (address,uint256,string memory) external
             Source: "LogFile.AddMessage"
            Identifier LogFile
               Type: contract Log
               Source: "LogFile"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
          Literal, token: [no token] value: Put
             Type: literal_string "Put"
             Source: "\"Put\""
  FunctionDefinition "Collect" - public
     Source: "function Collect(uint _am)\n    public\n    payable\n    {\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _am)"
      VariableDeclaration "_am"
         Type: uint256
         Source: "uint _am"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        var acc = Acc[msg.sender];\n        if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "var acc = Acc[msg.sender]"
        VariableDeclaration "acc"
           Type: struct MONEY_BOX.Holder storage pointer
           Source: "var acc"
        IndexAccess
           Type: struct MONEY_BOX.Holder storage ref
           Source: "Acc[msg.sender]"
          Identifier Acc
             Type: mapping(address => struct MONEY_BOX.Holder storage ref)
             Source: "Acc"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      IfStatement
         Source: "if( acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime)\n        {\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 0
           Source: "acc.balance>=MinSum && acc.balance>=_am && now>acc.unlockTime"
          BinaryOperation using operator &&
             Type: bool
             Source: "acc.balance>=MinSum && acc.balance>=_am"
            BinaryOperation using operator >=
               Type: bool
               Source: "acc.balance>=MinSum"
              MemberAccess to member balance
                 Type: uint256
                 Source: "acc.balance"
                Identifier acc
                   Type: struct MONEY_BOX.Holder storage pointer
                   Source: "acc"
              Identifier MinSum
                 Type: uint256
                 Source: "MinSum"
            BinaryOperation using operator >=
               Type: bool
               Source: "acc.balance>=_am"
              MemberAccess to member balance
                 Type: uint256
                 Source: "acc.balance"
                Identifier acc
                   Type: struct MONEY_BOX.Holder storage pointer
                   Source: "acc"
              Identifier _am
                 Type: uint256
                 Source: "_am"
          BinaryOperation using operator >
             Type: bool
             Source: "now>acc.unlockTime"
            Identifier now
               Type: uint256
               Source: "now"
            MemberAccess to member unlockTime
               Type: uint256
               Source: "acc.unlockTime"
              Identifier acc
                 Type: struct MONEY_BOX.Holder storage pointer
                 Source: "acc"
        Block
           Source: "{\n            // <yes> <report> REENTRANCY\n            if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }\n        }"
          IfStatement
             Source: "if(msg.sender.call.value(_am)())\n            {\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }"
            FunctionCall
               Type: bool
               Gas costs: 0
               Source: "msg.sender.call.value(_am)()"
              FunctionCall
                 Type: function () payable returns (bool)
                 Source: "msg.sender.call.value(_am)"
                MemberAccess to member value
                   Type: function (uint256) returns (function () payable returns (bool))
                   Source: "msg.sender.call.value"
                  MemberAccess to member call
                     Type: function () payable returns (bool)
                     Source: "msg.sender.call"
                    MemberAccess to member sender
                       Type: address
                       Source: "msg.sender"
                      Identifier msg
                         Type: msg
                         Source: "msg"
                Identifier _am
                   Type: uint256
                   Source: "_am"
            Block
               Source: "{\n                acc.balance-=_am;\n                LogFile.AddMessage(msg.sender,_am,\"Collect\");\n            }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "acc.balance-=_am"
                Assignment using operator -=
                   Type: uint256
                   Source: "acc.balance-=_am"
                  MemberAccess to member balance
                     Type: uint256
                     Source: "acc.balance"
                    Identifier acc
                       Type: struct MONEY_BOX.Holder storage pointer
                       Source: "acc"
                  Identifier _am
                     Type: uint256
                     Source: "_am"
              ExpressionStatement
                 Gas costs: 0
                 Source: "LogFile.AddMessage(msg.sender,_am,\"Collect\")"
                FunctionCall
                   Type: tuple()
                   Source: "LogFile.AddMessage(msg.sender,_am,\"Collect\")"
                  MemberAccess to member AddMessage
                     Type: function (address,uint256,string memory) external
                     Source: "LogFile.AddMessage"
                    Identifier LogFile
                       Type: contract Log
                       Source: "LogFile"
                  MemberAccess to member sender
                     Type: address
                     Source: "msg.sender"
                    Identifier msg
                       Type: msg
                       Source: "msg"
                  Identifier _am
                     Type: uint256
                     Source: "_am"
                  Literal, token: [no token] value: Collect
                     Type: literal_string "Collect"
                     Source: "\"Collect\""
  FunctionDefinition "" - public
     Source: "function() \n    public \n    payable\n    {\n        Put(0);\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        Put(0);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "Put(0)"
        FunctionCall
           Type: tuple()
           Source: "Put(0)"
          Identifier Put
             Type: function (uint256)
             Source: "Put"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
ContractDefinition "Log"
   Source: "contract Log \n{\n    struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }\n    \n    Message[] public History;\n    \n    Message LastMsg;\n    \n    function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }\n}"
  StructDefinition "Message"
     Gas costs: 0
     Source: "struct Message\n    {\n        address Sender;\n        string  Data;\n        uint Val;\n        uint  Time;\n    }"
    VariableDeclaration "Sender"
       Type: address
       Source: "address Sender"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "Data"
       Type: string storage pointer
       Source: "string  Data"
      ElementaryTypeName string
         Source: "string"
    VariableDeclaration "Val"
       Type: uint256
       Source: "uint Val"
      ElementaryTypeName uint
         Source: "uint"
    VariableDeclaration "Time"
       Type: uint256
       Source: "uint  Time"
      ElementaryTypeName uint
         Source: "uint"
  VariableDeclaration "History"
     Type: struct Log.Message storage ref[] storage ref
     Gas costs: [???]
     Source: "Message[] public History"
    ArrayTypeName
       Source: "Message[]"
      UserDefinedTypeName "Message"
         Source: "Message"
  VariableDeclaration "LastMsg"
     Type: struct Log.Message storage ref
     Gas costs: 0
     Source: "Message LastMsg"
    UserDefinedTypeName "Message"
       Source: "Message"
  FunctionDefinition "AddMessage" - public
     Source: "function AddMessage(address _adr,uint _val,string _data)\n    public\n    {\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _adr,uint _val,string _data)"
      VariableDeclaration "_adr"
         Type: address
         Source: "address _adr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_val"
         Type: uint256
         Source: "uint _val"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_data"
         Type: string memory
         Source: "string _data"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        LastMsg.Sender = _adr;\n        LastMsg.Time = now;\n        LastMsg.Val = _val;\n        LastMsg.Data = _data;\n        History.push(LastMsg);\n    }"
      ExpressionStatement
         Gas costs: 20273
         Source: "LastMsg.Sender = _adr"
        Assignment using operator =
           Type: address
           Source: "LastMsg.Sender = _adr"
          MemberAccess to member Sender
             Type: address
             Source: "LastMsg.Sender"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier _adr
             Type: address
             Source: "_adr"
      ExpressionStatement
         Gas costs: 20019
         Source: "LastMsg.Time = now"
        Assignment using operator =
           Type: uint256
           Source: "LastMsg.Time = now"
          MemberAccess to member Time
             Type: uint256
             Source: "LastMsg.Time"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier now
             Type: uint256
             Source: "now"
      ExpressionStatement
         Gas costs: 20020
         Source: "LastMsg.Val = _val"
        Assignment using operator =
           Type: uint256
           Source: "LastMsg.Val = _val"
          MemberAccess to member Val
             Type: uint256
             Source: "LastMsg.Val"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier _val
             Type: uint256
             Source: "_val"
      ExpressionStatement
         Gas costs: [???]
         Source: "LastMsg.Data = _data"
        Assignment using operator =
           Type: string storage ref
           Source: "LastMsg.Data = _data"
          MemberAccess to member Data
             Type: string storage ref
             Source: "LastMsg.Data"
            Identifier LastMsg
               Type: struct Log.Message storage ref
               Source: "LastMsg"
          Identifier _data
             Type: string memory
             Source: "_data"
      ExpressionStatement
         Gas costs: 61354
         Source: "History.push(LastMsg)"
        FunctionCall
           Type: uint256
           Source: "History.push(LastMsg)"
          MemberAccess to member push
             Type: function (struct Log.Message storage ref) returns (uint256)
             Source: "History.push"
            Identifier History
               Type: struct Log.Message storage ref[] storage ref
               Source: "History"
          Identifier LastMsg
             Type: struct Log.Message storage ref
             Source: "LastMsg"
