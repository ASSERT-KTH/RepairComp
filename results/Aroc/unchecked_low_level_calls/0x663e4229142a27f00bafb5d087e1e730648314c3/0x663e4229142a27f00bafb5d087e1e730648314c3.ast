Syntax trees:


======= /smartbugs-curated/dataset/unchecked_low_level_calls/0x663e4229142a27f00bafb5d087e1e730648314c3.sol =======
PragmaDirective
   Gas costs: 0
   Source: "pragma solidity ^0.4.11;"
ContractDefinition "ERC20"
   Gas costs: 0
   Source: "contract ERC20 {\n    function totalSupply() constant returns (uint supply);\n    function balanceOf( address who ) constant returns (uint value);\n    function allowance( address owner, address spender ) constant returns (uint _allowance);\n\n    function transfer( address to, uint value) returns (bool ok);\n    function transferFrom( address from, address to, uint value) returns (bool ok);\n    function approve( address spender, uint value ) returns (bool ok);\n\n    event Transfer( address indexed from, address indexed to, uint value);\n    event Approval( address indexed owner, address indexed spender, uint value);\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() constant returns (uint supply);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint supply)"
      VariableDeclaration "supply"
         Type: uint256
         Source: "uint supply"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf( address who ) constant returns (uint value);"
    ParameterList
       Source: "( address who )"
      VariableDeclaration "who"
         Type: address
         Source: "address who"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint value)"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "allowance" - public - const
     Source: "function allowance( address owner, address spender ) constant returns (uint _allowance);"
    ParameterList
       Source: "( address owner, address spender )"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint _allowance)"
      VariableDeclaration "_allowance"
         Type: uint256
         Source: "uint _allowance"
        ElementaryTypeName uint
           Source: "uint"
  FunctionDefinition "transfer" - public
     Source: "function transfer( address to, uint value) returns (bool ok);"
    ParameterList
       Source: "( address to, uint value)"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom( address from, address to, uint value) returns (bool ok);"
    ParameterList
       Source: "( address from, address to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "approve" - public
     Source: "function approve( address spender, uint value ) returns (bool ok);"
    ParameterList
       Source: "( address spender, uint value )"
      VariableDeclaration "spender"
         Type: address
         Source: "address spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Source: "(bool ok)"
      VariableDeclaration "ok"
         Type: bool
         Source: "bool ok"
        ElementaryTypeName bool
           Source: "bool"
  EventDefinition "Transfer"
     Source: "event Transfer( address indexed from, address indexed to, uint value);"
    ParameterList
       Source: "( address indexed from, address indexed to, uint value)"
      VariableDeclaration "from"
         Type: address
         Source: "address indexed from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address indexed to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
  EventDefinition "Approval"
     Source: "event Approval( address indexed owner, address indexed spender, uint value);"
    ParameterList
       Source: "( address indexed owner, address indexed spender, uint value)"
      VariableDeclaration "owner"
         Type: address
         Source: "address indexed owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "spender"
         Type: address
         Source: "address indexed spender"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "value"
         Type: uint256
         Source: "uint value"
        ElementaryTypeName uint
           Source: "uint"
ContractDefinition "Ownable"
   Source: "contract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}"
  VariableDeclaration "owner"
     Type: address
     Gas costs: 0
     Source: "address public owner"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "Ownable" - public
     Source: "function Ownable() {\n    owner = msg.sender;\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n    owner = msg.sender;\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "owner = msg.sender"
        Assignment using operator =
           Type: address
           Source: "owner = msg.sender"
          Identifier owner
             Type: address
             Source: "owner"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  ModifierDefinition "onlyOwner"
     Source: "modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n    require(msg.sender == owner);\n    _;\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == owner)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == owner)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == owner"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier owner
               Type: address
               Source: "owner"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "transferOwnership" - public
     Source: "function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }"
    ParameterList
       Gas costs: 0
       Source: "(address newOwner)"
      VariableDeclaration "newOwner"
         Type: address
         Source: "address newOwner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }"
      IfStatement
         Source: "if (newOwner != address(0)) {\n      owner = newOwner;\n    }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 0
           Source: "newOwner != address(0)"
          Identifier newOwner
             Type: address
             Source: "newOwner"
          FunctionCall
             Type: address
             Source: "address(0)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\n      owner = newOwner;\n    }"
          ExpressionStatement
             Gas costs: 0
             Source: "owner = newOwner"
            Assignment using operator =
               Type: address
               Source: "owner = newOwner"
              Identifier owner
                 Type: address
                 Source: "owner"
              Identifier newOwner
                 Type: address
                 Source: "newOwner"
ContractDefinition "ERC721"
   Gas costs: 0
   Source: "contract ERC721 {\n    // Required methods\n    function totalSupply() public view returns (uint256 total);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\n    function approve(address _to, uint256 _tokenId) external;\n    function transfer(address _to, uint256 _tokenId) external;\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n\n    // Events\n    event Transfer(address from, address to, uint256 tokenId);\n    event Approval(address owner, address approved, uint256 tokenId);\n\n    // Optional\n    // function name() public view returns (string name);\n    // function symbol() public view returns (string symbol);\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n}"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public view returns (uint256 total);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(uint256 total)"
      VariableDeclaration "total"
         Type: uint256
         Source: "uint256 total"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public view returns (uint256 balance);"
    ParameterList
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Source: "(uint256 balance)"
      VariableDeclaration "balance"
         Type: uint256
         Source: "uint256 balance"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "ownerOf" - public - const
     Source: "function ownerOf(uint256 _tokenId) external view returns (address owner);"
    ParameterList
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(address owner)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
  FunctionDefinition "approve" - public
     Source: "function approve(address _to, uint256 _tokenId) external;"
    ParameterList
       Source: "(address _to, uint256 _tokenId)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "transfer" - public
     Source: "function transfer(address _to, uint256 _tokenId) external;"
    ParameterList
       Source: "(address _to, uint256 _tokenId)"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(address _from, address _to, uint256 _tokenId) external;"
    ParameterList
       Source: "(address _from, address _to, uint256 _tokenId)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: ""
  EventDefinition "Transfer"
     Source: "event Transfer(address from, address to, uint256 tokenId);"
    ParameterList
       Source: "(address from, address to, uint256 tokenId)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Approval"
     Source: "event Approval(address owner, address approved, uint256 tokenId);"
    ParameterList
       Source: "(address owner, address approved, uint256 tokenId)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "approved"
         Type: address
         Source: "address approved"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "supportsInterface" - public - const
     Source: "function supportsInterface(bytes4 _interfaceID) external view returns (bool);"
    ParameterList
       Source: "(bytes4 _interfaceID)"
      VariableDeclaration "_interfaceID"
         Type: bytes4
         Source: "bytes4 _interfaceID"
        ElementaryTypeName bytes4
           Source: "bytes4"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
ContractDefinition "GeneScienceInterface"
   Gas costs: 0
   Source: "contract GeneScienceInterface {\n    /// @dev simply a boolean to indicate this is the contract we expect to be\n    function isGeneScience() public pure returns (bool);\n\n    /// @dev given genes of kitten 1 & 2, return a genetic combination - may have a random factor\n    /// @param genes1 genes of mom\n    /// @param genes2 genes of sire\n    /// @return the genes that are supposed to be passed down the child\n    function mixGenes(uint256[2] genes1, uint256[2] genes2,uint256 g1,uint256 g2, uint256 targetBlock) public returns (uint256[2]);\n\n    function getPureFromGene(uint256[2] gene) public view returns(uint256);\n\n    /// @dev get sex from genes 0: female 1: male\n    function getSex(uint256[2] gene) public view returns(uint256);\n\n    /// @dev get wizz type from gene\n    function getWizzType(uint256[2] gene) public view returns(uint256);\n\n    function clearWizzType(uint256[2] _gene) public returns(uint256[2]);\n}"
  FunctionDefinition "isGeneScience" - public
     Source: "function isGeneScience() public pure returns (bool);"
    ParameterList
       Source: "()"
    ParameterList
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
  FunctionDefinition "mixGenes" - public
     Source: "function mixGenes(uint256[2] genes1, uint256[2] genes2,uint256 g1,uint256 g2, uint256 targetBlock) public returns (uint256[2]);"
    ParameterList
       Source: "(uint256[2] genes1, uint256[2] genes2,uint256 g1,uint256 g2, uint256 targetBlock)"
      VariableDeclaration "genes1"
         Type: uint256[2] memory
         Source: "uint256[2] genes1"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
      VariableDeclaration "genes2"
         Type: uint256[2] memory
         Source: "uint256[2] genes2"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
      VariableDeclaration "g1"
         Type: uint256
         Source: "uint256 g1"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "g2"
         Type: uint256
         Source: "uint256 g2"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "targetBlock"
         Type: uint256
         Source: "uint256 targetBlock"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Source: "(uint256[2])"
      VariableDeclaration ""
         Type: uint256[2] memory
         Source: "uint256[2]"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
  FunctionDefinition "getPureFromGene" - public - const
     Source: "function getPureFromGene(uint256[2] gene) public view returns(uint256);"
    ParameterList
       Source: "(uint256[2] gene)"
      VariableDeclaration "gene"
         Type: uint256[2] memory
         Source: "uint256[2] gene"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "getSex" - public - const
     Source: "function getSex(uint256[2] gene) public view returns(uint256);"
    ParameterList
       Source: "(uint256[2] gene)"
      VariableDeclaration "gene"
         Type: uint256[2] memory
         Source: "uint256[2] gene"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "getWizzType" - public - const
     Source: "function getWizzType(uint256[2] gene) public view returns(uint256);"
    ParameterList
       Source: "(uint256[2] gene)"
      VariableDeclaration "gene"
         Type: uint256[2] memory
         Source: "uint256[2] gene"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
    ParameterList
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "clearWizzType" - public
     Source: "function clearWizzType(uint256[2] _gene) public returns(uint256[2]);"
    ParameterList
       Source: "(uint256[2] _gene)"
      VariableDeclaration "_gene"
         Type: uint256[2] memory
         Source: "uint256[2] _gene"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
    ParameterList
       Source: "(uint256[2])"
      VariableDeclaration ""
         Type: uint256[2] memory
         Source: "uint256[2]"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
ContractDefinition "PandaAccessControl"
   Source: "contract PandaAccessControl {\n    // This facet controls access control for CryptoPandas. There are four roles managed here:\n    //\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\n    //         set to the address that created the smart contract in the PandaCore constructor.\n    //\n    //     - The CFO: The CFO can withdraw funds from PandaCore and its auction contracts.\n    //\n    //     - The COO: The COO can release gen0 pandas to auction, and mint promo cats.\n    //\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\n    // account.\n\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\n    event ContractUpgrade(address newContract);\n\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n    bool public paused = false;\n\n    /// @dev Access modifier for CEO-only functionality\n    modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for CFO-only functionality\n    modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }\n\n    /// @dev Access modifier for COO-only functionality\n    modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }\n\n    modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }\n\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n    /// @param _newCEO The address of the new CEO\n    function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\n    /// @param _newCFO The address of the new CFO\n    function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n    /// @param _newCOO The address of the new COO\n    function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    /*** Pausable functionality adapted from OpenZeppelin ***/\n\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /// @dev Modifier to allow actions only when the contract IS paused\n    modifier whenPaused {\n        require(paused);\n        _;\n    }\n\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\n    ///  a bug or exploit is detected and we need to limit damage.\n    function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }\n\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n    ///  one reason we may pause the contract is when CFO or COO accounts are\n    ///  compromised.\n    /// @notice This is public rather than external so it can be called by\n    ///  derived contracts.\n    function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }\n}"
  EventDefinition "ContractUpgrade"
     Gas costs: 0
     Source: "event ContractUpgrade(address newContract);"
    ParameterList
       Source: "(address newContract)"
      VariableDeclaration "newContract"
         Type: address
         Source: "address newContract"
        ElementaryTypeName address
           Source: "address"
  VariableDeclaration "ceoAddress"
     Type: address
     Gas costs: [???]
     Source: "address public ceoAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "cfoAddress"
     Type: address
     Gas costs: [???]
     Source: "address public cfoAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "cooAddress"
     Type: address
     Gas costs: [???]
     Source: "address public cooAddress"
    ElementaryTypeName address
       Source: "address"
  VariableDeclaration "paused"
     Type: bool
     Gas costs: [???]
     Source: "bool public paused = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  ModifierDefinition "onlyCEO"
     Source: "modifier onlyCEO() {\n        require(msg.sender == ceoAddress);\n        _;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n        require(msg.sender == ceoAddress);\n        _;\n    }"
      ExpressionStatement
         Gas costs: 3102
         Source: "require(msg.sender == ceoAddress)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == ceoAddress)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == ceoAddress"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier ceoAddress
               Type: address
               Source: "ceoAddress"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyCFO"
     Source: "modifier onlyCFO() {\n        require(msg.sender == cfoAddress);\n        _;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n        require(msg.sender == cfoAddress);\n        _;\n    }"
      ExpressionStatement
         Gas costs: 282
         Source: "require(msg.sender == cfoAddress)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == cfoAddress)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == cfoAddress"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier cfoAddress
               Type: address
               Source: "cfoAddress"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyCOO"
     Source: "modifier onlyCOO() {\n        require(msg.sender == cooAddress);\n        _;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n        require(msg.sender == cooAddress);\n        _;\n    }"
      ExpressionStatement
         Gas costs: 1410
         Source: "require(msg.sender == cooAddress)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == cooAddress)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == cooAddress"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier cooAddress
               Type: address
               Source: "cooAddress"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "onlyCLevel"
     Source: "modifier onlyCLevel() {\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n        require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        );\n        _;\n    }"
      ExpressionStatement
         Gas costs: 4992
         Source: "require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        )"
        FunctionCall
           Type: tuple()
           Source: "require(\n            msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress\n        )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "msg.sender == cooAddress ||\n            msg.sender == ceoAddress ||\n            msg.sender == cfoAddress"
            BinaryOperation using operator ||
               Type: bool
               Source: "msg.sender == cooAddress ||\n            msg.sender == ceoAddress"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "msg.sender == cooAddress"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier cooAddress
                   Type: address
                   Source: "cooAddress"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "msg.sender == ceoAddress"
                MemberAccess to member sender
                   Type: address
                   Source: "msg.sender"
                  Identifier msg
                     Type: msg
                     Source: "msg"
                Identifier ceoAddress
                   Type: address
                   Source: "ceoAddress"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == cfoAddress"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier cfoAddress
                 Type: address
                 Source: "cfoAddress"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "setCEO" - public
     Source: "function setCEO(address _newCEO) external onlyCEO {\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newCEO)"
      VariableDeclaration "_newCEO"
         Type: address
         Source: "address _newCEO"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_newCEO != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_newCEO != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_newCEO != address(0)"
            Identifier _newCEO
               Type: address
               Source: "_newCEO"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "ceoAddress = _newCEO"
        Assignment using operator =
           Type: address
           Source: "ceoAddress = _newCEO"
          Identifier ceoAddress
             Type: address
             Source: "ceoAddress"
          Identifier _newCEO
             Type: address
             Source: "_newCEO"
  FunctionDefinition "setCFO" - public
     Source: "function setCFO(address _newCFO) external onlyCEO {\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newCFO)"
      VariableDeclaration "_newCFO"
         Type: address
         Source: "address _newCFO"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_newCFO != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_newCFO != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_newCFO != address(0)"
            Identifier _newCFO
               Type: address
               Source: "_newCFO"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "cfoAddress = _newCFO"
        Assignment using operator =
           Type: address
           Source: "cfoAddress = _newCFO"
          Identifier cfoAddress
             Type: address
             Source: "cfoAddress"
          Identifier _newCFO
             Type: address
             Source: "_newCFO"
  FunctionDefinition "setCOO" - public
     Source: "function setCOO(address _newCOO) external onlyCEO {\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _newCOO)"
      VariableDeclaration "_newCOO"
         Type: address
         Source: "address _newCOO"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_newCOO != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_newCOO != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_newCOO != address(0)"
            Identifier _newCOO
               Type: address
               Source: "_newCOO"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20267
         Source: "cooAddress = _newCOO"
        Assignment using operator =
           Type: address
           Source: "cooAddress = _newCOO"
          Identifier cooAddress
             Type: address
             Source: "cooAddress"
          Identifier _newCOO
             Type: address
             Source: "_newCOO"
  ModifierDefinition "whenNotPaused"
     Source: "modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n        require(!paused);\n        _;\n    }"
      ExpressionStatement
         Gas costs: 3816
         Source: "require(!paused)"
        FunctionCall
           Type: tuple()
           Source: "require(!paused)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!paused"
            Identifier paused
               Type: bool
               Source: "paused"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "whenPaused"
     Source: "modifier whenPaused {\n        require(paused);\n        _;\n    }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(paused);\n        _;\n    }"
      ExpressionStatement
         Gas costs: 1260
         Source: "require(paused)"
        FunctionCall
           Type: tuple()
           Source: "require(paused)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier paused
             Type: bool
             Source: "paused"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "pause" - public
     Source: "function pause() external onlyCLevel whenNotPaused {\n        paused = true;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCLevel"
       Gas costs: 0
       Source: "onlyCLevel"
      Identifier onlyCLevel
         Type: modifier ()
         Source: "onlyCLevel"
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        paused = true;\n    }"
      ExpressionStatement
         Gas costs: 20317
         Source: "paused = true"
        Assignment using operator =
           Type: bool
           Source: "paused = true"
          Identifier paused
             Type: bool
             Source: "paused"
          Literal, token: true value: true
             Type: bool
             Source: "true"
  FunctionDefinition "unpause" - public
     Source: "function unpause() public onlyCEO whenPaused {\n        // can't unpause if contract was upgraded\n        paused = false;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    ModifierInvocation "whenPaused"
       Gas costs: 0
       Source: "whenPaused"
      Identifier whenPaused
         Type: modifier ()
         Source: "whenPaused"
    Block
       Source: "{\n        // can't unpause if contract was upgraded\n        paused = false;\n    }"
      ExpressionStatement
         Gas costs: 20317
         Source: "paused = false"
        Assignment using operator =
           Type: bool
           Source: "paused = false"
          Identifier paused
             Type: bool
             Source: "paused"
          Literal, token: false value: false
             Type: bool
             Source: "false"
ContractDefinition "PandaBase"
   Source: "contract PandaBase is PandaAccessControl {\n    /*** EVENTS ***/\n\n    uint256 public constant GEN0_TOTAL_COUNT = 16200;\n    uint256 public gen0CreatedCount;\n\n    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously\n    ///  includes any time a cat is created through the giveBirth method, but it is also called\n    ///  when a new gen0 cat is created.\n    event Birth(address owner, uint256 pandaId, uint256 matronId, uint256 sireId, uint256[2] genes);\n\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten\n    ///  ownership is assigned, including births.\n    event Transfer(address from, address to, uint256 tokenId);\n\n    /*** DATA TYPES ***/\n\n    /// @dev The main Panda struct. Every cat in CryptoPandas is represented by a copy\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\n    struct Panda {\n        // The Panda's genetic code is packed into these 256-bits, the format is\n        // sooper-sekret! A cat's genes never change.\n        uint256[2] genes;\n\n        // The timestamp from the block when this cat came into existence.\n        uint64 birthTime;\n\n        // The minimum timestamp after which this cat can engage in breeding\n        // activities again. This same timestamp is used for the pregnancy\n        // timer (for matrons) as well as the siring cooldown.\n        uint64 cooldownEndBlock;\n\n        // The ID of the parents of this panda, set to 0 for gen0 cats.\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\n        // 4 billion cats. This number might seem small until you realize\n        // that Ethereum currently has a limit of about 500 million\n        // transactions per year! So, this definitely won't be a problem\n        // for several years (even as Ethereum learns to scale).\n        uint32 matronId;\n        uint32 sireId;\n\n        // Set to the ID of the sire cat for matrons that are pregnant,\n        // zero otherwise. A non-zero value here is how we know a cat\n        // is pregnant. Used to retrieve the genetic material for the new\n        // kitten when the birth transpires.\n        uint32 siringWithId;\n\n        // Set to the index in the cooldown array (see below) that represents\n        // the current cooldown duration for this Panda. This starts at zero\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\n        // Incremented by one for each successful breeding action, regardless\n        // of whether this cat is acting as matron or sire.\n        uint16 cooldownIndex;\n\n        // The \"generation number\" of this cat. Cats minted by the CK contract\n        // for sale are called \"gen0\" and have a generation number of 0. The\n        // generation number of all other cats is the larger of the two generation\n        // numbers of their parents, plus one.\n        // (i.e. max(matron.generation, sire.generation) + 1)\n        uint16 generation;\n    }\n\n    /*** CONSTANTS ***/\n\n    /// @dev A lookup table indicating the cooldown duration after any successful\n    ///  breeding action, called \"pregnancy time\" for matrons and \"siring cooldown\"\n    ///  for sires. Designed such that the cooldown roughly doubles each time a cat\n    ///  is bred, encouraging owners not to just keep breeding the same cat over\n    ///  and over again. Caps out at one week (a cat can breed an unbounded number\n    ///  of times, and the maximum cooldown is always seven days).\n    uint32[9] public cooldowns = [\n        uint32(5 minutes),\n        uint32(30 minutes),\n        uint32(2 hours),\n        uint32(4 hours),    \n        uint32(8 hours),\n        uint32(24 hours),\n        uint32(48 hours),\n        uint32(72 hours),\n        uint32(7 days)\n    ];\n\n    // An approximation of currently how many seconds are in between blocks.\n    uint256 public secondsPerBlock = 15;\n\n    /*** STORAGE ***/\n\n    /// @dev An array containing the Panda struct for all Pandas in existence. The ID\n    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,\n    ///  the unPanda, the mythical beast that is the parent of all gen0 cats. A bizarre\n    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.\n    ///  In other words, cat ID 0 is invalid... ;-)\n    Panda[] pandas;\n\n    /// @dev A mapping from cat IDs to the address that owns them. All cats have\n    ///  some valid owner address, even gen0 cats are created with a non-zero owner.\n    mapping (uint256 => address) public pandaIndexToOwner;\n\n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping (address => uint256) ownershipTokenCount;\n\n    /// @dev A mapping from PandaIDs to an address that has been approved to call\n    ///  transferFrom(). Each Panda can only have one approved address for transfer\n    ///  at any time. A zero value means no approval is outstanding.\n    mapping (uint256 => address) public pandaIndexToApproved;\n\n    /// @dev A mapping from PandaIDs to an address that has been approved to use\n    ///  this Panda for siring via breedWith(). Each Panda can only have one approved\n    ///  address for siring at any time. A zero value means no approval is outstanding.\n    mapping (uint256 => address) public sireAllowedToAddress;\n\n    /// @dev The address of the ClockAuction contract that handles sales of Pandas. This\n    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are\n    ///  initiated every 15 minutes.\n    SaleClockAuction public saleAuction;\n\n    /// @dev The address of a custom ClockAuction subclassed contract that handles siring\n    ///  auctions. Needs to be separate from saleAuction because the actions taken on success\n    ///  after a sales and siring auction are quite different.\n    SiringClockAuction public siringAuction;\n\n\n    /// @dev The address of the sibling contract that is used to implement the sooper-sekret\n    ///  genetic combination algorithm.\n    GeneScienceInterface public geneScience;\n\n\n    SaleClockAuctionERC20 public saleAuctionERC20;\n\n\n    // wizz panda total\n    mapping (uint256 => uint256) public wizzPandaQuota;\n    mapping (uint256 => uint256) public wizzPandaCount;\n\n    \n    /// wizz panda control\n    function getWizzPandaQuotaOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaQuota[_tp];\n    }\n\n    function getWizzPandaCountOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaCount[_tp];\n    }\n\n    function setTotalWizzPandaOf(uint256 _tp,uint256 _total) external onlyCLevel {\n        require (wizzPandaQuota[_tp]==0);\n        require (_total==uint256(uint32(_total)));\n        wizzPandaQuota[_tp] = _total;\n    }\n\n    function getWizzTypeOf(uint256 _id) view external returns(uint256) {\n        Panda memory _p = pandas[_id];\n        return geneScience.getWizzType(_p.genes);\n    }\n\n    /// @dev Assigns ownership of a specific Panda to an address.\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        // Since the number of kittens is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        pandaIndexToOwner[_tokenId] = _to;\n        // When creating new kittens _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete pandaIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        Transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev An internal method that creates a new panda and stores it. This\n    ///  method doesn't do any checking and should only be called when the\n    ///  input data is known to be valid. Will generate both a Birth event\n    ///  and a Transfer event.\n    /// @param _matronId The panda ID of the matron of this cat (zero for gen0)\n    /// @param _sireId The panda ID of the sire of this cat (zero for gen0)\n    /// @param _generation The generation number of this cat, must be computed by caller.\n    /// @param _genes The panda's genetic code.\n    /// @param _owner The inital owner of this cat, must be non-zero (except for the unPanda, ID 0)\n    function _createPanda(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256[2] _genes,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        // These requires are not strictly necessary, our calling code should make\n        // sure that these conditions are never broken. However! _createPanda() is already\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\n        // to ensure our data structures are always valid.\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n\n\n        // New panda starts with the same cooldown as parent gen/2\n        uint16 cooldownIndex = 0;\n        // when contract creation, geneScience ref is null \n        if (pandas.length>0){\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            // gensis panda cooldownIndex should be 24 hours\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n\n            // increase wizz counter\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            // all gen0&gen1 except gensis\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }\n\n        Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newKittenId = pandas.push(_panda) - 1;\n\n        // It's probably never going to happen, 4 billion cats is A LOT, but\n        // let's just be 100% sure we never let this happen.\n        require(newKittenId == uint256(uint32(newKittenId)));\n\n        // emit the birth event\n        Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        );\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, _owner, newKittenId);\n        \n        return newKittenId;\n    }\n\n    // Any C-level can fix how many seconds per blocks are currently observed.\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\n        require(secs < cooldowns[0]);\n        secondsPerBlock = secs;\n    }\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "PandaAccessControl"
    UserDefinedTypeName "PandaAccessControl"
       Source: "PandaAccessControl"
  VariableDeclaration "GEN0_TOTAL_COUNT"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant GEN0_TOTAL_COUNT = 16200"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 16200
       Type: int_const 16200
       Source: "16200"
  VariableDeclaration "gen0CreatedCount"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public gen0CreatedCount"
    ElementaryTypeName uint256
       Source: "uint256"
  EventDefinition "Birth"
     Gas costs: 0
     Source: "event Birth(address owner, uint256 pandaId, uint256 matronId, uint256 sireId, uint256[2] genes);"
    ParameterList
       Source: "(address owner, uint256 pandaId, uint256 matronId, uint256 sireId, uint256[2] genes)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "pandaId"
         Type: uint256
         Source: "uint256 pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matronId"
         Type: uint256
         Source: "uint256 matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "sireId"
         Type: uint256
         Source: "uint256 sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "genes"
         Type: uint256[2] memory
         Source: "uint256[2] genes"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
  EventDefinition "Transfer"
     Gas costs: 0
     Source: "event Transfer(address from, address to, uint256 tokenId);"
    ParameterList
       Source: "(address from, address to, uint256 tokenId)"
      VariableDeclaration "from"
         Type: address
         Source: "address from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "to"
         Type: address
         Source: "address to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  StructDefinition "Panda"
     Gas costs: 0
     Source: "struct Panda {\n        // The Panda's genetic code is packed into these 256-bits, the format is\n        // sooper-sekret! A cat's genes never change.\n        uint256[2] genes;\n\n        // The timestamp from the block when this cat came into existence.\n        uint64 birthTime;\n\n        // The minimum timestamp after which this cat can engage in breeding\n        // activities again. This same timestamp is used for the pregnancy\n        // timer (for matrons) as well as the siring cooldown.\n        uint64 cooldownEndBlock;\n\n        // The ID of the parents of this panda, set to 0 for gen0 cats.\n        // Note that using 32-bit unsigned integers limits us to a \"mere\"\n        // 4 billion cats. This number might seem small until you realize\n        // that Ethereum currently has a limit of about 500 million\n        // transactions per year! So, this definitely won't be a problem\n        // for several years (even as Ethereum learns to scale).\n        uint32 matronId;\n        uint32 sireId;\n\n        // Set to the ID of the sire cat for matrons that are pregnant,\n        // zero otherwise. A non-zero value here is how we know a cat\n        // is pregnant. Used to retrieve the genetic material for the new\n        // kitten when the birth transpires.\n        uint32 siringWithId;\n\n        // Set to the index in the cooldown array (see below) that represents\n        // the current cooldown duration for this Panda. This starts at zero\n        // for gen0 cats, and is initialized to floor(generation/2) for others.\n        // Incremented by one for each successful breeding action, regardless\n        // of whether this cat is acting as matron or sire.\n        uint16 cooldownIndex;\n\n        // The \"generation number\" of this cat. Cats minted by the CK contract\n        // for sale are called \"gen0\" and have a generation number of 0. The\n        // generation number of all other cats is the larger of the two generation\n        // numbers of their parents, plus one.\n        // (i.e. max(matron.generation, sire.generation) + 1)\n        uint16 generation;\n    }"
    VariableDeclaration "genes"
       Type: uint256[2] storage pointer
       Source: "uint256[2] genes"
      ArrayTypeName
         Source: "uint256[2]"
        ElementaryTypeName uint256
           Source: "uint256"
        Literal, token: [no token] value: 2
           Type unknown.
           Source: "2"
    VariableDeclaration "birthTime"
       Type: uint64
       Source: "uint64 birthTime"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "cooldownEndBlock"
       Type: uint64
       Source: "uint64 cooldownEndBlock"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "matronId"
       Type: uint32
       Source: "uint32 matronId"
      ElementaryTypeName uint32
         Source: "uint32"
    VariableDeclaration "sireId"
       Type: uint32
       Source: "uint32 sireId"
      ElementaryTypeName uint32
         Source: "uint32"
    VariableDeclaration "siringWithId"
       Type: uint32
       Source: "uint32 siringWithId"
      ElementaryTypeName uint32
         Source: "uint32"
    VariableDeclaration "cooldownIndex"
       Type: uint16
       Source: "uint16 cooldownIndex"
      ElementaryTypeName uint16
         Source: "uint16"
    VariableDeclaration "generation"
       Type: uint16
       Source: "uint16 generation"
      ElementaryTypeName uint16
         Source: "uint16"
  VariableDeclaration "cooldowns"
     Type: uint32[9] storage ref
     Gas costs: [???]
     Source: "uint32[9] public cooldowns = [\n        uint32(5 minutes),\n        uint32(30 minutes),\n        uint32(2 hours),\n        uint32(4 hours),    \n        uint32(8 hours),\n        uint32(24 hours),\n        uint32(48 hours),\n        uint32(72 hours),\n        uint32(7 days)\n    ]"
    ArrayTypeName
       Source: "uint32[9]"
      ElementaryTypeName uint32
         Source: "uint32"
      Literal, token: [no token] value: 9
         Type unknown.
         Source: "9"
    TupleExpression
       Type: uint32[9] memory
       Source: "[\n        uint32(5 minutes),\n        uint32(30 minutes),\n        uint32(2 hours),\n        uint32(4 hours),    \n        uint32(8 hours),\n        uint32(24 hours),\n        uint32(48 hours),\n        uint32(72 hours),\n        uint32(7 days)\n    ]"
      FunctionCall
         Type: uint32
         Source: "uint32(5 minutes)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 5
           Type: int_const 300
           Source: "5 minutes"
      FunctionCall
         Type: uint32
         Source: "uint32(30 minutes)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 30
           Type: int_const 1800
           Source: "30 minutes"
      FunctionCall
         Type: uint32
         Source: "uint32(2 hours)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 2
           Type: int_const 7200
           Source: "2 hours"
      FunctionCall
         Type: uint32
         Source: "uint32(4 hours)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 4
           Type: int_const 14400
           Source: "4 hours"
      FunctionCall
         Type: uint32
         Source: "uint32(8 hours)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 8
           Type: int_const 28800
           Source: "8 hours"
      FunctionCall
         Type: uint32
         Source: "uint32(24 hours)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 24
           Type: int_const 86400
           Source: "24 hours"
      FunctionCall
         Type: uint32
         Source: "uint32(48 hours)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 48
           Type: int_const 172800
           Source: "48 hours"
      FunctionCall
         Type: uint32
         Source: "uint32(72 hours)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 72
           Type: int_const 259200
           Source: "72 hours"
      FunctionCall
         Type: uint32
         Source: "uint32(7 days)"
        ElementaryTypeNameExpression uint32
           Type: type(uint32)
           Source: "uint32"
        Literal, token: [no token] value: 7
           Type: int_const 604800
           Source: "7 days"
  VariableDeclaration "secondsPerBlock"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public secondsPerBlock = 15"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 15
       Type: int_const 15
       Source: "15"
  VariableDeclaration "pandas"
     Type: struct PandaBase.Panda storage ref[] storage ref
     Gas costs: 0
     Source: "Panda[] pandas"
    ArrayTypeName
       Source: "Panda[]"
      UserDefinedTypeName "Panda"
         Source: "Panda"
  VariableDeclaration "pandaIndexToOwner"
     Type: mapping(uint256 => address)
     Gas costs: [???]
     Source: "mapping (uint256 => address) public pandaIndexToOwner"
    Mapping
       Source: "mapping (uint256 => address)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "ownershipTokenCount"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) ownershipTokenCount"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "pandaIndexToApproved"
     Type: mapping(uint256 => address)
     Gas costs: [???]
     Source: "mapping (uint256 => address) public pandaIndexToApproved"
    Mapping
       Source: "mapping (uint256 => address)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "sireAllowedToAddress"
     Type: mapping(uint256 => address)
     Gas costs: [???]
     Source: "mapping (uint256 => address) public sireAllowedToAddress"
    Mapping
       Source: "mapping (uint256 => address)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "saleAuction"
     Type: contract SaleClockAuction
     Gas costs: [???]
     Source: "SaleClockAuction public saleAuction"
    UserDefinedTypeName "SaleClockAuction"
       Source: "SaleClockAuction"
  VariableDeclaration "siringAuction"
     Type: contract SiringClockAuction
     Gas costs: [???]
     Source: "SiringClockAuction public siringAuction"
    UserDefinedTypeName "SiringClockAuction"
       Source: "SiringClockAuction"
  VariableDeclaration "geneScience"
     Type: contract GeneScienceInterface
     Gas costs: [???]
     Source: "GeneScienceInterface public geneScience"
    UserDefinedTypeName "GeneScienceInterface"
       Source: "GeneScienceInterface"
  VariableDeclaration "saleAuctionERC20"
     Type: contract SaleClockAuctionERC20
     Gas costs: [???]
     Source: "SaleClockAuctionERC20 public saleAuctionERC20"
    UserDefinedTypeName "SaleClockAuctionERC20"
       Source: "SaleClockAuctionERC20"
  VariableDeclaration "wizzPandaQuota"
     Type: mapping(uint256 => uint256)
     Gas costs: [???]
     Source: "mapping (uint256 => uint256) public wizzPandaQuota"
    Mapping
       Source: "mapping (uint256 => uint256)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "wizzPandaCount"
     Type: mapping(uint256 => uint256)
     Gas costs: [???]
     Source: "mapping (uint256 => uint256) public wizzPandaCount"
    Mapping
       Source: "mapping (uint256 => uint256)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "getWizzPandaQuotaOf" - public - const
     Source: "function getWizzPandaQuotaOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaQuota[_tp];\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tp)"
      VariableDeclaration "_tp"
         Type: uint256
         Source: "uint256 _tp"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        return wizzPandaQuota[_tp];\n    }"
      Return
         Gas costs: 292
         Source: "return wizzPandaQuota[_tp]"
        IndexAccess
           Type: uint256
           Source: "wizzPandaQuota[_tp]"
          Identifier wizzPandaQuota
             Type: mapping(uint256 => uint256)
             Source: "wizzPandaQuota"
          Identifier _tp
             Type: uint256
             Source: "_tp"
  FunctionDefinition "getWizzPandaCountOf" - public - const
     Source: "function getWizzPandaCountOf(uint256 _tp) view external returns(uint256) {\n        return wizzPandaCount[_tp];\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tp)"
      VariableDeclaration "_tp"
         Type: uint256
         Source: "uint256 _tp"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        return wizzPandaCount[_tp];\n    }"
      Return
         Gas costs: 292
         Source: "return wizzPandaCount[_tp]"
        IndexAccess
           Type: uint256
           Source: "wizzPandaCount[_tp]"
          Identifier wizzPandaCount
             Type: mapping(uint256 => uint256)
             Source: "wizzPandaCount"
          Identifier _tp
             Type: uint256
             Source: "_tp"
  FunctionDefinition "setTotalWizzPandaOf" - public
     Source: "function setTotalWizzPandaOf(uint256 _tp,uint256 _total) external onlyCLevel {\n        require (wizzPandaQuota[_tp]==0);\n        require (_total==uint256(uint32(_total)));\n        wizzPandaQuota[_tp] = _total;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tp,uint256 _total)"
      VariableDeclaration "_tp"
         Type: uint256
         Source: "uint256 _tp"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_total"
         Type: uint256
         Source: "uint256 _total"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCLevel"
       Gas costs: 0
       Source: "onlyCLevel"
      Identifier onlyCLevel
         Type: modifier ()
         Source: "onlyCLevel"
    Block
       Source: "{\n        require (wizzPandaQuota[_tp]==0);\n        require (_total==uint256(uint32(_total)));\n        wizzPandaQuota[_tp] = _total;\n    }"
      ExpressionStatement
         Gas costs: 319
         Source: "require (wizzPandaQuota[_tp]==0)"
        FunctionCall
           Type: tuple()
           Source: "require (wizzPandaQuota[_tp]==0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "wizzPandaQuota[_tp]==0"
            IndexAccess
               Type: uint256
               Source: "wizzPandaQuota[_tp]"
              Identifier wizzPandaQuota
                 Type: mapping(uint256 => uint256)
                 Source: "wizzPandaQuota"
              Identifier _tp
                 Type: uint256
                 Source: "_tp"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 41
         Source: "require (_total==uint256(uint32(_total)))"
        FunctionCall
           Type: tuple()
           Source: "require (_total==uint256(uint32(_total)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_total==uint256(uint32(_total))"
            Identifier _total
               Type: uint256
               Source: "_total"
            FunctionCall
               Type: uint256
               Source: "uint256(uint32(_total))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint32
                 Source: "uint32(_total)"
                ElementaryTypeNameExpression uint32
                   Type: type(uint32)
                   Source: "uint32"
                Identifier _total
                   Type: uint256
                   Source: "_total"
      ExpressionStatement
         Gas costs: 20098
         Source: "wizzPandaQuota[_tp] = _total"
        Assignment using operator =
           Type: uint256
           Source: "wizzPandaQuota[_tp] = _total"
          IndexAccess
             Type: uint256
             Source: "wizzPandaQuota[_tp]"
            Identifier wizzPandaQuota
               Type: mapping(uint256 => uint256)
               Source: "wizzPandaQuota"
            Identifier _tp
               Type: uint256
               Source: "_tp"
          Identifier _total
             Type: uint256
             Source: "_total"
  FunctionDefinition "getWizzTypeOf" - public - const
     Source: "function getWizzTypeOf(uint256 _id) view external returns(uint256) {\n        Panda memory _p = pandas[_id];\n        return geneScience.getWizzType(_p.genes);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _id)"
      VariableDeclaration "_id"
         Type: uint256
         Source: "uint256 _id"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        Panda memory _p = pandas[_id];\n        return geneScience.getWizzType(_p.genes);\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "Panda memory _p = pandas[_id]"
        VariableDeclaration "_p"
           Type: struct PandaBase.Panda memory
           Source: "Panda memory _p"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_id]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _id
             Type: uint256
             Source: "_id"
      Return
         Gas costs: [???]
         Source: "return geneScience.getWizzType(_p.genes)"
        FunctionCall
           Type: uint256
           Source: "geneScience.getWizzType(_p.genes)"
          MemberAccess to member getWizzType
             Type: function (uint256[2] memory) view external returns (uint256)
             Source: "geneScience.getWizzType"
            Identifier geneScience
               Type: contract GeneScienceInterface
               Source: "geneScience"
          MemberAccess to member genes
             Type: uint256[2] memory
             Source: "_p.genes"
            Identifier _p
               Type: struct PandaBase.Panda memory
               Source: "_p"
  FunctionDefinition "_transfer"
     Source: "function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        // Since the number of kittens is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        pandaIndexToOwner[_tokenId] = _to;\n        // When creating new kittens _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete pandaIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        Transfer(_from, _to, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _from, address _to, uint256 _tokenId)"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Since the number of kittens is capped to 2^32 we can't overflow this\n        ownershipTokenCount[_to]++;\n        // transfer ownership\n        pandaIndexToOwner[_tokenId] = _to;\n        // When creating new kittens _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete pandaIndexToApproved[_tokenId];\n        }\n        // Emit the transfer event.\n        Transfer(_from, _to, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 20333
         Source: "ownershipTokenCount[_to]++"
        UnaryOperation (postfix) ++
           Type: uint256
           Source: "ownershipTokenCount[_to]++"
          IndexAccess
             Type: uint256
             Source: "ownershipTokenCount[_to]"
            Identifier ownershipTokenCount
               Type: mapping(address => uint256)
               Source: "ownershipTokenCount"
            Identifier _to
               Type: address
               Source: "_to"
      ExpressionStatement
         Gas costs: 20345
         Source: "pandaIndexToOwner[_tokenId] = _to"
        Assignment using operator =
           Type: address
           Source: "pandaIndexToOwner[_tokenId] = _to"
          IndexAccess
             Type: address
             Source: "pandaIndexToOwner[_tokenId]"
            Identifier pandaIndexToOwner
               Type: mapping(uint256 => address)
               Source: "pandaIndexToOwner"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _to
             Type: address
             Source: "_to"
      IfStatement
         Source: "if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete pandaIndexToApproved[_tokenId];\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: 24
           Source: "_from != address(0)"
          Identifier _from
             Type: address
             Source: "_from"
          FunctionCall
             Type: address
             Source: "address(0)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\n            ownershipTokenCount[_from]--;\n            // once the kitten is transferred also clear sire allowances\n            delete sireAllowedToAddress[_tokenId];\n            // clear any previously approved ownership exchange\n            delete pandaIndexToApproved[_tokenId];\n        }"
          ExpressionStatement
             Gas costs: 20336
             Source: "ownershipTokenCount[_from]--"
            UnaryOperation (postfix) --
               Type: uint256
               Source: "ownershipTokenCount[_from]--"
              IndexAccess
                 Type: uint256
                 Source: "ownershipTokenCount[_from]"
                Identifier ownershipTokenCount
                   Type: mapping(address => uint256)
                   Source: "ownershipTokenCount"
                Identifier _from
                   Type: address
                   Source: "_from"
          ExpressionStatement
             Gas costs: 20320
             Source: "delete sireAllowedToAddress[_tokenId]"
            UnaryOperation (prefix) delete
               Type: tuple()
               Source: "delete sireAllowedToAddress[_tokenId]"
              IndexAccess
                 Type: address
                 Source: "sireAllowedToAddress[_tokenId]"
                Identifier sireAllowedToAddress
                   Type: mapping(uint256 => address)
                   Source: "sireAllowedToAddress"
                Identifier _tokenId
                   Type: uint256
                   Source: "_tokenId"
          ExpressionStatement
             Gas costs: 20320
             Source: "delete pandaIndexToApproved[_tokenId]"
            UnaryOperation (prefix) delete
               Type: tuple()
               Source: "delete pandaIndexToApproved[_tokenId]"
              IndexAccess
                 Type: address
                 Source: "pandaIndexToApproved[_tokenId]"
                Identifier pandaIndexToApproved
                   Type: mapping(uint256 => address)
                   Source: "pandaIndexToApproved"
                Identifier _tokenId
                   Type: uint256
                   Source: "_tokenId"
      ExpressionStatement
         Gas costs: [???]
         Source: "Transfer(_from, _to, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "Transfer(_from, _to, _tokenId)"
          Identifier Transfer
             Type: function (address,address,uint256)
             Source: "Transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "_createPanda"
     Source: "function _createPanda(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256[2] _genes,\n        address _owner\n    )\n        internal\n        returns (uint)\n    {\n        // These requires are not strictly necessary, our calling code should make\n        // sure that these conditions are never broken. However! _createPanda() is already\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\n        // to ensure our data structures are always valid.\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n\n\n        // New panda starts with the same cooldown as parent gen/2\n        uint16 cooldownIndex = 0;\n        // when contract creation, geneScience ref is null \n        if (pandas.length>0){\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            // gensis panda cooldownIndex should be 24 hours\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n\n            // increase wizz counter\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            // all gen0&gen1 except gensis\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }\n\n        Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newKittenId = pandas.push(_panda) - 1;\n\n        // It's probably never going to happen, 4 billion cats is A LOT, but\n        // let's just be 100% sure we never let this happen.\n        require(newKittenId == uint256(uint32(newKittenId)));\n\n        // emit the birth event\n        Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        );\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, _owner, newKittenId);\n        \n        return newKittenId;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _matronId,\n        uint256 _sireId,\n        uint256 _generation,\n        uint256[2] _genes,\n        address _owner\n    )"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_generation"
         Type: uint256
         Source: "uint256 _generation"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_genes"
         Type: uint256[2] memory
         Source: "uint256[2] _genes"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n        // These requires are not strictly necessary, our calling code should make\n        // sure that these conditions are never broken. However! _createPanda() is already\n        // an expensive call (for storage), and it doesn't hurt to be especially careful\n        // to ensure our data structures are always valid.\n        require(_matronId == uint256(uint32(_matronId)));\n        require(_sireId == uint256(uint32(_sireId)));\n        require(_generation == uint256(uint16(_generation)));\n\n\n        // New panda starts with the same cooldown as parent gen/2\n        uint16 cooldownIndex = 0;\n        // when contract creation, geneScience ref is null \n        if (pandas.length>0){\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            // gensis panda cooldownIndex should be 24 hours\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n\n            // increase wizz counter\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            // all gen0&gen1 except gensis\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }\n\n        Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        });\n        uint256 newKittenId = pandas.push(_panda) - 1;\n\n        // It's probably never going to happen, 4 billion cats is A LOT, but\n        // let's just be 100% sure we never let this happen.\n        require(newKittenId == uint256(uint32(newKittenId)));\n\n        // emit the birth event\n        Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        );\n\n        // This will assign ownership, and also emit the Transfer event as\n        // per ERC721 draft\n        _transfer(0, _owner, newKittenId);\n        \n        return newKittenId;\n    }"
      ExpressionStatement
         Gas costs: 41
         Source: "require(_matronId == uint256(uint32(_matronId)))"
        FunctionCall
           Type: tuple()
           Source: "require(_matronId == uint256(uint32(_matronId)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_matronId == uint256(uint32(_matronId))"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            FunctionCall
               Type: uint256
               Source: "uint256(uint32(_matronId))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint32
                 Source: "uint32(_matronId)"
                ElementaryTypeNameExpression uint32
                   Type: type(uint32)
                   Source: "uint32"
                Identifier _matronId
                   Type: uint256
                   Source: "_matronId"
      ExpressionStatement
         Gas costs: 41
         Source: "require(_sireId == uint256(uint32(_sireId)))"
        FunctionCall
           Type: tuple()
           Source: "require(_sireId == uint256(uint32(_sireId)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sireId == uint256(uint32(_sireId))"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
            FunctionCall
               Type: uint256
               Source: "uint256(uint32(_sireId))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint32
                 Source: "uint32(_sireId)"
                ElementaryTypeNameExpression uint32
                   Type: type(uint32)
                   Source: "uint32"
                Identifier _sireId
                   Type: uint256
                   Source: "_sireId"
      ExpressionStatement
         Gas costs: 41
         Source: "require(_generation == uint256(uint16(_generation)))"
        FunctionCall
           Type: tuple()
           Source: "require(_generation == uint256(uint16(_generation)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_generation == uint256(uint16(_generation))"
            Identifier _generation
               Type: uint256
               Source: "_generation"
            FunctionCall
               Type: uint256
               Source: "uint256(uint16(_generation))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint16
                 Source: "uint16(_generation)"
                ElementaryTypeNameExpression uint16
                   Type: type(uint16)
                   Source: "uint16"
                Identifier _generation
                   Type: uint256
                   Source: "_generation"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint16 cooldownIndex = 0"
        VariableDeclaration "cooldownIndex"
           Type: uint16
           Source: "uint16 cooldownIndex"
          ElementaryTypeName uint16
             Source: "uint16"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      IfStatement
         Source: "if (pandas.length>0){\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            // gensis panda cooldownIndex should be 24 hours\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n\n            // increase wizz counter\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            // all gen0&gen1 except gensis\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 217
           Source: "pandas.length>0"
          MemberAccess to member length
             Type: uint256
             Source: "pandas.length"
            Identifier pandas
               Type: struct PandaBase.Panda storage ref[] storage ref
               Source: "pandas"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes));\n            if (pureDegree==0) {\n                pureDegree = 1;\n            }\n            cooldownIndex = 1000/pureDegree;\n            if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }\n            cooldownIndex = cooldownIndex - 1;\n            if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }\n            uint256 _tp = geneScience.getWizzType(_genes);\n            if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }\n            // gensis panda cooldownIndex should be 24 hours\n            if (_tp == 1){\n                cooldownIndex = 5;\n            }\n\n            // increase wizz counter\n            if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }\n            // all gen0&gen1 except gensis\n            if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }\n        }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint16 pureDegree = uint16(geneScience.getPureFromGene(_genes))"
            VariableDeclaration "pureDegree"
               Type: uint16
               Source: "uint16 pureDegree"
              ElementaryTypeName uint16
                 Source: "uint16"
            FunctionCall
               Type: uint16
               Source: "uint16(geneScience.getPureFromGene(_genes))"
              ElementaryTypeNameExpression uint16
                 Type: type(uint16)
                 Source: "uint16"
              FunctionCall
                 Type: uint256
                 Source: "geneScience.getPureFromGene(_genes)"
                MemberAccess to member getPureFromGene
                   Type: function (uint256[2] memory) view external returns (uint256)
                   Source: "geneScience.getPureFromGene"
                  Identifier geneScience
                     Type: contract GeneScienceInterface
                     Source: "geneScience"
                Identifier _genes
                   Type: uint256[2] memory
                   Source: "_genes"
          IfStatement
             Source: "if (pureDegree==0) {\n                pureDegree = 1;\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 15
               Source: "pureDegree==0"
              Identifier pureDegree
                 Type: uint16
                 Source: "pureDegree"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\n                pureDegree = 1;\n            }"
              ExpressionStatement
                 Gas costs: 8
                 Source: "pureDegree = 1"
                Assignment using operator =
                   Type: uint16
                   Source: "pureDegree = 1"
                  Identifier pureDegree
                     Type: uint16
                     Source: "pureDegree"
                  Literal, token: [no token] value: 1
                     Type: int_const 1
                     Source: "1"
          ExpressionStatement
             Gas costs: 45
             Source: "cooldownIndex = 1000/pureDegree"
            Assignment using operator =
               Type: uint16
               Source: "cooldownIndex = 1000/pureDegree"
              Identifier cooldownIndex
                 Type: uint16
                 Source: "cooldownIndex"
              BinaryOperation using operator /
                 Type: uint16
                 Source: "1000/pureDegree"
                Literal, token: [no token] value: 1000
                   Type: int_const 1000
                   Source: "1000"
                Identifier pureDegree
                   Type: uint16
                   Source: "pureDegree"
          IfStatement
             Source: "if (cooldownIndex%10 < 5){\n                cooldownIndex = cooldownIndex/10;\n            }else{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }"
            BinaryOperation using operator <
               Type: bool
               Gas costs: 52
               Source: "cooldownIndex%10 < 5"
              BinaryOperation using operator %
                 Type: uint16
                 Source: "cooldownIndex%10"
                Identifier cooldownIndex
                   Type: uint16
                   Source: "cooldownIndex"
                Literal, token: [no token] value: 10
                   Type: int_const 10
                   Source: "10"
              Literal, token: [no token] value: 5
                 Type: int_const 5
                 Source: "5"
            Block
               Source: "{\n                cooldownIndex = cooldownIndex/10;\n            }"
              ExpressionStatement
                 Gas costs: 45
                 Source: "cooldownIndex = cooldownIndex/10"
                Assignment using operator =
                   Type: uint16
                   Source: "cooldownIndex = cooldownIndex/10"
                  Identifier cooldownIndex
                     Type: uint16
                     Source: "cooldownIndex"
                  BinaryOperation using operator /
                     Type: uint16
                     Source: "cooldownIndex/10"
                    Identifier cooldownIndex
                       Type: uint16
                       Source: "cooldownIndex"
                    Literal, token: [no token] value: 10
                       Type: int_const 10
                       Source: "10"
            Block
               Source: "{\n                cooldownIndex = cooldownIndex/10 + 1;\n            }"
              ExpressionStatement
                 Gas costs: 51
                 Source: "cooldownIndex = cooldownIndex/10 + 1"
                Assignment using operator =
                   Type: uint16
                   Source: "cooldownIndex = cooldownIndex/10 + 1"
                  Identifier cooldownIndex
                     Type: uint16
                     Source: "cooldownIndex"
                  BinaryOperation using operator +
                     Type: uint16
                     Source: "cooldownIndex/10 + 1"
                    BinaryOperation using operator /
                       Type: uint16
                       Source: "cooldownIndex/10"
                      Identifier cooldownIndex
                         Type: uint16
                         Source: "cooldownIndex"
                      Literal, token: [no token] value: 10
                         Type: int_const 10
                         Source: "10"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
          ExpressionStatement
             Gas costs: 14
             Source: "cooldownIndex = cooldownIndex - 1"
            Assignment using operator =
               Type: uint16
               Source: "cooldownIndex = cooldownIndex - 1"
              Identifier cooldownIndex
                 Type: uint16
                 Source: "cooldownIndex"
              BinaryOperation using operator -
                 Type: uint16
                 Source: "cooldownIndex - 1"
                Identifier cooldownIndex
                   Type: uint16
                   Source: "cooldownIndex"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
          IfStatement
             Source: "if (cooldownIndex > 8) {\n                cooldownIndex = 8;\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 15
               Source: "cooldownIndex > 8"
              Identifier cooldownIndex
                 Type: uint16
                 Source: "cooldownIndex"
              Literal, token: [no token] value: 8
                 Type: int_const 8
                 Source: "8"
            Block
               Source: "{\n                cooldownIndex = 8;\n            }"
              ExpressionStatement
                 Gas costs: 8
                 Source: "cooldownIndex = 8"
                Assignment using operator =
                   Type: uint16
                   Source: "cooldownIndex = 8"
                  Identifier cooldownIndex
                     Type: uint16
                     Source: "cooldownIndex"
                  Literal, token: [no token] value: 8
                     Type: int_const 8
                     Source: "8"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint256 _tp = geneScience.getWizzType(_genes)"
            VariableDeclaration "_tp"
               Type: uint256
               Source: "uint256 _tp"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "geneScience.getWizzType(_genes)"
              MemberAccess to member getWizzType
                 Type: function (uint256[2] memory) view external returns (uint256)
                 Source: "geneScience.getWizzType"
                Identifier geneScience
                   Type: contract GeneScienceInterface
                   Source: "geneScience"
              Identifier _genes
                 Type: uint256[2] memory
                 Source: "_genes"
          IfStatement
             Source: "if (_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]) {\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 605
               Source: "_tp>0 && wizzPandaQuota[_tp]<=wizzPandaCount[_tp]"
              BinaryOperation using operator >
                 Type: bool
                 Source: "_tp>0"
                Identifier _tp
                   Type: uint256
                   Source: "_tp"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "wizzPandaQuota[_tp]<=wizzPandaCount[_tp]"
                IndexAccess
                   Type: uint256
                   Source: "wizzPandaQuota[_tp]"
                  Identifier wizzPandaQuota
                     Type: mapping(uint256 => uint256)
                     Source: "wizzPandaQuota"
                  Identifier _tp
                     Type: uint256
                     Source: "_tp"
                IndexAccess
                   Type: uint256
                   Source: "wizzPandaCount[_tp]"
                  Identifier wizzPandaCount
                     Type: mapping(uint256 => uint256)
                     Source: "wizzPandaCount"
                  Identifier _tp
                     Type: uint256
                     Source: "_tp"
            Block
               Source: "{\n                _genes = geneScience.clearWizzType(_genes);\n                _tp = 0;\n            }"
              ExpressionStatement
                 Gas costs: [???]
                 Source: "_genes = geneScience.clearWizzType(_genes)"
                Assignment using operator =
                   Type: uint256[2] memory
                   Source: "_genes = geneScience.clearWizzType(_genes)"
                  Identifier _genes
                     Type: uint256[2] memory
                     Source: "_genes"
                  FunctionCall
                     Type: uint256[2] memory
                     Source: "geneScience.clearWizzType(_genes)"
                    MemberAccess to member clearWizzType
                       Type: function (uint256[2] memory) external returns (uint256[2] memory)
                       Source: "geneScience.clearWizzType"
                      Identifier geneScience
                         Type: contract GeneScienceInterface
                         Source: "geneScience"
                    Identifier _genes
                       Type: uint256[2] memory
                       Source: "_genes"
              ExpressionStatement
                 Gas costs: 8
                 Source: "_tp = 0"
                Assignment using operator =
                   Type: uint256
                   Source: "_tp = 0"
                  Identifier _tp
                     Type: uint256
                     Source: "_tp"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
          IfStatement
             Source: "if (_tp == 1){\n                cooldownIndex = 5;\n            }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 9
               Source: "_tp == 1"
              Identifier _tp
                 Type: uint256
                 Source: "_tp"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
            Block
               Source: "{\n                cooldownIndex = 5;\n            }"
              ExpressionStatement
                 Gas costs: 8
                 Source: "cooldownIndex = 5"
                Assignment using operator =
                   Type: uint16
                   Source: "cooldownIndex = 5"
                  Identifier cooldownIndex
                     Type: uint16
                     Source: "cooldownIndex"
                  Literal, token: [no token] value: 5
                     Type: int_const 5
                     Source: "5"
          IfStatement
             Source: "if (_tp>0){\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 9
               Source: "_tp>0"
              Identifier _tp
                 Type: uint256
                 Source: "_tp"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\n                wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1;\n            }"
              ExpressionStatement
                 Gas costs: 20382
                 Source: "wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1"
                Assignment using operator =
                   Type: uint256
                   Source: "wizzPandaCount[_tp] = wizzPandaCount[_tp] + 1"
                  IndexAccess
                     Type: uint256
                     Source: "wizzPandaCount[_tp]"
                    Identifier wizzPandaCount
                       Type: mapping(uint256 => uint256)
                       Source: "wizzPandaCount"
                    Identifier _tp
                       Type: uint256
                       Source: "_tp"
                  BinaryOperation using operator +
                     Type: uint256
                     Source: "wizzPandaCount[_tp] + 1"
                    IndexAccess
                       Type: uint256
                       Source: "wizzPandaCount[_tp]"
                      Identifier wizzPandaCount
                         Type: mapping(uint256 => uint256)
                         Source: "wizzPandaCount"
                      Identifier _tp
                         Type: uint256
                         Source: "_tp"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
          IfStatement
             Source: "if (_generation <= 1 && _tp != 1){\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }"
            BinaryOperation using operator &&
               Type: bool
               Gas costs: 46
               Source: "_generation <= 1 && _tp != 1"
              BinaryOperation using operator <=
                 Type: bool
                 Source: "_generation <= 1"
                Identifier _generation
                   Type: uint256
                   Source: "_generation"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
              BinaryOperation using operator !=
                 Type: bool
                 Source: "_tp != 1"
                Identifier _tp
                   Type: uint256
                   Source: "_tp"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
            Block
               Source: "{\n                require(gen0CreatedCount<GEN0_TOTAL_COUNT);\n                gen0CreatedCount++;\n            }"
              ExpressionStatement
                 Gas costs: 232
                 Source: "require(gen0CreatedCount<GEN0_TOTAL_COUNT)"
                FunctionCall
                   Type: tuple()
                   Source: "require(gen0CreatedCount<GEN0_TOTAL_COUNT)"
                  Identifier require
                     Type: function (bool) pure
                     Source: "require"
                  BinaryOperation using operator <
                     Type: bool
                     Source: "gen0CreatedCount<GEN0_TOTAL_COUNT"
                    Identifier gen0CreatedCount
                       Type: uint256
                       Source: "gen0CreatedCount"
                    Identifier GEN0_TOTAL_COUNT
                       Type: uint256
                       Source: "GEN0_TOTAL_COUNT"
              ExpressionStatement
                 Gas costs: 20237
                 Source: "gen0CreatedCount++"
                UnaryOperation (postfix) ++
                   Type: uint256
                   Source: "gen0CreatedCount++"
                  Identifier gen0CreatedCount
                     Type: uint256
                     Source: "gen0CreatedCount"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "Panda memory _panda = Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        })"
        VariableDeclaration "_panda"
           Type: struct PandaBase.Panda memory
           Source: "Panda memory _panda"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        FunctionCall
           Type: struct PandaBase.Panda memory
           Source: "Panda({\n            genes: _genes,\n            birthTime: uint64(now),\n            cooldownEndBlock: 0,\n            matronId: uint32(_matronId),\n            sireId: uint32(_sireId),\n            siringWithId: 0,\n            cooldownIndex: cooldownIndex,\n            generation: uint16(_generation)\n        })"
          Identifier Panda
             Type: type(struct PandaBase.Panda storage pointer)
             Source: "Panda"
          Identifier _genes
             Type: uint256[2] memory
             Source: "_genes"
          FunctionCall
             Type: uint64
             Source: "uint64(now)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier now
               Type: uint256
               Source: "now"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          FunctionCall
             Type: uint32
             Source: "uint32(_matronId)"
            ElementaryTypeNameExpression uint32
               Type: type(uint32)
               Source: "uint32"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
          FunctionCall
             Type: uint32
             Source: "uint32(_sireId)"
            ElementaryTypeNameExpression uint32
               Type: type(uint32)
               Source: "uint32"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier cooldownIndex
             Type: uint16
             Source: "cooldownIndex"
          FunctionCall
             Type: uint16
             Source: "uint16(_generation)"
            ElementaryTypeNameExpression uint16
               Type: type(uint16)
               Source: "uint16"
            Identifier _generation
               Type: uint256
               Source: "_generation"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 newKittenId = pandas.push(_panda) - 1"
        VariableDeclaration "newKittenId"
           Type: uint256
           Source: "uint256 newKittenId"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "pandas.push(_panda) - 1"
          FunctionCall
             Type: uint256
             Source: "pandas.push(_panda)"
            MemberAccess to member push
               Type: function (struct PandaBase.Panda storage ref) returns (uint256)
               Source: "pandas.push"
              Identifier pandas
                 Type: struct PandaBase.Panda storage ref[] storage ref
                 Source: "pandas"
            Identifier _panda
               Type: struct PandaBase.Panda memory
               Source: "_panda"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Gas costs: 41
         Source: "require(newKittenId == uint256(uint32(newKittenId)))"
        FunctionCall
           Type: tuple()
           Source: "require(newKittenId == uint256(uint32(newKittenId)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "newKittenId == uint256(uint32(newKittenId))"
            Identifier newKittenId
               Type: uint256
               Source: "newKittenId"
            FunctionCall
               Type: uint256
               Source: "uint256(uint32(newKittenId))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint32
                 Source: "uint32(newKittenId)"
                ElementaryTypeNameExpression uint32
                   Type: type(uint32)
                   Source: "uint32"
                Identifier newKittenId
                   Type: uint256
                   Source: "newKittenId"
      ExpressionStatement
         Gas costs: [???]
         Source: "Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        )"
        FunctionCall
           Type: tuple()
           Source: "Birth(\n            _owner,\n            newKittenId,\n            uint256(_panda.matronId),\n            uint256(_panda.sireId),\n            _panda.genes\n        )"
          Identifier Birth
             Type: function (address,uint256,uint256,uint256,uint256[2] memory)
             Source: "Birth"
          Identifier _owner
             Type: address
             Source: "_owner"
          Identifier newKittenId
             Type: uint256
             Source: "newKittenId"
          FunctionCall
             Type: uint256
             Source: "uint256(_panda.matronId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member matronId
               Type: uint32
               Source: "_panda.matronId"
              Identifier _panda
                 Type: struct PandaBase.Panda memory
                 Source: "_panda"
          FunctionCall
             Type: uint256
             Source: "uint256(_panda.sireId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member sireId
               Type: uint32
               Source: "_panda.sireId"
              Identifier _panda
                 Type: struct PandaBase.Panda memory
                 Source: "_panda"
          MemberAccess to member genes
             Type: uint256[2] memory
             Source: "_panda.genes"
            Identifier _panda
               Type: struct PandaBase.Panda memory
               Source: "_panda"
      ExpressionStatement
         Gas costs: 24
         Source: "_transfer(0, _owner, newKittenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(0, _owner, newKittenId)"
          Identifier _transfer
             Type: function (address,address,uint256)
             Source: "_transfer"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier _owner
             Type: address
             Source: "_owner"
          Identifier newKittenId
             Type: uint256
             Source: "newKittenId"
      Return
         Gas costs: 8
         Source: "return newKittenId"
        Identifier newKittenId
           Type: uint256
           Source: "newKittenId"
  FunctionDefinition "setSecondsPerBlock" - public
     Source: "function setSecondsPerBlock(uint256 secs) external onlyCLevel {\n        require(secs < cooldowns[0]);\n        secondsPerBlock = secs;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 secs)"
      VariableDeclaration "secs"
         Type: uint256
         Source: "uint256 secs"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCLevel"
       Gas costs: 0
       Source: "onlyCLevel"
      Identifier onlyCLevel
         Type: modifier ()
         Source: "onlyCLevel"
    Block
       Source: "{\n        require(secs < cooldowns[0]);\n        secondsPerBlock = secs;\n    }"
      ExpressionStatement
         Gas costs: 1945
         Source: "require(secs < cooldowns[0])"
        FunctionCall
           Type: tuple()
           Source: "require(secs < cooldowns[0])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <
             Type: bool
             Source: "secs < cooldowns[0]"
            Identifier secs
               Type: uint256
               Source: "secs"
            IndexAccess
               Type: uint32
               Source: "cooldowns[0]"
              Identifier cooldowns
                 Type: uint32[9] storage ref
                 Source: "cooldowns"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 20014
         Source: "secondsPerBlock = secs"
        Assignment using operator =
           Type: uint256
           Source: "secondsPerBlock = secs"
          Identifier secondsPerBlock
             Type: uint256
             Source: "secondsPerBlock"
          Identifier secs
             Type: uint256
             Source: "secs"
ContractDefinition "ERC721Metadata"
   Source: "contract ERC721Metadata {\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }\n}"
  FunctionDefinition "getMetadata" - public - const
     Source: "function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId, string)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    ParameterList
       Gas costs: 0
       Source: "(bytes32[4] buffer, uint256 count)"
      VariableDeclaration "buffer"
         Type: bytes32[4] memory
         Source: "bytes32[4] buffer"
        ArrayTypeName
           Source: "bytes32[4]"
          ElementaryTypeName bytes32
             Source: "bytes32"
          Literal, token: [no token] value: 4
             Type unknown.
             Source: "4"
      VariableDeclaration "count"
         Type: uint256
         Source: "uint256 count"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }\n    }"
      IfStatement
         Source: "if (_tokenId == 1) {\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        } else if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "_tokenId == 1"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\n            buffer[0] = \"Hello World! :D\";\n            count = 15;\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "buffer[0] = \"Hello World! :D\""
            Assignment using operator =
               Type: bytes32
               Source: "buffer[0] = \"Hello World! :D\""
              IndexAccess
                 Type: bytes32
                 Source: "buffer[0]"
                Identifier buffer
                   Type: bytes32[4] memory
                   Source: "buffer"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
              Literal, token: [no token] value: Hello World! :D
                 Type: literal_string "Hello World! :D"
                 Source: "\"Hello World! :D\""
          ExpressionStatement
             Gas costs: 0
             Source: "count = 15"
            Assignment using operator =
               Type: uint256
               Source: "count = 15"
              Identifier count
                 Type: uint256
                 Source: "count"
              Literal, token: [no token] value: 15
                 Type: int_const 15
                 Source: "15"
        IfStatement
           Source: "if (_tokenId == 2) {\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        } else if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }"
          BinaryOperation using operator ==
             Type: bool
             Gas costs: 0
             Source: "_tokenId == 2"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
            Literal, token: [no token] value: 2
               Type: int_const 2
               Source: "2"
          Block
             Source: "{\n            buffer[0] = \"I would definitely choose a medi\";\n            buffer[1] = \"um length string.\";\n            count = 49;\n        }"
            ExpressionStatement
               Gas costs: 0
               Source: "buffer[0] = \"I would definitely choose a medi\""
              Assignment using operator =
                 Type: bytes32
                 Source: "buffer[0] = \"I would definitely choose a medi\""
                IndexAccess
                   Type: bytes32
                   Source: "buffer[0]"
                  Identifier buffer
                     Type: bytes32[4] memory
                     Source: "buffer"
                  Literal, token: [no token] value: 0
                     Type: int_const 0
                     Source: "0"
                Literal, token: [no token] value: I would definitely choose a medi
                   Type: literal_string "I would definitely choose a medi"
                   Source: "\"I would definitely choose a medi\""
            ExpressionStatement
               Gas costs: 0
               Source: "buffer[1] = \"um length string.\""
              Assignment using operator =
                 Type: bytes32
                 Source: "buffer[1] = \"um length string.\""
                IndexAccess
                   Type: bytes32
                   Source: "buffer[1]"
                  Identifier buffer
                     Type: bytes32[4] memory
                     Source: "buffer"
                  Literal, token: [no token] value: 1
                     Type: int_const 1
                     Source: "1"
                Literal, token: [no token] value: um length string.
                   Type: literal_string "um length string."
                   Source: "\"um length string.\""
            ExpressionStatement
               Gas costs: 0
               Source: "count = 49"
              Assignment using operator =
                 Type: uint256
                 Source: "count = 49"
                Identifier count
                   Type: uint256
                   Source: "count"
                Literal, token: [no token] value: 49
                   Type: int_const 49
                   Source: "49"
          IfStatement
             Source: "if (_tokenId == 3) {\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }"
            BinaryOperation using operator ==
               Type: bool
               Gas costs: 0
               Source: "_tokenId == 3"
              Identifier _tokenId
                 Type: uint256
                 Source: "_tokenId"
              Literal, token: [no token] value: 3
                 Type: int_const 3
                 Source: "3"
            Block
               Source: "{\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\n            buffer[2] = \" tristique vestibulum id, libero\";\n            buffer[3] = \" suscipit varius sapien aliquam.\";\n            count = 128;\n        }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "buffer[0] = \"Lorem ipsum dolor sit amet, mi e\""
                Assignment using operator =
                   Type: bytes32
                   Source: "buffer[0] = \"Lorem ipsum dolor sit amet, mi e\""
                  IndexAccess
                     Type: bytes32
                     Source: "buffer[0]"
                    Identifier buffer
                       Type: bytes32[4] memory
                       Source: "buffer"
                    Literal, token: [no token] value: 0
                       Type: int_const 0
                       Source: "0"
                  Literal, token: [no token] value: Lorem ipsum dolor sit amet, mi e
                     Type: literal_string "Lorem ipsum dolor sit amet, mi e"
                     Source: "\"Lorem ipsum dolor sit amet, mi e\""
              ExpressionStatement
                 Gas costs: 0
                 Source: "buffer[1] = \"st accumsan dapibus augue lorem,\""
                Assignment using operator =
                   Type: bytes32
                   Source: "buffer[1] = \"st accumsan dapibus augue lorem,\""
                  IndexAccess
                     Type: bytes32
                     Source: "buffer[1]"
                    Identifier buffer
                       Type: bytes32[4] memory
                       Source: "buffer"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
                  Literal, token: [no token] value: st accumsan dapibus augue lorem,
                     Type: literal_string "st accumsan dapibus augue lorem,"
                     Source: "\"st accumsan dapibus augue lorem,\""
              ExpressionStatement
                 Gas costs: 0
                 Source: "buffer[2] = \" tristique vestibulum id, libero\""
                Assignment using operator =
                   Type: bytes32
                   Source: "buffer[2] = \" tristique vestibulum id, libero\""
                  IndexAccess
                     Type: bytes32
                     Source: "buffer[2]"
                    Identifier buffer
                       Type: bytes32[4] memory
                       Source: "buffer"
                    Literal, token: [no token] value: 2
                       Type: int_const 2
                       Source: "2"
                  Literal, token: [no token] value:  tristique vestibulum id, libero
                     Type: literal_string " tristique vestibulum id, libero"
                     Source: "\" tristique vestibulum id, libero\""
              ExpressionStatement
                 Gas costs: 0
                 Source: "buffer[3] = \" suscipit varius sapien aliquam.\""
                Assignment using operator =
                   Type: bytes32
                   Source: "buffer[3] = \" suscipit varius sapien aliquam.\""
                  IndexAccess
                     Type: bytes32
                     Source: "buffer[3]"
                    Identifier buffer
                       Type: bytes32[4] memory
                       Source: "buffer"
                    Literal, token: [no token] value: 3
                       Type: int_const 3
                       Source: "3"
                  Literal, token: [no token] value:  suscipit varius sapien aliquam.
                     Type: literal_string " suscipit varius sapien aliquam."
                     Source: "\" suscipit varius sapien aliquam.\""
              ExpressionStatement
                 Gas costs: 0
                 Source: "count = 128"
                Assignment using operator =
                   Type: uint256
                   Source: "count = 128"
                  Identifier count
                     Type: uint256
                     Source: "count"
                  Literal, token: [no token] value: 128
                     Type: int_const 128
                     Source: "128"
ContractDefinition "PandaOwnership"
   Source: "contract PandaOwnership is PandaBase, ERC721 {\n\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant name = \"PandaEarth\";\n    string public constant symbol = \"PE\";\n\n    bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'));\n\n    bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\n\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n    ///  ERC-165 (obviously!) and ERC-721.\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }\n\n    // Internal utility functions: These functions all assume that their input arguments\n    // are valid. We leave it to public methods to sanitize their inputs and follow\n    // the required logic.\n\n    /// @dev Checks if a given address is the current owner of a particular Panda.\n    /// @param _claimant the address we are validating against.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /// @dev Checks if a given address currently has transferApproval for a particular Panda.\n    /// @param _claimant the address we are confirming kitten is approved for.\n    /// @param _tokenId kitten id, only valid when > 0\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToApproved[_tokenId] == _claimant;\n    }\n\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\n    ///  _approve() and transferFrom() are used together for putting Pandas on auction, and\n    ///  there is no value in spamming the log with Approval events in that case.\n    function _approve(uint256 _tokenId, address _approved) internal {\n        pandaIndexToApproved[_tokenId] = _approved;\n    }\n\n    /// @notice Returns the number of Pandas owned by a specific address.\n    /// @param _owner The owner address to check.\n    /// @dev Required for ERC-721 compliance\n    function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /// @notice Transfers a Panda to another address. If transferring to a smart\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n    ///  CryptoPandas specifically) or your Panda may be lost forever. Seriously.\n    /// @param _to The address of the recipient, can be a user or contract.\n    /// @param _tokenId The ID of the Panda to transfer.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of pandas\n        // through the allow + transferFrom flow.\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n\n        // You can only send your own cat.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Grant another address the right to transfer a specific Panda via\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Panda that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    /// @notice Transfer a Panda owned by another address, for which the calling address\n    ///  has previously been granted transfer approval by the owner.\n    /// @param _from The address that owns the Panda to be transfered.\n    /// @param _to The address that should take ownership of the Panda. Can be any address,\n    ///  including the caller.\n    /// @param _tokenId The ID of the Panda to be transferred.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @notice Returns the total number of Pandas currently in existence.\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint) {\n        return pandas.length - 1;\n    }\n\n    /// @notice Returns the address currently assigned ownership of a given Panda.\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId)\n        external\n        view\n        returns (address owner)\n    {\n        owner = pandaIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }\n\n    /// @notice Returns a list of all Panda IDs assigned to an address.\n    /// @param _owner The owner whose Pandas we are interested in.\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n    ///  expensive (it walks the entire Panda array looking for cats belonging to owner),\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n    ///  not contract-to-contract calls.\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }\n\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\n        // Copy word-length chunks while possible\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }\n\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)\n    ///  This method is licenced under the Apache License.\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n        var outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n\n        return outputString;\n    }\n\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "PandaBase"
    UserDefinedTypeName "PandaBase"
       Source: "PandaBase"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ERC721"
    UserDefinedTypeName "ERC721"
       Source: "ERC721"
  VariableDeclaration "name"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant name = \"PandaEarth\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: PandaEarth
       Type: literal_string "PandaEarth"
       Source: "\"PandaEarth\""
  VariableDeclaration "symbol"
     Type: string memory
     Gas costs: [???]
     Source: "string public constant symbol = \"PE\""
    ElementaryTypeName string
       Source: "string"
    Literal, token: [no token] value: PE
       Type: literal_string "PE"
       Source: "\"PE\""
  VariableDeclaration "InterfaceSignature_ERC165"
     Type: bytes4
     Gas costs: [???]
     Source: "bytes4 constant InterfaceSignature_ERC165 =\n        bytes4(keccak256('supportsInterface(bytes4)'))"
    ElementaryTypeName bytes4
       Source: "bytes4"
    FunctionCall
       Type: bytes4
       Source: "bytes4(keccak256('supportsInterface(bytes4)'))"
      ElementaryTypeNameExpression bytes4
         Type: type(bytes4)
         Source: "bytes4"
      FunctionCall
         Type: bytes32
         Source: "keccak256('supportsInterface(bytes4)')"
        Identifier keccak256
           Type: function () pure returns (bytes32)
           Source: "keccak256"
        Literal, token: [no token] value: supportsInterface(bytes4)
           Type: literal_string "supportsInterface(bytes4)"
           Source: "'supportsInterface(bytes4)'"
  VariableDeclaration "InterfaceSignature_ERC721"
     Type: bytes4
     Gas costs: [???]
     Source: "bytes4 constant InterfaceSignature_ERC721 =\n        bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'))"
    ElementaryTypeName bytes4
       Source: "bytes4"
    BinaryOperation using operator ^
       Type: bytes4
       Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)')) ^\n        bytes4(keccak256('tokenMetadata(uint256,string)'))"
      BinaryOperation using operator ^
         Type: bytes4
         Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n        bytes4(keccak256('tokensOfOwner(address)'))"
        BinaryOperation using operator ^
           Type: bytes4
           Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)')) ^\n        bytes4(keccak256('transferFrom(address,address,uint256)'))"
          BinaryOperation using operator ^
             Type: bytes4
             Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)')) ^\n        bytes4(keccak256('transfer(address,uint256)'))"
            BinaryOperation using operator ^
               Type: bytes4
               Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)')) ^\n        bytes4(keccak256('approve(address,uint256)'))"
              BinaryOperation using operator ^
                 Type: bytes4
                 Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)')) ^\n        bytes4(keccak256('ownerOf(uint256)'))"
                BinaryOperation using operator ^
                   Type: bytes4
                   Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()')) ^\n        bytes4(keccak256('balanceOf(address)'))"
                  BinaryOperation using operator ^
                     Type: bytes4
                     Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()')) ^\n        bytes4(keccak256('totalSupply()'))"
                    BinaryOperation using operator ^
                       Type: bytes4
                       Source: "bytes4(keccak256('name()')) ^\n        bytes4(keccak256('symbol()'))"
                      FunctionCall
                         Type: bytes4
                         Source: "bytes4(keccak256('name()'))"
                        ElementaryTypeNameExpression bytes4
                           Type: type(bytes4)
                           Source: "bytes4"
                        FunctionCall
                           Type: bytes32
                           Source: "keccak256('name()')"
                          Identifier keccak256
                             Type: function () pure returns (bytes32)
                             Source: "keccak256"
                          Literal, token: [no token] value: name()
                             Type: literal_string "name()"
                             Source: "'name()'"
                      FunctionCall
                         Type: bytes4
                         Source: "bytes4(keccak256('symbol()'))"
                        ElementaryTypeNameExpression bytes4
                           Type: type(bytes4)
                           Source: "bytes4"
                        FunctionCall
                           Type: bytes32
                           Source: "keccak256('symbol()')"
                          Identifier keccak256
                             Type: function () pure returns (bytes32)
                             Source: "keccak256"
                          Literal, token: [no token] value: symbol()
                             Type: literal_string "symbol()"
                             Source: "'symbol()'"
                    FunctionCall
                       Type: bytes4
                       Source: "bytes4(keccak256('totalSupply()'))"
                      ElementaryTypeNameExpression bytes4
                         Type: type(bytes4)
                         Source: "bytes4"
                      FunctionCall
                         Type: bytes32
                         Source: "keccak256('totalSupply()')"
                        Identifier keccak256
                           Type: function () pure returns (bytes32)
                           Source: "keccak256"
                        Literal, token: [no token] value: totalSupply()
                           Type: literal_string "totalSupply()"
                           Source: "'totalSupply()'"
                  FunctionCall
                     Type: bytes4
                     Source: "bytes4(keccak256('balanceOf(address)'))"
                    ElementaryTypeNameExpression bytes4
                       Type: type(bytes4)
                       Source: "bytes4"
                    FunctionCall
                       Type: bytes32
                       Source: "keccak256('balanceOf(address)')"
                      Identifier keccak256
                         Type: function () pure returns (bytes32)
                         Source: "keccak256"
                      Literal, token: [no token] value: balanceOf(address)
                         Type: literal_string "balanceOf(address)"
                         Source: "'balanceOf(address)'"
                FunctionCall
                   Type: bytes4
                   Source: "bytes4(keccak256('ownerOf(uint256)'))"
                  ElementaryTypeNameExpression bytes4
                     Type: type(bytes4)
                     Source: "bytes4"
                  FunctionCall
                     Type: bytes32
                     Source: "keccak256('ownerOf(uint256)')"
                    Identifier keccak256
                       Type: function () pure returns (bytes32)
                       Source: "keccak256"
                    Literal, token: [no token] value: ownerOf(uint256)
                       Type: literal_string "ownerOf(uint256)"
                       Source: "'ownerOf(uint256)'"
              FunctionCall
                 Type: bytes4
                 Source: "bytes4(keccak256('approve(address,uint256)'))"
                ElementaryTypeNameExpression bytes4
                   Type: type(bytes4)
                   Source: "bytes4"
                FunctionCall
                   Type: bytes32
                   Source: "keccak256('approve(address,uint256)')"
                  Identifier keccak256
                     Type: function () pure returns (bytes32)
                     Source: "keccak256"
                  Literal, token: [no token] value: approve(address,uint256)
                     Type: literal_string "approve(address,uint256)"
                     Source: "'approve(address,uint256)'"
            FunctionCall
               Type: bytes4
               Source: "bytes4(keccak256('transfer(address,uint256)'))"
              ElementaryTypeNameExpression bytes4
                 Type: type(bytes4)
                 Source: "bytes4"
              FunctionCall
                 Type: bytes32
                 Source: "keccak256('transfer(address,uint256)')"
                Identifier keccak256
                   Type: function () pure returns (bytes32)
                   Source: "keccak256"
                Literal, token: [no token] value: transfer(address,uint256)
                   Type: literal_string "transfer(address,uint256)"
                   Source: "'transfer(address,uint256)'"
          FunctionCall
             Type: bytes4
             Source: "bytes4(keccak256('transferFrom(address,address,uint256)'))"
            ElementaryTypeNameExpression bytes4
               Type: type(bytes4)
               Source: "bytes4"
            FunctionCall
               Type: bytes32
               Source: "keccak256('transferFrom(address,address,uint256)')"
              Identifier keccak256
                 Type: function () pure returns (bytes32)
                 Source: "keccak256"
              Literal, token: [no token] value: transferFrom(address,address,uint256)
                 Type: literal_string "transferFrom(address,address,uint256)"
                 Source: "'transferFrom(address,address,uint256)'"
        FunctionCall
           Type: bytes4
           Source: "bytes4(keccak256('tokensOfOwner(address)'))"
          ElementaryTypeNameExpression bytes4
             Type: type(bytes4)
             Source: "bytes4"
          FunctionCall
             Type: bytes32
             Source: "keccak256('tokensOfOwner(address)')"
            Identifier keccak256
               Type: function () pure returns (bytes32)
               Source: "keccak256"
            Literal, token: [no token] value: tokensOfOwner(address)
               Type: literal_string "tokensOfOwner(address)"
               Source: "'tokensOfOwner(address)'"
      FunctionCall
         Type: bytes4
         Source: "bytes4(keccak256('tokenMetadata(uint256,string)'))"
        ElementaryTypeNameExpression bytes4
           Type: type(bytes4)
           Source: "bytes4"
        FunctionCall
           Type: bytes32
           Source: "keccak256('tokenMetadata(uint256,string)')"
          Identifier keccak256
             Type: function () pure returns (bytes32)
             Source: "keccak256"
          Literal, token: [no token] value: tokenMetadata(uint256,string)
             Type: literal_string "tokenMetadata(uint256,string)"
             Source: "'tokenMetadata(uint256,string)'"
  FunctionDefinition "supportsInterface" - public - const
     Source: "function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n    {\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes4 _interfaceID)"
      VariableDeclaration "_interfaceID"
         Type: bytes4
         Source: "bytes4 _interfaceID"
        ElementaryTypeName bytes4
           Source: "bytes4"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        // DEBUG ONLY\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\n\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n    }"
      Return
         Gas costs: 72
         Source: "return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))"
        TupleExpression
           Type: bool
           Source: "((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721))"
          BinaryOperation using operator ||
             Type: bool
             Source: "(_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721)"
            TupleExpression
               Type: bool
               Source: "(_interfaceID == InterfaceSignature_ERC165)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "_interfaceID == InterfaceSignature_ERC165"
                Identifier _interfaceID
                   Type: bytes4
                   Source: "_interfaceID"
                Identifier InterfaceSignature_ERC165
                   Type: bytes4
                   Source: "InterfaceSignature_ERC165"
            TupleExpression
               Type: bool
               Source: "(_interfaceID == InterfaceSignature_ERC721)"
              BinaryOperation using operator ==
                 Type: bool
                 Source: "_interfaceID == InterfaceSignature_ERC721"
                Identifier _interfaceID
                   Type: bytes4
                   Source: "_interfaceID"
                Identifier InterfaceSignature_ERC721
                   Type: bytes4
                   Source: "InterfaceSignature_ERC721"
  FunctionDefinition "_owns" - const
     Source: "function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToOwner[_tokenId] == _claimant;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _claimant, uint256 _tokenId)"
      VariableDeclaration "_claimant"
         Type: address
         Source: "address _claimant"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        return pandaIndexToOwner[_tokenId] == _claimant;\n    }"
      Return
         Gas costs: 346
         Source: "return pandaIndexToOwner[_tokenId] == _claimant"
        BinaryOperation using operator ==
           Type: bool
           Source: "pandaIndexToOwner[_tokenId] == _claimant"
          IndexAccess
             Type: address
             Source: "pandaIndexToOwner[_tokenId]"
            Identifier pandaIndexToOwner
               Type: mapping(uint256 => address)
               Source: "pandaIndexToOwner"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _claimant
             Type: address
             Source: "_claimant"
  FunctionDefinition "_approvedFor" - const
     Source: "function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return pandaIndexToApproved[_tokenId] == _claimant;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _claimant, uint256 _tokenId)"
      VariableDeclaration "_claimant"
         Type: address
         Source: "address _claimant"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        return pandaIndexToApproved[_tokenId] == _claimant;\n    }"
      Return
         Gas costs: 346
         Source: "return pandaIndexToApproved[_tokenId] == _claimant"
        BinaryOperation using operator ==
           Type: bool
           Source: "pandaIndexToApproved[_tokenId] == _claimant"
          IndexAccess
             Type: address
             Source: "pandaIndexToApproved[_tokenId]"
            Identifier pandaIndexToApproved
               Type: mapping(uint256 => address)
               Source: "pandaIndexToApproved"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _claimant
             Type: address
             Source: "_claimant"
  FunctionDefinition "_approve"
     Source: "function _approve(uint256 _tokenId, address _approved) internal {\n        pandaIndexToApproved[_tokenId] = _approved;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId, address _approved)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_approved"
         Type: address
         Source: "address _approved"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        pandaIndexToApproved[_tokenId] = _approved;\n    }"
      ExpressionStatement
         Gas costs: 20351
         Source: "pandaIndexToApproved[_tokenId] = _approved"
        Assignment using operator =
           Type: address
           Source: "pandaIndexToApproved[_tokenId] = _approved"
          IndexAccess
             Type: address
             Source: "pandaIndexToApproved[_tokenId]"
            Identifier pandaIndexToApproved
               Type: mapping(uint256 => address)
               Source: "pandaIndexToApproved"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _approved
             Type: address
             Source: "_approved"
  FunctionDefinition "balanceOf" - public - const
     Source: "function balanceOf(address _owner) public view returns (uint256 count) {\n        return ownershipTokenCount[_owner];\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256 count)"
      VariableDeclaration "count"
         Type: uint256
         Source: "uint256 count"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        return ownershipTokenCount[_owner];\n    }"
      Return
         Gas costs: 304
         Source: "return ownershipTokenCount[_owner]"
        IndexAccess
           Type: uint256
           Source: "ownershipTokenCount[_owner]"
          Identifier ownershipTokenCount
             Type: mapping(address => uint256)
             Source: "ownershipTokenCount"
          Identifier _owner
             Type: address
             Source: "_owner"
  FunctionDefinition "transfer" - public
     Source: "function transfer(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of pandas\n        // through the allow + transferFrom flow.\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n\n        // You can only send your own cat.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        address _to,\n        uint256 _tokenId\n    )"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Disallow transfers to the auction contracts to prevent accidental\n        // misuse. Auction contracts should only take ownership of pandas\n        // through the allow + transferFrom flow.\n        require(_to != address(saleAuction));\n        require(_to != address(siringAuction));\n\n        // You can only send your own cat.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 49
         Source: "require(_to != address(this))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(this))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(this)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract PandaOwnership
                 Source: "this"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_to != address(saleAuction))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(saleAuction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(saleAuction)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(saleAuction)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier saleAuction
                 Type: contract SaleClockAuction
                 Source: "saleAuction"
      ExpressionStatement
         Gas costs: 286
         Source: "require(_to != address(siringAuction))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(siringAuction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(siringAuction)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(siringAuction)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier siringAuction
                 Type: contract SiringClockAuction
                 Source: "siringAuction"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _tokenId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _tokenId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _tokenId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 23
         Source: "_transfer(msg.sender, _to, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(msg.sender, _to, _tokenId)"
          Identifier _transfer
             Type: function (address,address,uint256)
             Source: "_transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "approve" - public
     Source: "function approve(\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        address _to,\n        uint256 _tokenId\n    )"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Only an owner can grant transfer approval.\n        require(_owns(msg.sender, _tokenId));\n\n        // Register the approval (replacing any previous approval).\n        _approve(_tokenId, _to);\n\n        // Emit approval event.\n        Approval(msg.sender, _to, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_owns(msg.sender, _tokenId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _tokenId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _tokenId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 10
         Source: "_approve(_tokenId, _to)"
        FunctionCall
           Type: tuple()
           Source: "_approve(_tokenId, _to)"
          Identifier _approve
             Type: function (uint256,address)
             Source: "_approve"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier _to
             Type: address
             Source: "_to"
      ExpressionStatement
         Gas costs: [???]
         Source: "Approval(msg.sender, _to, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "Approval(msg.sender, _to, _tokenId)"
          Identifier Approval
             Type: function (address,address,uint256)
             Source: "Approval"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "transferFrom" - public
     Source: "function transferFrom(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )\n        external\n        whenNotPaused\n    {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        address _from,\n        address _to,\n        uint256 _tokenId\n    )"
      VariableDeclaration "_from"
         Type: address
         Source: "address _from"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n        // Disallow transfers to this contract to prevent accidental misuse.\n        // The contract should never own any pandas (except very briefly\n        // after a gen0 cat is created and before it goes on auction).\n        require(_to != address(this));\n        // Check for approval and valid ownership\n        require(_approvedFor(msg.sender, _tokenId));\n        require(_owns(_from, _tokenId));\n\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\n        _transfer(_from, _to, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 50
         Source: "require(_to != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(0)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 49
         Source: "require(_to != address(this))"
        FunctionCall
           Type: tuple()
           Source: "require(_to != address(this))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_to != address(this)"
            Identifier _to
               Type: address
               Source: "_to"
            FunctionCall
               Type: address
               Source: "address(this)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier this
                 Type: contract PandaOwnership
                 Source: "this"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_approvedFor(msg.sender, _tokenId))"
        FunctionCall
           Type: tuple()
           Source: "require(_approvedFor(msg.sender, _tokenId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_approvedFor(msg.sender, _tokenId)"
            Identifier _approvedFor
               Type: function (address,uint256) view returns (bool)
               Source: "_approvedFor"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 47
         Source: "require(_owns(_from, _tokenId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(_from, _tokenId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(_from, _tokenId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            Identifier _from
               Type: address
               Source: "_from"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 13
         Source: "_transfer(_from, _to, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(_from, _to, _tokenId)"
          Identifier _transfer
             Type: function (address,address,uint256)
             Source: "_transfer"
          Identifier _from
             Type: address
             Source: "_from"
          Identifier _to
             Type: address
             Source: "_to"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "totalSupply" - public - const
     Source: "function totalSupply() public view returns (uint) {\n        return pandas.length - 1;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint"
        ElementaryTypeName uint
           Source: "uint"
    Block
       Source: "{\n        return pandas.length - 1;\n    }"
      Return
         Gas costs: 222
         Source: "return pandas.length - 1"
        BinaryOperation using operator -
           Type: uint256
           Source: "pandas.length - 1"
          MemberAccess to member length
             Type: uint256
             Source: "pandas.length"
            Identifier pandas
               Type: struct PandaBase.Panda storage ref[] storage ref
               Source: "pandas"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "ownerOf" - public - const
     Source: "function ownerOf(uint256 _tokenId)\n        external\n        view\n        returns (address owner)\n    {\n        owner = pandaIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(address owner)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
    Block
       Source: "{\n        owner = pandaIndexToOwner[_tokenId];\n\n        require(owner != address(0));\n    }"
      ExpressionStatement
         Gas costs: 328
         Source: "owner = pandaIndexToOwner[_tokenId]"
        Assignment using operator =
           Type: address
           Source: "owner = pandaIndexToOwner[_tokenId]"
          Identifier owner
             Type: address
             Source: "owner"
          IndexAccess
             Type: address
             Source: "pandaIndexToOwner[_tokenId]"
            Identifier pandaIndexToOwner
               Type: mapping(uint256 => address)
               Source: "pandaIndexToOwner"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 50
         Source: "require(owner != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(owner != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "owner != address(0)"
            Identifier owner
               Type: address
               Source: "owner"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
  FunctionDefinition "tokensOfOwner" - public - const
     Source: "function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 3
       Source: "(uint256[] ownerTokens)"
      VariableDeclaration "ownerTokens"
         Type: uint256[] memory
         Source: "uint256[] ownerTokens"
        ArrayTypeName
           Source: "uint256[]"
          ElementaryTypeName uint256
             Source: "uint256"
    Block
       Source: "{\n        uint256 tokenCount = balanceOf(_owner);\n\n        if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }\n    }"
      VariableDeclarationStatement
         Gas costs: 26
         Source: "uint256 tokenCount = balanceOf(_owner)"
        VariableDeclaration "tokenCount"
           Type: uint256
           Source: "uint256 tokenCount"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "balanceOf(_owner)"
          Identifier balanceOf
             Type: function (address) view returns (uint256)
             Source: "balanceOf"
          Identifier _owner
             Type: address
             Source: "_owner"
      IfStatement
         Source: "if (tokenCount == 0) {\n            // Return an empty array\n            return new uint256[](0);\n        } else {\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "tokenCount == 0"
          Identifier tokenCount
             Type: uint256
             Source: "tokenCount"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            // Return an empty array\n            return new uint256[](0);\n        }"
          Return
             Gas costs: [???]
             Source: "return new uint256[](0)"
            FunctionCall
               Type: uint256[] memory
               Source: "new uint256[](0)"
              NewExpression
                 Type: function (uint256) pure returns (uint256[] memory)
                 Source: "new uint256[]"
                ArrayTypeName
                   Source: "uint256[]"
                  ElementaryTypeName uint256
                     Source: "uint256"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
        Block
           Source: "{\n            uint256[] memory result = new uint256[](tokenCount);\n            uint256 totalCats = totalSupply();\n            uint256 resultIndex = 0;\n\n            // We count on the fact that all cats have IDs starting at 1 and increasing\n            // sequentially up to the totalCat count.\n            uint256 catId;\n\n            for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }\n\n            return result;\n        }"
          VariableDeclarationStatement
             Gas costs: [???]
             Source: "uint256[] memory result = new uint256[](tokenCount)"
            VariableDeclaration "result"
               Type: uint256[] memory
               Source: "uint256[] memory result"
              ArrayTypeName
                 Source: "uint256[]"
                ElementaryTypeName uint256
                   Source: "uint256"
            FunctionCall
               Type: uint256[] memory
               Source: "new uint256[](tokenCount)"
              NewExpression
                 Type: function (uint256) pure returns (uint256[] memory)
                 Source: "new uint256[]"
                ArrayTypeName
                   Source: "uint256[]"
                  ElementaryTypeName uint256
                     Source: "uint256"
              Identifier tokenCount
                 Type: uint256
                 Source: "tokenCount"
          VariableDeclarationStatement
             Gas costs: 23
             Source: "uint256 totalCats = totalSupply()"
            VariableDeclaration "totalCats"
               Type: uint256
               Source: "uint256 totalCats"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "totalSupply()"
              Identifier totalSupply
                 Type: function () view returns (uint256)
                 Source: "totalSupply"
          VariableDeclarationStatement
             Gas costs: 11
             Source: "uint256 resultIndex = 0"
            VariableDeclaration "resultIndex"
               Type: uint256
               Source: "uint256 resultIndex"
              ElementaryTypeName uint256
                 Source: "uint256"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          VariableDeclarationStatement
             Gas costs: 3
             Source: "uint256 catId"
            VariableDeclaration "catId"
               Type: uint256
               Source: "uint256 catId"
              ElementaryTypeName uint256
                 Source: "uint256"
          ForStatement
             Source: "for (catId = 1; catId <= totalCats; catId++) {\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }"
            ExpressionStatement
               Gas costs: 8
               Source: "catId = 1"
              Assignment using operator =
                 Type: uint256
                 Source: "catId = 1"
                Identifier catId
                   Type: uint256
                   Source: "catId"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
            BinaryOperation using operator <=
               Type: bool
               Gas costs: 12
               Source: "catId <= totalCats"
              Identifier catId
                 Type: uint256
                 Source: "catId"
              Identifier totalCats
                 Type: uint256
                 Source: "totalCats"
            ExpressionStatement
               Gas costs: 19
               Source: "catId++"
              UnaryOperation (postfix) ++
                 Type: uint256
                 Source: "catId++"
                Identifier catId
                   Type: uint256
                   Source: "catId"
            Block
               Source: "{\n                if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }\n            }"
              IfStatement
                 Source: "if (pandaIndexToOwner[catId] == _owner) {\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }"
                BinaryOperation using operator ==
                   Type: bool
                   Gas costs: 341
                   Source: "pandaIndexToOwner[catId] == _owner"
                  IndexAccess
                     Type: address
                     Source: "pandaIndexToOwner[catId]"
                    Identifier pandaIndexToOwner
                       Type: mapping(uint256 => address)
                       Source: "pandaIndexToOwner"
                    Identifier catId
                       Type: uint256
                       Source: "catId"
                  Identifier _owner
                     Type: address
                     Source: "_owner"
                Block
                   Source: "{\n                    result[resultIndex] = catId;\n                    resultIndex++;\n                }"
                  ExpressionStatement
                     Gas costs: [???]
                     Source: "result[resultIndex] = catId"
                    Assignment using operator =
                       Type: uint256
                       Source: "result[resultIndex] = catId"
                      IndexAccess
                         Type: uint256
                         Source: "result[resultIndex]"
                        Identifier result
                           Type: uint256[] memory
                           Source: "result"
                        Identifier resultIndex
                           Type: uint256
                           Source: "resultIndex"
                      Identifier catId
                         Type: uint256
                         Source: "catId"
                  ExpressionStatement
                     Gas costs: 19
                     Source: "resultIndex++"
                    UnaryOperation (postfix) ++
                       Type: uint256
                       Source: "resultIndex++"
                      Identifier resultIndex
                         Type: uint256
                         Source: "resultIndex"
          Return
             Gas costs: 8
             Source: "return result"
            Identifier result
               Type: uint256[] memory
               Source: "result"
  FunctionDefinition "_memcpy" - const
     Source: "function _memcpy(uint _dest, uint _src, uint _len) private view {\n        // Copy word-length chunks while possible\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint _dest, uint _src, uint _len)"
      VariableDeclaration "_dest"
         Type: uint256
         Source: "uint _dest"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_src"
         Type: uint256
         Source: "uint _src"
        ElementaryTypeName uint
           Source: "uint"
      VariableDeclaration "_len"
         Type: uint256
         Source: "uint _len"
        ElementaryTypeName uint
           Source: "uint"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Copy word-length chunks while possible\n        for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = 256 ** (32 - _len) - 1;\n        assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }"
      ForStatement
         Source: "for(; _len >= 32; _len -= 32) {\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 0
           Source: "_len >= 32"
          Identifier _len
             Type: uint256
             Source: "_len"
          Literal, token: [no token] value: 32
             Type: int_const 32
             Source: "32"
        ExpressionStatement
           Gas costs: 0
           Source: "_len -= 32"
          Assignment using operator -=
             Type: uint256
             Source: "_len -= 32"
            Identifier _len
               Type: uint256
               Source: "_len"
            Literal, token: [no token] value: 32
               Type: int_const 32
               Source: "32"
        Block
           Source: "{\n            assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest += 32;\n            _src += 32;\n        }"
          InlineAssembly
             Gas costs: 0
             Source: "assembly {\n                mstore(_dest, mload(_src))\n            }\n            _dest"
          ExpressionStatement
             Gas costs: 0
             Source: "_dest += 32"
            Assignment using operator +=
               Type: uint256
               Source: "_dest += 32"
              Identifier _dest
                 Type: uint256
                 Source: "_dest"
              Literal, token: [no token] value: 32
                 Type: int_const 32
                 Source: "32"
          ExpressionStatement
             Gas costs: 0
             Source: "_src += 32"
            Assignment using operator +=
               Type: uint256
               Source: "_src += 32"
              Identifier _src
                 Type: uint256
                 Source: "_src"
              Literal, token: [no token] value: 32
                 Type: int_const 32
                 Source: "32"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 mask = 256 ** (32 - _len) - 1"
        VariableDeclaration "mask"
           Type: uint256
           Source: "uint256 mask"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "256 ** (32 - _len) - 1"
          BinaryOperation using operator **
             Type: uint256
             Source: "256 ** (32 - _len)"
            Literal, token: [no token] value: 256
               Type: int_const 256
               Source: "256"
            TupleExpression
               Type: uint256
               Source: "(32 - _len)"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "32 - _len"
                Literal, token: [no token] value: 32
                   Type: int_const 32
                   Source: "32"
                Identifier _len
                   Type: uint256
                   Source: "_len"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      InlineAssembly
         Gas costs: 0
         Source: "assembly {\n            let srcpart := and(mload(_src), not(mask))\n            let destpart := and(mload(_dest), mask)\n            mstore(_dest, or(destpart, srcpart))\n        }\n    }"
  FunctionDefinition "_toString" - const
     Source: "function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\n        var outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n\n        return outputString;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(bytes32[4] _rawBytes, uint256 _stringLength)"
      VariableDeclaration "_rawBytes"
         Type: bytes32[4] memory
         Source: "bytes32[4] _rawBytes"
        ArrayTypeName
           Source: "bytes32[4]"
          ElementaryTypeName bytes32
             Source: "bytes32"
          Literal, token: [no token] value: 4
             Type unknown.
             Source: "4"
      VariableDeclaration "_stringLength"
         Type: uint256
         Source: "uint256 _stringLength"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(string)"
      VariableDeclaration ""
         Type: string memory
         Source: "string"
        ElementaryTypeName string
           Source: "string"
    Block
       Source: "{\n        var outputString = new string(_stringLength);\n        uint256 outputPtr;\n        uint256 bytesPtr;\n\n        assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy(outputPtr, bytesPtr, _stringLength);\n\n        return outputString;\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "var outputString = new string(_stringLength)"
        VariableDeclaration "outputString"
           Type: string memory
           Source: "var outputString"
        FunctionCall
           Type: string memory
           Source: "new string(_stringLength)"
          NewExpression
             Type: function (uint256) pure returns (string memory)
             Source: "new string"
            ElementaryTypeName string
               Source: "string"
          Identifier _stringLength
             Type: uint256
             Source: "_stringLength"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 outputPtr"
        VariableDeclaration "outputPtr"
           Type: uint256
           Source: "uint256 outputPtr"
          ElementaryTypeName uint256
             Source: "uint256"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 bytesPtr"
        VariableDeclaration "bytesPtr"
           Type: uint256
           Source: "uint256 bytesPtr"
          ElementaryTypeName uint256
             Source: "uint256"
      InlineAssembly
         Gas costs: 0
         Source: "assembly {\n            outputPtr := add(outputString, 32)\n            bytesPtr := _rawBytes\n        }\n\n        _memcpy"
      ExpressionStatement
         Gas costs: 0
         Source: "_memcpy(outputPtr, bytesPtr, _stringLength)"
        FunctionCall
           Type: tuple()
           Source: "_memcpy(outputPtr, bytesPtr, _stringLength)"
          Identifier _memcpy
             Type: function (uint256,uint256,uint256) view
             Source: "_memcpy"
          Identifier outputPtr
             Type: uint256
             Source: "outputPtr"
          Identifier bytesPtr
             Type: uint256
             Source: "bytesPtr"
          Identifier _stringLength
             Type: uint256
             Source: "_stringLength"
      Return
         Gas costs: 0
         Source: "return outputString"
        Identifier outputString
           Type: string memory
           Source: "outputString"
ContractDefinition "PandaBreeding"
   Source: "contract PandaBreeding is PandaOwnership {\n\n    uint256 public constant GENSIS_TOTAL_COUNT = 100;\n\n    /// @dev The Pregnant event is fired when two cats successfully breed and the pregnancy\n    ///  timer begins for the matron.\n    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);\n    /// @dev The Abortion event is fired when two cats breed failed.\n    event Abortion(address owner, uint256 matronId, uint256 sireId);\n\n    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards\n    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by\n    ///  the COO role as the gas price changes.\n    uint256 public autoBirthFee = 2 finney;\n\n    // Keeps track of number of pregnant pandas.\n    uint256 public pregnantPandas;\n\n    mapping(uint256 => address) childOwner;\n\n\n    /// @dev Update the address of the genetic contract, can only be called by the CEO.\n    /// @param _address An address of a GeneScience contract instance to be used from this point forward.\n    function setGeneScienceAddress(address _address) external onlyCEO {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isGeneScience());\n\n        // Set the new contract address\n        geneScience = candidateContract;\n    }\n\n    /// @dev Checks that a given kitten is able to breed. Requires that the\n    ///  current cooldown is finished (for sires) and also checks that there is\n    ///  no pending pregnancy.\n    function _isReadyToBreed(Panda _kit) internal view returns(bool) {\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\n        // the cat has a pending birth; there can be some period of time between the end\n        // of the pregnacy timer and the birth event.\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n    }\n\n    /// @dev Check if a sire has authorized breeding with this matron. True if both sire\n    ///  and matron have the same owner, or if the sire has given siring permission to\n    ///  the matron's owner (via approveSiring()).\n    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns(bool) {\n        address matronOwner = pandaIndexToOwner[_matronId];\n        address sireOwner = pandaIndexToOwner[_sireId];\n\n        // Siring is okay if they have same owner, or if the matron's owner was given\n        // permission to breed with this sire.\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }\n\n    /// @dev Set the cooldownEndTime for the given Panda, based on its current cooldownIndex.\n    ///  Also increments the cooldownIndex (unless it has hit the cap).\n    /// @param _kitten A reference to the Panda in storage which needs its timer started.\n    function _triggerCooldown(Panda storage _kitten) internal {\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number);\n\n\n        // Increment the breeding count, clamping it at 13, which is the length of the\n        // cooldowns array. We could check the array size dynamically, but hard-coding\n        // this as a constant saves gas. Yay, Solidity!\n        if (_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1) {\n            _kitten.cooldownIndex += 1;\n        }\n    }\n\n    /// @notice Grants approval to another user to sire with one of your Pandas.\n    /// @param _addr The address that will be able to sire with your Panda. Set to\n    ///  address(0) to clear all siring approvals for this Panda.\n    /// @param _sireId A Panda that you own that _addr will now be able to sire with.\n    function approveSiring(address _addr, uint256 _sireId)\n    external\n    whenNotPaused {\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }\n\n    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only\n    ///  be called by the COO address. (This fee is used to offset the gas cost incurred\n    ///  by the autobirth daemon).\n    function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }\n\n    /// @dev Checks to see if a given Panda is pregnant and (if so) if the gestation\n    ///  period has passed.\n    function _isReadyToGiveBirth(Panda _matron) private view returns(bool) {\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }\n\n    /// @notice Checks that a given kitten is able to breed (i.e. it is not pregnant or\n    ///  in the middle of a siring cooldown).\n    /// @param _pandaId reference the id of the kitten, any user can inquire about it\n    function isReadyToBreed(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        Panda storage kit = pandas[_pandaId];\n        return _isReadyToBreed(kit);\n    }\n\n    /// @dev Checks whether a panda is currently pregnant.\n    /// @param _pandaId reference the id of the kitten, any user can inquire about it\n    function isPregnant(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        // A panda is pregnant if and only if this field is set\n        return pandas[_pandaId].siringWithId != 0;\n    }\n\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT\n    ///  check ownership permissions (that is up to the caller).\n    /// @param _matron A reference to the Panda struct of the potential matron.\n    /// @param _matronId The matron's ID.\n    /// @param _sire A reference to the Panda struct of the potential sire.\n    /// @param _sireId The sire's ID\n    function _isValidMatingPair(\n        Panda storage _matron,\n        uint256 _matronId,\n        Panda storage _sire,\n        uint256 _sireId\n    )\n    private\n    view\n    returns(bool) {\n        // A Panda can't breed with itself!\n        if (_matronId == _sireId) {\n            return false;\n        }\n\n        // Pandas can't breed with their parents.\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n\n        // We can short circuit the sibling check (below) if either cat is\n        // gen zero (has a matron ID of zero).\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n\n        // Pandas can't breed with full or half siblings.\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n\n        // male should get breed with female\n        if (geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1) {\n            return false;\n        }\n\n        // Everything seems cool! Let's get DTF.\n        return true;\n    }\n\n    /// @dev Internal check to see if a given sire and matron are a valid mating pair for\n    ///  breeding via auction (i.e. skips ownership and siring approval checks).\n    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n    internal\n    view\n    returns(bool) {\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }\n\n    /// @notice Checks to see if two cats can breed together, including checks for\n    ///  ownership and siring approvals. Does NOT check that both cats are ready for\n    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).\n    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?\n    /// @param _matronId The ID of the proposed matron.\n    /// @param _sireId The ID of the proposed sire.\n    function canBreedWith(uint256 _matronId, uint256 _sireId)\n    external\n    view\n    returns(bool) {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }\n\n    function _exchangeMatronSireId(uint256 _matronId, uint256 _sireId) internal returns(uint256, uint256) {\n        if (geneScience.getSex(pandas[_matronId].genes) == 1) {\n            return (_sireId, _matronId);\n        } else {\n            return (_matronId, _sireId);\n        }\n    }\n\n    /// @dev Internal utility function to initiate breeding, assumes that all breeding\n    ///  requirements have been checked.\n    function _breedWith(uint256 _matronId, uint256 _sireId, address _owner) internal {\n        // make id point real gender\n        (_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId);\n        // Grab a reference to the Pandas from storage.\n        Panda storage sire = pandas[_sireId];\n        Panda storage matron = pandas[_matronId];\n\n        // Mark the matron as pregnant, keeping track of who the sire is.\n        matron.siringWithId = uint32(_sireId);\n\n        // Trigger the cooldown for both parents.\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n\n        // Clear siring permission for both parents. This may not be strictly necessary\n        // but it's likely to avoid confusion!\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n\n        // Every time a panda gets pregnant, counter is incremented.\n        pregnantPandas++;\n\n        childOwner[_matronId] = _owner;\n\n        // Emit the pregnancy event.\n        Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n    }\n\n    /// @notice Breed a Panda you own (as matron) with a sire that you own, or for which you\n    ///  have previously been given Siring approval. Will either make your cat pregnant, or will\n    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()\n    /// @param _matronId The ID of the Panda acting as matron (will end up pregnant if successful)\n    /// @param _sireId The ID of the Panda acting as sire (will begin its siring cooldown if successful)\n    function breedWithAuto(uint256 _matronId, uint256 _sireId)\n    external\n    payable\n    whenNotPaused {\n        // Checks for payment.\n        require(msg.value >= autoBirthFee);\n\n        // Caller must own the matron.\n        require(_owns(msg.sender, _matronId));\n\n        // Neither sire nor matron are allowed to be on auction during a normal\n        // breeding operation, but we don't need to check that explicitly.\n        // For matron: The caller of this function can't be the owner of the matron\n        //   because the owner of a Panda on auction is the auction house, and the\n        //   auction house will never call breedWith().\n        // For sire: Similarly, a sire on auction will be owned by the auction house\n        //   and the act of transferring ownership will have cleared any oustanding\n        //   siring approval.\n        // Thus we don't need to spend gas explicitly checking to see if either cat\n        // is on auction.\n\n        // Check that matron and sire are both owned by caller, or that the sire\n        // has given siring permission to caller (i.e. matron's owner).\n        // Will fail for _sireId = 0\n        require(_isSiringPermitted(_sireId, _matronId));\n\n        // Grab a reference to the potential matron\n        Panda storage matron = pandas[_matronId];\n\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(matron));\n\n        // Grab a reference to the potential sire\n        Panda storage sire = pandas[_sireId];\n\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(sire));\n\n        // Test that these cats are a valid mating pair.\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n\n        // All checks passed, panda gets pregnant!\n        _breedWith(_matronId, _sireId, msg.sender);\n    }\n\n    /// @notice Have a pregnant Panda give birth!\n    /// @param _matronId A Panda ready to give birth.\n    /// @return The Panda ID of the new kitten.\n    /// @dev Looks at a given Panda and, if pregnant and if the gestation period has passed,\n    ///  combines the genes of the two parents to create a new kitten. The new Panda is assigned\n    ///  to the current owner of the matron. Upon successful completion, both the matron and the\n    ///  new kitten will be ready to breed again. Note that anyone can call this function (if they\n    ///  are willing to pay the gas!), but the new kitten always goes to the mother's owner.\n    function giveBirth(uint256 _matronId, uint256[2] _childGenes, uint256[2] _factors)\n    external\n    whenNotPaused\n    onlyCLevel\n    returns(uint256) {\n        // Grab a reference to the matron in storage.\n        Panda storage matron = pandas[_matronId];\n\n        // Check that the matron is a valid cat.\n        require(matron.birthTime != 0);\n\n        // Check that the matron is pregnant, and that its time has come!\n        require(_isReadyToGiveBirth(matron));\n\n        // Grab a reference to the sire in storage.\n        uint256 sireId = matron.siringWithId;\n        Panda storage sire = pandas[sireId];\n\n        // Determine the higher generation number of the two parents\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n\n        // Call the sooper-sekret gene mixing operation.\n        //uint256[2] memory childGenes = geneScience.mixGenes(matron.genes, sire.genes,matron.generation,sire.generation, matron.cooldownEndBlock - 1);\n        uint256[2] memory childGenes = _childGenes;\n\n        uint256 kittenId = 0;\n\n        // birth failed\n        uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0];\n        if (probability >= (parentGen + 1) * _factors[1]) {\n            probability = probability - (parentGen + 1) * _factors[1];\n        } else {\n            probability = 0;\n        }\n        if (parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT) {\n            probability = 0;\n        }\n        if (uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability) {\n            // Make the new kitten!\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        } else {\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }\n        // Make the new kitten!\n        //address owner = pandaIndexToOwner[_matronId];\n        //address owner = childOwner[_matronId];\n        //uint256 kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n        // set is what marks a matron as being pregnant.)\n        delete matron.siringWithId;\n\n        // Every time a panda gives birth counter is decremented.\n        pregnantPandas--;\n\n        // Send the balance fee to the person who made birth happen.\n         // <yes> <report> UNCHECKED_LL_CALLS\n        msg.sender.send(autoBirthFee);\n\n        delete childOwner[_matronId];\n\n        // return the new kitten's ID\n        return kittenId;\n    }\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "PandaOwnership"
    UserDefinedTypeName "PandaOwnership"
       Source: "PandaOwnership"
  VariableDeclaration "GENSIS_TOTAL_COUNT"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant GENSIS_TOTAL_COUNT = 100"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 100
       Type: int_const 100
       Source: "100"
  EventDefinition "Pregnant"
     Gas costs: 0
     Source: "event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);"
    ParameterList
       Source: "(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "matronId"
         Type: uint256
         Source: "uint256 matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "sireId"
         Type: uint256
         Source: "uint256 sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "cooldownEndBlock"
         Type: uint256
         Source: "uint256 cooldownEndBlock"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "Abortion"
     Gas costs: 0
     Source: "event Abortion(address owner, uint256 matronId, uint256 sireId);"
    ParameterList
       Source: "(address owner, uint256 matronId, uint256 sireId)"
      VariableDeclaration "owner"
         Type: address
         Source: "address owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "matronId"
         Type: uint256
         Source: "uint256 matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "sireId"
         Type: uint256
         Source: "uint256 sireId"
        ElementaryTypeName uint256
           Source: "uint256"
  VariableDeclaration "autoBirthFee"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public autoBirthFee = 2 finney"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 2
       Type: int_const 2000000000000000
       Source: "2 finney"
  VariableDeclaration "pregnantPandas"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public pregnantPandas"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "childOwner"
     Type: mapping(uint256 => address)
     Gas costs: 0
     Source: "mapping(uint256 => address) childOwner"
    Mapping
       Source: "mapping(uint256 => address)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName address
         Source: "address"
  FunctionDefinition "setGeneScienceAddress" - public
     Source: "function setGeneScienceAddress(address _address) external onlyCEO {\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isGeneScience());\n\n        // Set the new contract address\n        geneScience = candidateContract;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        GeneScienceInterface candidateContract = GeneScienceInterface(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isGeneScience());\n\n        // Set the new contract address\n        geneScience = candidateContract;\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "GeneScienceInterface candidateContract = GeneScienceInterface(_address)"
        VariableDeclaration "candidateContract"
           Type: contract GeneScienceInterface
           Source: "GeneScienceInterface candidateContract"
          UserDefinedTypeName "GeneScienceInterface"
             Source: "GeneScienceInterface"
        FunctionCall
           Type: contract GeneScienceInterface
           Source: "GeneScienceInterface(_address)"
          Identifier GeneScienceInterface
             Type: type(contract GeneScienceInterface)
             Source: "GeneScienceInterface"
          Identifier _address
             Type: address
             Source: "_address"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(candidateContract.isGeneScience())"
        FunctionCall
           Type: tuple()
           Source: "require(candidateContract.isGeneScience())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "candidateContract.isGeneScience()"
            MemberAccess to member isGeneScience
               Type: function () pure external returns (bool)
               Source: "candidateContract.isGeneScience"
              Identifier candidateContract
                 Type: contract GeneScienceInterface
                 Source: "candidateContract"
      ExpressionStatement
         Gas costs: 20267
         Source: "geneScience = candidateContract"
        Assignment using operator =
           Type: contract GeneScienceInterface
           Source: "geneScience = candidateContract"
          Identifier geneScience
             Type: contract GeneScienceInterface
             Source: "geneScience"
          Identifier candidateContract
             Type: contract GeneScienceInterface
             Source: "candidateContract"
  FunctionDefinition "_isReadyToBreed" - const
     Source: "function _isReadyToBreed(Panda _kit) internal view returns(bool) {\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\n        // the cat has a pending birth; there can be some period of time between the end\n        // of the pregnacy timer and the birth event.\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n    }"
    ParameterList
       Gas costs: 0
       Source: "(Panda _kit)"
      VariableDeclaration "_kit"
         Type: struct PandaBase.Panda memory
         Source: "Panda _kit"
        UserDefinedTypeName "Panda"
           Source: "Panda"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        // In addition to checking the cooldownEndBlock, we also need to check to see if\n        // the cat has a pending birth; there can be some period of time between the end\n        // of the pregnacy timer and the birth event.\n        return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number));\n    }"
      Return
         Gas costs: [???]
         Source: "return (_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number))"
        BinaryOperation using operator &&
           Type: bool
           Source: "(_kit.siringWithId == 0) && (_kit.cooldownEndBlock <= uint64(block.number))"
          TupleExpression
             Type: bool
             Source: "(_kit.siringWithId == 0)"
            BinaryOperation using operator ==
               Type: bool
               Source: "_kit.siringWithId == 0"
              MemberAccess to member siringWithId
                 Type: uint32
                 Source: "_kit.siringWithId"
                Identifier _kit
                   Type: struct PandaBase.Panda memory
                   Source: "_kit"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          TupleExpression
             Type: bool
             Source: "(_kit.cooldownEndBlock <= uint64(block.number))"
            BinaryOperation using operator <=
               Type: bool
               Source: "_kit.cooldownEndBlock <= uint64(block.number)"
              MemberAccess to member cooldownEndBlock
                 Type: uint64
                 Source: "_kit.cooldownEndBlock"
                Identifier _kit
                   Type: struct PandaBase.Panda memory
                   Source: "_kit"
              FunctionCall
                 Type: uint64
                 Source: "uint64(block.number)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
  FunctionDefinition "_isSiringPermitted" - const
     Source: "function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns(bool) {\n        address matronOwner = pandaIndexToOwner[_matronId];\n        address sireOwner = pandaIndexToOwner[_sireId];\n\n        // Siring is okay if they have same owner, or if the matron's owner was given\n        // permission to breed with this sire.\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _sireId, uint256 _matronId)"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        address matronOwner = pandaIndexToOwner[_matronId];\n        address sireOwner = pandaIndexToOwner[_sireId];\n\n        // Siring is okay if they have same owner, or if the matron's owner was given\n        // permission to breed with this sire.\n        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);\n    }"
      VariableDeclarationStatement
         Gas costs: 331
         Source: "address matronOwner = pandaIndexToOwner[_matronId]"
        VariableDeclaration "matronOwner"
           Type: address
           Source: "address matronOwner"
          ElementaryTypeName address
             Source: "address"
        IndexAccess
           Type: address
           Source: "pandaIndexToOwner[_matronId]"
          Identifier pandaIndexToOwner
             Type: mapping(uint256 => address)
             Source: "pandaIndexToOwner"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
      VariableDeclarationStatement
         Gas costs: 325
         Source: "address sireOwner = pandaIndexToOwner[_sireId]"
        VariableDeclaration "sireOwner"
           Type: address
           Source: "address sireOwner"
          ElementaryTypeName address
             Source: "address"
        IndexAccess
           Type: address
           Source: "pandaIndexToOwner[_sireId]"
          Identifier pandaIndexToOwner
             Type: mapping(uint256 => address)
             Source: "pandaIndexToOwner"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      Return
         Gas costs: 386
         Source: "return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner)"
        TupleExpression
           Type: bool
           Source: "(matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner)"
          BinaryOperation using operator ||
             Type: bool
             Source: "matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner"
            BinaryOperation using operator ==
               Type: bool
               Source: "matronOwner == sireOwner"
              Identifier matronOwner
                 Type: address
                 Source: "matronOwner"
              Identifier sireOwner
                 Type: address
                 Source: "sireOwner"
            BinaryOperation using operator ==
               Type: bool
               Source: "sireAllowedToAddress[_sireId] == matronOwner"
              IndexAccess
                 Type: address
                 Source: "sireAllowedToAddress[_sireId]"
                Identifier sireAllowedToAddress
                   Type: mapping(uint256 => address)
                   Source: "sireAllowedToAddress"
                Identifier _sireId
                   Type: uint256
                   Source: "_sireId"
              Identifier matronOwner
                 Type: address
                 Source: "matronOwner"
  FunctionDefinition "_triggerCooldown"
     Source: "function _triggerCooldown(Panda storage _kitten) internal {\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number);\n\n\n        // Increment the breeding count, clamping it at 13, which is the length of the\n        // cooldowns array. We could check the array size dynamically, but hard-coding\n        // this as a constant saves gas. Yay, Solidity!\n        if (_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1) {\n            _kitten.cooldownIndex += 1;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(Panda storage _kitten)"
      VariableDeclaration "_kitten"
         Type: struct PandaBase.Panda storage pointer
         Source: "Panda storage _kitten"
        UserDefinedTypeName "Panda"
           Source: "Panda"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).\n        _kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number);\n\n\n        // Increment the breeding count, clamping it at 13, which is the length of the\n        // cooldowns array. We could check the array size dynamically, but hard-coding\n        // this as a constant saves gas. Yay, Solidity!\n        if (_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1) {\n            _kitten.cooldownIndex += 1;\n        }\n    }"
      ExpressionStatement
         Gas costs: 22767
         Source: "_kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)"
        Assignment using operator =
           Type: uint64
           Source: "_kitten.cooldownEndBlock = uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)"
          MemberAccess to member cooldownEndBlock
             Type: uint64
             Source: "_kitten.cooldownEndBlock"
            Identifier _kitten
               Type: struct PandaBase.Panda storage pointer
               Source: "_kitten"
          FunctionCall
             Type: uint64
             Source: "uint64((cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            BinaryOperation using operator +
               Type: uint256
               Source: "(cooldowns[_kitten.cooldownIndex] / secondsPerBlock) + block.number"
              TupleExpression
                 Type: uint256
                 Source: "(cooldowns[_kitten.cooldownIndex] / secondsPerBlock)"
                BinaryOperation using operator /
                   Type: uint256
                   Source: "cooldowns[_kitten.cooldownIndex] / secondsPerBlock"
                  IndexAccess
                     Type: uint32
                     Source: "cooldowns[_kitten.cooldownIndex]"
                    Identifier cooldowns
                       Type: uint32[9] storage ref
                       Source: "cooldowns"
                    MemberAccess to member cooldownIndex
                       Type: uint16
                       Source: "_kitten.cooldownIndex"
                      Identifier _kitten
                         Type: struct PandaBase.Panda storage pointer
                         Source: "_kitten"
                  Identifier secondsPerBlock
                     Type: uint256
                     Source: "secondsPerBlock"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
      IfStatement
         Source: "if (_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1) {\n            _kitten.cooldownIndex += 1;\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: [???]
           Source: "_kitten.cooldownIndex < 8 && geneScience.getWizzType(_kitten.genes) != 1"
          BinaryOperation using operator <
             Type: bool
             Source: "_kitten.cooldownIndex < 8"
            MemberAccess to member cooldownIndex
               Type: uint16
               Source: "_kitten.cooldownIndex"
              Identifier _kitten
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_kitten"
            Literal, token: [no token] value: 8
               Type: int_const 8
               Source: "8"
          BinaryOperation using operator !=
             Type: bool
             Source: "geneScience.getWizzType(_kitten.genes) != 1"
            FunctionCall
               Type: uint256
               Source: "geneScience.getWizzType(_kitten.genes)"
              MemberAccess to member getWizzType
                 Type: function (uint256[2] memory) view external returns (uint256)
                 Source: "geneScience.getWizzType"
                Identifier geneScience
                   Type: contract GeneScienceInterface
                   Source: "geneScience"
              MemberAccess to member genes
                 Type: uint256[2] storage ref
                 Source: "_kitten.genes"
                Identifier _kitten
                   Type: struct PandaBase.Panda storage pointer
                   Source: "_kitten"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
        Block
           Source: "{\n            _kitten.cooldownIndex += 1;\n        }"
          ExpressionStatement
             Gas costs: 20623
             Source: "_kitten.cooldownIndex += 1"
            Assignment using operator +=
               Type: uint16
               Source: "_kitten.cooldownIndex += 1"
              MemberAccess to member cooldownIndex
                 Type: uint16
                 Source: "_kitten.cooldownIndex"
                Identifier _kitten
                   Type: struct PandaBase.Panda storage pointer
                   Source: "_kitten"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
  FunctionDefinition "approveSiring" - public
     Source: "function approveSiring(address _addr, uint256 _sireId)\n    external\n    whenNotPaused {\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _addr, uint256 _sireId)"
      VariableDeclaration "_addr"
         Type: address
         Source: "address _addr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        require(_owns(msg.sender, _sireId));\n        sireAllowedToAddress[_sireId] = _addr;\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _sireId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _sireId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _sireId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
      ExpressionStatement
         Gas costs: 20351
         Source: "sireAllowedToAddress[_sireId] = _addr"
        Assignment using operator =
           Type: address
           Source: "sireAllowedToAddress[_sireId] = _addr"
          IndexAccess
             Type: address
             Source: "sireAllowedToAddress[_sireId]"
            Identifier sireAllowedToAddress
               Type: mapping(uint256 => address)
               Source: "sireAllowedToAddress"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
          Identifier _addr
             Type: address
             Source: "_addr"
  FunctionDefinition "setAutoBirthFee" - public
     Source: "function setAutoBirthFee(uint256 val) external onlyCOO {\n        autoBirthFee = val;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 val)"
      VariableDeclaration "val"
         Type: uint256
         Source: "uint256 val"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCOO"
       Gas costs: 0
       Source: "onlyCOO"
      Identifier onlyCOO
         Type: modifier ()
         Source: "onlyCOO"
    Block
       Source: "{\n        autoBirthFee = val;\n    }"
      ExpressionStatement
         Gas costs: 20014
         Source: "autoBirthFee = val"
        Assignment using operator =
           Type: uint256
           Source: "autoBirthFee = val"
          Identifier autoBirthFee
             Type: uint256
             Source: "autoBirthFee"
          Identifier val
             Type: uint256
             Source: "val"
  FunctionDefinition "_isReadyToGiveBirth" - const
     Source: "function _isReadyToGiveBirth(Panda _matron) private view returns(bool) {\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }"
    ParameterList
       Gas costs: 0
       Source: "(Panda _matron)"
      VariableDeclaration "_matron"
         Type: struct PandaBase.Panda memory
         Source: "Panda _matron"
        UserDefinedTypeName "Panda"
           Source: "Panda"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number));\n    }"
      Return
         Gas costs: [???]
         Source: "return (_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number))"
        BinaryOperation using operator &&
           Type: bool
           Source: "(_matron.siringWithId != 0) && (_matron.cooldownEndBlock <= uint64(block.number))"
          TupleExpression
             Type: bool
             Source: "(_matron.siringWithId != 0)"
            BinaryOperation using operator !=
               Type: bool
               Source: "_matron.siringWithId != 0"
              MemberAccess to member siringWithId
                 Type: uint32
                 Source: "_matron.siringWithId"
                Identifier _matron
                   Type: struct PandaBase.Panda memory
                   Source: "_matron"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
          TupleExpression
             Type: bool
             Source: "(_matron.cooldownEndBlock <= uint64(block.number))"
            BinaryOperation using operator <=
               Type: bool
               Source: "_matron.cooldownEndBlock <= uint64(block.number)"
              MemberAccess to member cooldownEndBlock
                 Type: uint64
                 Source: "_matron.cooldownEndBlock"
                Identifier _matron
                   Type: struct PandaBase.Panda memory
                   Source: "_matron"
              FunctionCall
                 Type: uint64
                 Source: "uint64(block.number)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                MemberAccess to member number
                   Type: uint256
                   Source: "block.number"
                  Identifier block
                     Type: block
                     Source: "block"
  FunctionDefinition "isReadyToBreed" - public - const
     Source: "function isReadyToBreed(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        Panda storage kit = pandas[_pandaId];\n        return _isReadyToBreed(kit);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _pandaId)"
      VariableDeclaration "_pandaId"
         Type: uint256
         Source: "uint256 _pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(_pandaId > 0);\n        Panda storage kit = pandas[_pandaId];\n        return _isReadyToBreed(kit);\n    }"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_pandaId > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_pandaId > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_pandaId > 0"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage kit = pandas[_pandaId]"
        VariableDeclaration "kit"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage kit"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_pandaId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
      Return
         Gas costs: [???]
         Source: "return _isReadyToBreed(kit)"
        FunctionCall
           Type: bool
           Source: "_isReadyToBreed(kit)"
          Identifier _isReadyToBreed
             Type: function (struct PandaBase.Panda memory) view returns (bool)
             Source: "_isReadyToBreed"
          Identifier kit
             Type: struct PandaBase.Panda storage pointer
             Source: "kit"
  FunctionDefinition "isPregnant" - public - const
     Source: "function isPregnant(uint256 _pandaId)\n    public\n    view\n    returns(bool) {\n        require(_pandaId > 0);\n        // A panda is pregnant if and only if this field is set\n        return pandas[_pandaId].siringWithId != 0;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _pandaId)"
      VariableDeclaration "_pandaId"
         Type: uint256
         Source: "uint256 _pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(_pandaId > 0);\n        // A panda is pregnant if and only if this field is set\n        return pandas[_pandaId].siringWithId != 0;\n    }"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_pandaId > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_pandaId > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_pandaId > 0"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      Return
         Gas costs: 615
         Source: "return pandas[_pandaId].siringWithId != 0"
        BinaryOperation using operator !=
           Type: bool
           Source: "pandas[_pandaId].siringWithId != 0"
          MemberAccess to member siringWithId
             Type: uint32
             Source: "pandas[_pandaId].siringWithId"
            IndexAccess
               Type: struct PandaBase.Panda storage ref
               Source: "pandas[_pandaId]"
              Identifier pandas
                 Type: struct PandaBase.Panda storage ref[] storage ref
                 Source: "pandas"
              Identifier _pandaId
                 Type: uint256
                 Source: "_pandaId"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
  FunctionDefinition "_isValidMatingPair" - const
     Source: "function _isValidMatingPair(\n        Panda storage _matron,\n        uint256 _matronId,\n        Panda storage _sire,\n        uint256 _sireId\n    )\n    private\n    view\n    returns(bool) {\n        // A Panda can't breed with itself!\n        if (_matronId == _sireId) {\n            return false;\n        }\n\n        // Pandas can't breed with their parents.\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n\n        // We can short circuit the sibling check (below) if either cat is\n        // gen zero (has a matron ID of zero).\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n\n        // Pandas can't breed with full or half siblings.\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n\n        // male should get breed with female\n        if (geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1) {\n            return false;\n        }\n\n        // Everything seems cool! Let's get DTF.\n        return true;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        Panda storage _matron,\n        uint256 _matronId,\n        Panda storage _sire,\n        uint256 _sireId\n    )"
      VariableDeclaration "_matron"
         Type: struct PandaBase.Panda storage pointer
         Source: "Panda storage _matron"
        UserDefinedTypeName "Panda"
           Source: "Panda"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sire"
         Type: struct PandaBase.Panda storage pointer
         Source: "Panda storage _sire"
        UserDefinedTypeName "Panda"
           Source: "Panda"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        // A Panda can't breed with itself!\n        if (_matronId == _sireId) {\n            return false;\n        }\n\n        // Pandas can't breed with their parents.\n        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }\n        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }\n\n        // We can short circuit the sibling check (below) if either cat is\n        // gen zero (has a matron ID of zero).\n        if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }\n\n        // Pandas can't breed with full or half siblings.\n        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }\n        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }\n\n        // male should get breed with female\n        if (geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1) {\n            return false;\n        }\n\n        // Everything seems cool! Let's get DTF.\n        return true;\n    }"
      IfStatement
         Source: "if (_matronId == _sireId) {\n            return false;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 9
           Source: "_matronId == _sireId"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
        Block
           Source: "{\n            return false;\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (_matron.matronId == _sireId || _matron.sireId == _sireId) {\n            return false;\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 633
           Source: "_matron.matronId == _sireId || _matron.sireId == _sireId"
          BinaryOperation using operator ==
             Type: bool
             Source: "_matron.matronId == _sireId"
            MemberAccess to member matronId
               Type: uint32
               Source: "_matron.matronId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
          BinaryOperation using operator ==
             Type: bool
             Source: "_matron.sireId == _sireId"
            MemberAccess to member sireId
               Type: uint32
               Source: "_matron.sireId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
        Block
           Source: "{\n            return false;\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (_sire.matronId == _matronId || _sire.sireId == _matronId) {\n            return false;\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 633
           Source: "_sire.matronId == _matronId || _sire.sireId == _matronId"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.matronId == _matronId"
            MemberAccess to member matronId
               Type: uint32
               Source: "_sire.matronId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.sireId == _matronId"
            MemberAccess to member sireId
               Type: uint32
               Source: "_sire.sireId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
        Block
           Source: "{\n            return false;\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (_sire.matronId == 0 || _matron.matronId == 0) {\n            return true;\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 633
           Source: "_sire.matronId == 0 || _matron.matronId == 0"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.matronId == 0"
            MemberAccess to member matronId
               Type: uint32
               Source: "_sire.matronId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator ==
             Type: bool
             Source: "_matron.matronId == 0"
            MemberAccess to member matronId
               Type: uint32
               Source: "_matron.matronId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\n            return true;\n        }"
          Return
             Gas costs: 19
             Source: "return true"
            Literal, token: true value: true
               Type: bool
               Source: "true"
      IfStatement
         Source: "if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {\n            return false;\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 1229
           Source: "_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.matronId == _matron.matronId"
            MemberAccess to member matronId
               Type: uint32
               Source: "_sire.matronId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            MemberAccess to member matronId
               Type: uint32
               Source: "_matron.matronId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.matronId == _matron.sireId"
            MemberAccess to member matronId
               Type: uint32
               Source: "_sire.matronId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            MemberAccess to member sireId
               Type: uint32
               Source: "_matron.sireId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
        Block
           Source: "{\n            return false;\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {\n            return false;\n        }"
        BinaryOperation using operator ||
           Type: bool
           Gas costs: 1229
           Source: "_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.sireId == _matron.matronId"
            MemberAccess to member sireId
               Type: uint32
               Source: "_sire.sireId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            MemberAccess to member matronId
               Type: uint32
               Source: "_matron.matronId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
          BinaryOperation using operator ==
             Type: bool
             Source: "_sire.sireId == _matron.sireId"
            MemberAccess to member sireId
               Type: uint32
               Source: "_sire.sireId"
              Identifier _sire
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_sire"
            MemberAccess to member sireId
               Type: uint32
               Source: "_matron.sireId"
              Identifier _matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "_matron"
        Block
           Source: "{\n            return false;\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      IfStatement
         Source: "if (geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1) {\n            return false;\n        }"
        BinaryOperation using operator !=
           Type: bool
           Gas costs: [???]
           Source: "geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes) != 1"
          BinaryOperation using operator +
             Type: uint256
             Source: "geneScience.getSex(_matron.genes) + geneScience.getSex(_sire.genes)"
            FunctionCall
               Type: uint256
               Source: "geneScience.getSex(_matron.genes)"
              MemberAccess to member getSex
                 Type: function (uint256[2] memory) view external returns (uint256)
                 Source: "geneScience.getSex"
                Identifier geneScience
                   Type: contract GeneScienceInterface
                   Source: "geneScience"
              MemberAccess to member genes
                 Type: uint256[2] storage ref
                 Source: "_matron.genes"
                Identifier _matron
                   Type: struct PandaBase.Panda storage pointer
                   Source: "_matron"
            FunctionCall
               Type: uint256
               Source: "geneScience.getSex(_sire.genes)"
              MemberAccess to member getSex
                 Type: function (uint256[2] memory) view external returns (uint256)
                 Source: "geneScience.getSex"
                Identifier geneScience
                   Type: contract GeneScienceInterface
                   Source: "geneScience"
              MemberAccess to member genes
                 Type: uint256[2] storage ref
                 Source: "_sire.genes"
                Identifier _sire
                   Type: struct PandaBase.Panda storage pointer
                   Source: "_sire"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\n            return false;\n        }"
          Return
             Gas costs: 19
             Source: "return false"
            Literal, token: false value: false
               Type: bool
               Source: "false"
      Return
         Gas costs: 8
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "_canBreedWithViaAuction" - const
     Source: "function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)\n    internal\n    view\n    returns(bool) {\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _matronId, uint256 _sireId)"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId);\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage matron = pandas[_matronId]"
        VariableDeclaration "matron"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage matron"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_matronId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage sire = pandas[_sireId]"
        VariableDeclaration "sire"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage sire"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_sireId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      Return
         Gas costs: 32
         Source: "return _isValidMatingPair(matron, _matronId, sire, _sireId)"
        FunctionCall
           Type: bool
           Source: "_isValidMatingPair(matron, _matronId, sire, _sireId)"
          Identifier _isValidMatingPair
             Type: function (struct PandaBase.Panda storage pointer,uint256,struct PandaBase.Panda storage pointer,uint256) view returns (bool)
             Source: "_isValidMatingPair"
          Identifier matron
             Type: struct PandaBase.Panda storage pointer
             Source: "matron"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
          Identifier sire
             Type: struct PandaBase.Panda storage pointer
             Source: "sire"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
  FunctionDefinition "canBreedWith" - public - const
     Source: "function canBreedWith(uint256 _matronId, uint256 _sireId)\n    external\n    view\n    returns(bool) {\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _matronId, uint256 _sireId)"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 3
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require(_matronId > 0);\n        require(_sireId > 0);\n        Panda storage matron = pandas[_matronId];\n        Panda storage sire = pandas[_sireId];\n        return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId);\n    }"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_matronId > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_matronId > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_matronId > 0"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 35
         Source: "require(_sireId > 0)"
        FunctionCall
           Type: tuple()
           Source: "require(_sireId > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "_sireId > 0"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage matron = pandas[_matronId]"
        VariableDeclaration "matron"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage matron"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_matronId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage sire = pandas[_sireId]"
        VariableDeclaration "sire"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage sire"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_sireId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      Return
         Gas costs: 64
         Source: "return _isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId)"
        BinaryOperation using operator &&
           Type: bool
           Source: "_isValidMatingPair(matron, _matronId, sire, _sireId) &&\n            _isSiringPermitted(_sireId, _matronId)"
          FunctionCall
             Type: bool
             Source: "_isValidMatingPair(matron, _matronId, sire, _sireId)"
            Identifier _isValidMatingPair
               Type: function (struct PandaBase.Panda storage pointer,uint256,struct PandaBase.Panda storage pointer,uint256) view returns (bool)
               Source: "_isValidMatingPair"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            Identifier sire
               Type: struct PandaBase.Panda storage pointer
               Source: "sire"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
          FunctionCall
             Type: bool
             Source: "_isSiringPermitted(_sireId, _matronId)"
            Identifier _isSiringPermitted
               Type: function (uint256,uint256) view returns (bool)
               Source: "_isSiringPermitted"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
  FunctionDefinition "_exchangeMatronSireId"
     Source: "function _exchangeMatronSireId(uint256 _matronId, uint256 _sireId) internal returns(uint256, uint256) {\n        if (geneScience.getSex(pandas[_matronId].genes) == 1) {\n            return (_sireId, _matronId);\n        } else {\n            return (_matronId, _sireId);\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _matronId, uint256 _sireId)"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 6
       Source: "(uint256, uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        if (geneScience.getSex(pandas[_matronId].genes) == 1) {\n            return (_sireId, _matronId);\n        } else {\n            return (_matronId, _sireId);\n        }\n    }"
      IfStatement
         Source: "if (geneScience.getSex(pandas[_matronId].genes) == 1) {\n            return (_sireId, _matronId);\n        } else {\n            return (_matronId, _sireId);\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: [???]
           Source: "geneScience.getSex(pandas[_matronId].genes) == 1"
          FunctionCall
             Type: uint256
             Source: "geneScience.getSex(pandas[_matronId].genes)"
            MemberAccess to member getSex
               Type: function (uint256[2] memory) view external returns (uint256)
               Source: "geneScience.getSex"
              Identifier geneScience
                 Type: contract GeneScienceInterface
                 Source: "geneScience"
            MemberAccess to member genes
               Type: uint256[2] storage ref
               Source: "pandas[_matronId].genes"
              IndexAccess
                 Type: struct PandaBase.Panda storage ref
                 Source: "pandas[_matronId]"
                Identifier pandas
                   Type: struct PandaBase.Panda storage ref[] storage ref
                   Source: "pandas"
                Identifier _matronId
                   Type: uint256
                   Source: "_matronId"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\n            return (_sireId, _matronId);\n        }"
          Return
             Gas costs: 27
             Source: "return (_sireId, _matronId)"
            TupleExpression
               Type: tuple(uint256,uint256)
               Source: "(_sireId, _matronId)"
              Identifier _sireId
                 Type: uint256
                 Source: "_sireId"
              Identifier _matronId
                 Type: uint256
                 Source: "_matronId"
        Block
           Source: "{\n            return (_matronId, _sireId);\n        }"
          Return
             Gas costs: 16
             Source: "return (_matronId, _sireId)"
            TupleExpression
               Type: tuple(uint256,uint256)
               Source: "(_matronId, _sireId)"
              Identifier _matronId
                 Type: uint256
                 Source: "_matronId"
              Identifier _sireId
                 Type: uint256
                 Source: "_sireId"
  FunctionDefinition "_breedWith"
     Source: "function _breedWith(uint256 _matronId, uint256 _sireId, address _owner) internal {\n        // make id point real gender\n        (_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId);\n        // Grab a reference to the Pandas from storage.\n        Panda storage sire = pandas[_sireId];\n        Panda storage matron = pandas[_matronId];\n\n        // Mark the matron as pregnant, keeping track of who the sire is.\n        matron.siringWithId = uint32(_sireId);\n\n        // Trigger the cooldown for both parents.\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n\n        // Clear siring permission for both parents. This may not be strictly necessary\n        // but it's likely to avoid confusion!\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n\n        // Every time a panda gets pregnant, counter is incremented.\n        pregnantPandas++;\n\n        childOwner[_matronId] = _owner;\n\n        // Emit the pregnancy event.\n        Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _matronId, uint256 _sireId, address _owner)"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // make id point real gender\n        (_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId);\n        // Grab a reference to the Pandas from storage.\n        Panda storage sire = pandas[_sireId];\n        Panda storage matron = pandas[_matronId];\n\n        // Mark the matron as pregnant, keeping track of who the sire is.\n        matron.siringWithId = uint32(_sireId);\n\n        // Trigger the cooldown for both parents.\n        _triggerCooldown(sire);\n        _triggerCooldown(matron);\n\n        // Clear siring permission for both parents. This may not be strictly necessary\n        // but it's likely to avoid confusion!\n        delete sireAllowedToAddress[_matronId];\n        delete sireAllowedToAddress[_sireId];\n\n        // Every time a panda gets pregnant, counter is incremented.\n        pregnantPandas++;\n\n        childOwner[_matronId] = _owner;\n\n        // Emit the pregnancy event.\n        Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);\n    }"
      ExpressionStatement
         Gas costs: 30
         Source: "(_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId)"
        Assignment using operator =
           Type: tuple()
           Source: "(_matronId, _sireId) = _exchangeMatronSireId(_matronId, _sireId)"
          TupleExpression
             Type: tuple(uint256,uint256)
             Source: "(_matronId, _sireId)"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
          FunctionCall
             Type: tuple(uint256,uint256)
             Source: "_exchangeMatronSireId(_matronId, _sireId)"
            Identifier _exchangeMatronSireId
               Type: function (uint256,uint256) returns (uint256,uint256)
               Source: "_exchangeMatronSireId"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage sire = pandas[_sireId]"
        VariableDeclaration "sire"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage sire"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_sireId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage matron = pandas[_matronId]"
        VariableDeclaration "matron"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage matron"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_matronId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
      ExpressionStatement
         Gas costs: 20323
         Source: "matron.siringWithId = uint32(_sireId)"
        Assignment using operator =
           Type: uint32
           Source: "matron.siringWithId = uint32(_sireId)"
          MemberAccess to member siringWithId
             Type: uint32
             Source: "matron.siringWithId"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
          FunctionCall
             Type: uint32
             Source: "uint32(_sireId)"
            ElementaryTypeNameExpression uint32
               Type: type(uint32)
               Source: "uint32"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
      ExpressionStatement
         Gas costs: 7
         Source: "_triggerCooldown(sire)"
        FunctionCall
           Type: tuple()
           Source: "_triggerCooldown(sire)"
          Identifier _triggerCooldown
             Type: function (struct PandaBase.Panda storage pointer)
             Source: "_triggerCooldown"
          Identifier sire
             Type: struct PandaBase.Panda storage pointer
             Source: "sire"
      ExpressionStatement
         Gas costs: 18
         Source: "_triggerCooldown(matron)"
        FunctionCall
           Type: tuple()
           Source: "_triggerCooldown(matron)"
          Identifier _triggerCooldown
             Type: function (struct PandaBase.Panda storage pointer)
             Source: "_triggerCooldown"
          Identifier matron
             Type: struct PandaBase.Panda storage pointer
             Source: "matron"
      ExpressionStatement
         Gas costs: 20326
         Source: "delete sireAllowedToAddress[_matronId]"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete sireAllowedToAddress[_matronId]"
          IndexAccess
             Type: address
             Source: "sireAllowedToAddress[_matronId]"
            Identifier sireAllowedToAddress
               Type: mapping(uint256 => address)
               Source: "sireAllowedToAddress"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
      ExpressionStatement
         Gas costs: 20320
         Source: "delete sireAllowedToAddress[_sireId]"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete sireAllowedToAddress[_sireId]"
          IndexAccess
             Type: address
             Source: "sireAllowedToAddress[_sireId]"
            Identifier sireAllowedToAddress
               Type: mapping(uint256 => address)
               Source: "sireAllowedToAddress"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
      ExpressionStatement
         Gas costs: 20237
         Source: "pregnantPandas++"
        UnaryOperation (postfix) ++
           Type: uint256
           Source: "pregnantPandas++"
          Identifier pregnantPandas
             Type: uint256
             Source: "pregnantPandas"
      ExpressionStatement
         Gas costs: 20345
         Source: "childOwner[_matronId] = _owner"
        Assignment using operator =
           Type: address
           Source: "childOwner[_matronId] = _owner"
          IndexAccess
             Type: address
             Source: "childOwner[_matronId]"
            Identifier childOwner
               Type: mapping(uint256 => address)
               Source: "childOwner"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
          Identifier _owner
             Type: address
             Source: "_owner"
      ExpressionStatement
         Gas costs: [???]
         Source: "Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock)"
        FunctionCall
           Type: tuple()
           Source: "Pregnant(pandaIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock)"
          Identifier Pregnant
             Type: function (address,uint256,uint256,uint256)
             Source: "Pregnant"
          IndexAccess
             Type: address
             Source: "pandaIndexToOwner[_matronId]"
            Identifier pandaIndexToOwner
               Type: mapping(uint256 => address)
               Source: "pandaIndexToOwner"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
          MemberAccess to member cooldownEndBlock
             Type: uint64
             Source: "matron.cooldownEndBlock"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
  FunctionDefinition "breedWithAuto" - public
     Source: "function breedWithAuto(uint256 _matronId, uint256 _sireId)\n    external\n    payable\n    whenNotPaused {\n        // Checks for payment.\n        require(msg.value >= autoBirthFee);\n\n        // Caller must own the matron.\n        require(_owns(msg.sender, _matronId));\n\n        // Neither sire nor matron are allowed to be on auction during a normal\n        // breeding operation, but we don't need to check that explicitly.\n        // For matron: The caller of this function can't be the owner of the matron\n        //   because the owner of a Panda on auction is the auction house, and the\n        //   auction house will never call breedWith().\n        // For sire: Similarly, a sire on auction will be owned by the auction house\n        //   and the act of transferring ownership will have cleared any oustanding\n        //   siring approval.\n        // Thus we don't need to spend gas explicitly checking to see if either cat\n        // is on auction.\n\n        // Check that matron and sire are both owned by caller, or that the sire\n        // has given siring permission to caller (i.e. matron's owner).\n        // Will fail for _sireId = 0\n        require(_isSiringPermitted(_sireId, _matronId));\n\n        // Grab a reference to the potential matron\n        Panda storage matron = pandas[_matronId];\n\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(matron));\n\n        // Grab a reference to the potential sire\n        Panda storage sire = pandas[_sireId];\n\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(sire));\n\n        // Test that these cats are a valid mating pair.\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n\n        // All checks passed, panda gets pregnant!\n        _breedWith(_matronId, _sireId, msg.sender);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _matronId, uint256 _sireId)"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Checks for payment.\n        require(msg.value >= autoBirthFee);\n\n        // Caller must own the matron.\n        require(_owns(msg.sender, _matronId));\n\n        // Neither sire nor matron are allowed to be on auction during a normal\n        // breeding operation, but we don't need to check that explicitly.\n        // For matron: The caller of this function can't be the owner of the matron\n        //   because the owner of a Panda on auction is the auction house, and the\n        //   auction house will never call breedWith().\n        // For sire: Similarly, a sire on auction will be owned by the auction house\n        //   and the act of transferring ownership will have cleared any oustanding\n        //   siring approval.\n        // Thus we don't need to spend gas explicitly checking to see if either cat\n        // is on auction.\n\n        // Check that matron and sire are both owned by caller, or that the sire\n        // has given siring permission to caller (i.e. matron's owner).\n        // Will fail for _sireId = 0\n        require(_isSiringPermitted(_sireId, _matronId));\n\n        // Grab a reference to the potential matron\n        Panda storage matron = pandas[_matronId];\n\n        // Make sure matron isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(matron));\n\n        // Grab a reference to the potential sire\n        Panda storage sire = pandas[_sireId];\n\n        // Make sure sire isn't pregnant, or in the middle of a siring cooldown\n        require(_isReadyToBreed(sire));\n\n        // Test that these cats are a valid mating pair.\n        require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ));\n\n        // All checks passed, panda gets pregnant!\n        _breedWith(_matronId, _sireId, msg.sender);\n    }"
      ExpressionStatement
         Gas costs: 237
         Source: "require(msg.value >= autoBirthFee)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value >= autoBirthFee)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= autoBirthFee"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier autoBirthFee
               Type: uint256
               Source: "autoBirthFee"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _matronId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _matronId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _matronId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
      ExpressionStatement
         Gas costs: 36
         Source: "require(_isSiringPermitted(_sireId, _matronId))"
        FunctionCall
           Type: tuple()
           Source: "require(_isSiringPermitted(_sireId, _matronId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isSiringPermitted(_sireId, _matronId)"
            Identifier _isSiringPermitted
               Type: function (uint256,uint256) view returns (bool)
               Source: "_isSiringPermitted"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage matron = pandas[_matronId]"
        VariableDeclaration "matron"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage matron"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_matronId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(_isReadyToBreed(matron))"
        FunctionCall
           Type: tuple()
           Source: "require(_isReadyToBreed(matron))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isReadyToBreed(matron)"
            Identifier _isReadyToBreed
               Type: function (struct PandaBase.Panda memory) view returns (bool)
               Source: "_isReadyToBreed"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage sire = pandas[_sireId]"
        VariableDeclaration "sire"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage sire"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_sireId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(_isReadyToBreed(sire))"
        FunctionCall
           Type: tuple()
           Source: "require(_isReadyToBreed(sire))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isReadyToBreed(sire)"
            Identifier _isReadyToBreed
               Type: function (struct PandaBase.Panda memory) view returns (bool)
               Source: "_isReadyToBreed"
            Identifier sire
               Type: struct PandaBase.Panda storage pointer
               Source: "sire"
      ExpressionStatement
         Gas costs: 53
         Source: "require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ))"
        FunctionCall
           Type: tuple()
           Source: "require(_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        ))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isValidMatingPair(\n            matron,\n            _matronId,\n            sire,\n            _sireId\n        )"
            Identifier _isValidMatingPair
               Type: function (struct PandaBase.Panda storage pointer,uint256,struct PandaBase.Panda storage pointer,uint256) view returns (bool)
               Source: "_isValidMatingPair"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            Identifier sire
               Type: struct PandaBase.Panda storage pointer
               Source: "sire"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
      ExpressionStatement
         Gas costs: 23
         Source: "_breedWith(_matronId, _sireId, msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "_breedWith(_matronId, _sireId, msg.sender)"
          Identifier _breedWith
             Type: function (uint256,uint256,address)
             Source: "_breedWith"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "giveBirth" - public
     Source: "function giveBirth(uint256 _matronId, uint256[2] _childGenes, uint256[2] _factors)\n    external\n    whenNotPaused\n    onlyCLevel\n    returns(uint256) {\n        // Grab a reference to the matron in storage.\n        Panda storage matron = pandas[_matronId];\n\n        // Check that the matron is a valid cat.\n        require(matron.birthTime != 0);\n\n        // Check that the matron is pregnant, and that its time has come!\n        require(_isReadyToGiveBirth(matron));\n\n        // Grab a reference to the sire in storage.\n        uint256 sireId = matron.siringWithId;\n        Panda storage sire = pandas[sireId];\n\n        // Determine the higher generation number of the two parents\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n\n        // Call the sooper-sekret gene mixing operation.\n        //uint256[2] memory childGenes = geneScience.mixGenes(matron.genes, sire.genes,matron.generation,sire.generation, matron.cooldownEndBlock - 1);\n        uint256[2] memory childGenes = _childGenes;\n\n        uint256 kittenId = 0;\n\n        // birth failed\n        uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0];\n        if (probability >= (parentGen + 1) * _factors[1]) {\n            probability = probability - (parentGen + 1) * _factors[1];\n        } else {\n            probability = 0;\n        }\n        if (parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT) {\n            probability = 0;\n        }\n        if (uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability) {\n            // Make the new kitten!\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        } else {\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }\n        // Make the new kitten!\n        //address owner = pandaIndexToOwner[_matronId];\n        //address owner = childOwner[_matronId];\n        //uint256 kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n        // set is what marks a matron as being pregnant.)\n        delete matron.siringWithId;\n\n        // Every time a panda gives birth counter is decremented.\n        pregnantPandas--;\n\n        // Send the balance fee to the person who made birth happen.\n         // <yes> <report> UNCHECKED_LL_CALLS\n        msg.sender.send(autoBirthFee);\n\n        delete childOwner[_matronId];\n\n        // return the new kitten's ID\n        return kittenId;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _matronId, uint256[2] _childGenes, uint256[2] _factors)"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_childGenes"
         Type: uint256[2] calldata
         Source: "uint256[2] _childGenes"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
      VariableDeclaration "_factors"
         Type: uint256[2] calldata
         Source: "uint256[2] _factors"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    ModifierInvocation "onlyCLevel"
       Gas costs: 0
       Source: "onlyCLevel"
      Identifier onlyCLevel
         Type: modifier ()
         Source: "onlyCLevel"
    Block
       Source: "{\n        // Grab a reference to the matron in storage.\n        Panda storage matron = pandas[_matronId];\n\n        // Check that the matron is a valid cat.\n        require(matron.birthTime != 0);\n\n        // Check that the matron is pregnant, and that its time has come!\n        require(_isReadyToGiveBirth(matron));\n\n        // Grab a reference to the sire in storage.\n        uint256 sireId = matron.siringWithId;\n        Panda storage sire = pandas[sireId];\n\n        // Determine the higher generation number of the two parents\n        uint16 parentGen = matron.generation;\n        if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }\n\n        // Call the sooper-sekret gene mixing operation.\n        //uint256[2] memory childGenes = geneScience.mixGenes(matron.genes, sire.genes,matron.generation,sire.generation, matron.cooldownEndBlock - 1);\n        uint256[2] memory childGenes = _childGenes;\n\n        uint256 kittenId = 0;\n\n        // birth failed\n        uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0];\n        if (probability >= (parentGen + 1) * _factors[1]) {\n            probability = probability - (parentGen + 1) * _factors[1];\n        } else {\n            probability = 0;\n        }\n        if (parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT) {\n            probability = 0;\n        }\n        if (uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability) {\n            // Make the new kitten!\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        } else {\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }\n        // Make the new kitten!\n        //address owner = pandaIndexToOwner[_matronId];\n        //address owner = childOwner[_matronId];\n        //uint256 kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n\n        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId\n        // set is what marks a matron as being pregnant.)\n        delete matron.siringWithId;\n\n        // Every time a panda gives birth counter is decremented.\n        pregnantPandas--;\n\n        // Send the balance fee to the person who made birth happen.\n         // <yes> <report> UNCHECKED_LL_CALLS\n        msg.sender.send(autoBirthFee);\n\n        delete childOwner[_matronId];\n\n        // return the new kitten's ID\n        return kittenId;\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage matron = pandas[_matronId]"
        VariableDeclaration "matron"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage matron"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_matronId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _matronId
             Type: uint256
             Source: "_matronId"
      ExpressionStatement
         Gas costs: 286
         Source: "require(matron.birthTime != 0)"
        FunctionCall
           Type: tuple()
           Source: "require(matron.birthTime != 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "matron.birthTime != 0"
            MemberAccess to member birthTime
               Type: uint64
               Source: "matron.birthTime"
              Identifier matron
                 Type: struct PandaBase.Panda storage pointer
                 Source: "matron"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(_isReadyToGiveBirth(matron))"
        FunctionCall
           Type: tuple()
           Source: "require(_isReadyToGiveBirth(matron))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isReadyToGiveBirth(matron)"
            Identifier _isReadyToGiveBirth
               Type: function (struct PandaBase.Panda memory) view returns (bool)
               Source: "_isReadyToGiveBirth"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
      VariableDeclarationStatement
         Gas costs: 309
         Source: "uint256 sireId = matron.siringWithId"
        VariableDeclaration "sireId"
           Type: uint256
           Source: "uint256 sireId"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member siringWithId
           Type: uint32
           Source: "matron.siringWithId"
          Identifier matron
             Type: struct PandaBase.Panda storage pointer
             Source: "matron"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage sire = pandas[sireId]"
        VariableDeclaration "sire"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage sire"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[sireId]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier sireId
             Type: uint256
             Source: "sireId"
      VariableDeclarationStatement
         Gas costs: 303
         Source: "uint16 parentGen = matron.generation"
        VariableDeclaration "parentGen"
           Type: uint16
           Source: "uint16 parentGen"
          ElementaryTypeName uint16
             Source: "uint16"
        MemberAccess to member generation
           Type: uint16
           Source: "matron.generation"
          Identifier matron
             Type: struct PandaBase.Panda storage pointer
             Source: "matron"
      IfStatement
         Source: "if (sire.generation > matron.generation) {\n            parentGen = sire.generation;\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 605
           Source: "sire.generation > matron.generation"
          MemberAccess to member generation
             Type: uint16
             Source: "sire.generation"
            Identifier sire
               Type: struct PandaBase.Panda storage pointer
               Source: "sire"
          MemberAccess to member generation
             Type: uint16
             Source: "matron.generation"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
        Block
           Source: "{\n            parentGen = sire.generation;\n        }"
          ExpressionStatement
             Gas costs: 300
             Source: "parentGen = sire.generation"
            Assignment using operator =
               Type: uint16
               Source: "parentGen = sire.generation"
              Identifier parentGen
                 Type: uint16
                 Source: "parentGen"
              MemberAccess to member generation
                 Type: uint16
                 Source: "sire.generation"
                Identifier sire
                   Type: struct PandaBase.Panda storage pointer
                   Source: "sire"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256[2] memory childGenes = _childGenes"
        VariableDeclaration "childGenes"
           Type: uint256[2] memory
           Source: "uint256[2] memory childGenes"
          ArrayTypeName
             Source: "uint256[2]"
            ElementaryTypeName uint256
               Source: "uint256"
            Literal, token: [no token] value: 2
               Type unknown.
               Source: "2"
        Identifier _childGenes
           Type: uint256[2] calldata
           Source: "_childGenes"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "uint256 kittenId = 0"
        VariableDeclaration "kittenId"
           Type: uint256
           Source: "uint256 kittenId"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 probability = (geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]"
        VariableDeclaration "probability"
           Type: uint256
           Source: "uint256 probability"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "(geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2 + _factors[0]"
          BinaryOperation using operator /
             Type: uint256
             Source: "(geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)) / 2"
            TupleExpression
               Type: uint256
               Source: "(geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes))"
              BinaryOperation using operator +
                 Type: uint256
                 Source: "geneScience.getPureFromGene(matron.genes) + geneScience.getPureFromGene(sire.genes)"
                FunctionCall
                   Type: uint256
                   Source: "geneScience.getPureFromGene(matron.genes)"
                  MemberAccess to member getPureFromGene
                     Type: function (uint256[2] memory) view external returns (uint256)
                     Source: "geneScience.getPureFromGene"
                    Identifier geneScience
                       Type: contract GeneScienceInterface
                       Source: "geneScience"
                  MemberAccess to member genes
                     Type: uint256[2] storage ref
                     Source: "matron.genes"
                    Identifier matron
                       Type: struct PandaBase.Panda storage pointer
                       Source: "matron"
                FunctionCall
                   Type: uint256
                   Source: "geneScience.getPureFromGene(sire.genes)"
                  MemberAccess to member getPureFromGene
                     Type: function (uint256[2] memory) view external returns (uint256)
                     Source: "geneScience.getPureFromGene"
                    Identifier geneScience
                       Type: contract GeneScienceInterface
                       Source: "geneScience"
                  MemberAccess to member genes
                     Type: uint256[2] storage ref
                     Source: "sire.genes"
                    Identifier sire
                       Type: struct PandaBase.Panda storage pointer
                       Source: "sire"
            Literal, token: [no token] value: 2
               Type: int_const 2
               Source: "2"
          IndexAccess
             Type: uint256
             Source: "_factors[0]"
            Identifier _factors
               Type: uint256[2] calldata
               Source: "_factors"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      IfStatement
         Source: "if (probability >= (parentGen + 1) * _factors[1]) {\n            probability = probability - (parentGen + 1) * _factors[1];\n        } else {\n            probability = 0;\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 78
           Source: "probability >= (parentGen + 1) * _factors[1]"
          Identifier probability
             Type: uint256
             Source: "probability"
          BinaryOperation using operator *
             Type: uint256
             Source: "(parentGen + 1) * _factors[1]"
            TupleExpression
               Type: uint16
               Source: "(parentGen + 1)"
              BinaryOperation using operator +
                 Type: uint16
                 Source: "parentGen + 1"
                Identifier parentGen
                   Type: uint16
                   Source: "parentGen"
                Literal, token: [no token] value: 1
                   Type: int_const 1
                   Source: "1"
            IndexAccess
               Type: uint256
               Source: "_factors[1]"
              Identifier _factors
                 Type: uint256[2] calldata
                 Source: "_factors"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
        Block
           Source: "{\n            probability = probability - (parentGen + 1) * _factors[1];\n        }"
          ExpressionStatement
             Gas costs: 80
             Source: "probability = probability - (parentGen + 1) * _factors[1]"
            Assignment using operator =
               Type: uint256
               Source: "probability = probability - (parentGen + 1) * _factors[1]"
              Identifier probability
                 Type: uint256
                 Source: "probability"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "probability - (parentGen + 1) * _factors[1]"
                Identifier probability
                   Type: uint256
                   Source: "probability"
                BinaryOperation using operator *
                   Type: uint256
                   Source: "(parentGen + 1) * _factors[1]"
                  TupleExpression
                     Type: uint16
                     Source: "(parentGen + 1)"
                    BinaryOperation using operator +
                       Type: uint16
                       Source: "parentGen + 1"
                      Identifier parentGen
                         Type: uint16
                         Source: "parentGen"
                      Literal, token: [no token] value: 1
                         Type: int_const 1
                         Source: "1"
                  IndexAccess
                     Type: uint256
                     Source: "_factors[1]"
                    Identifier _factors
                       Type: uint256[2] calldata
                       Source: "_factors"
                    Literal, token: [no token] value: 1
                       Type: int_const 1
                       Source: "1"
        Block
           Source: "{\n            probability = 0;\n        }"
          ExpressionStatement
             Gas costs: 8
             Source: "probability = 0"
            Assignment using operator =
               Type: uint256
               Source: "probability = 0"
              Identifier probability
                 Type: uint256
                 Source: "probability"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      IfStatement
         Source: "if (parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT) {\n            probability = 0;\n        }"
        BinaryOperation using operator &&
           Type: bool
           Gas costs: 243
           Source: "parentGen == 0 && gen0CreatedCount == GEN0_TOTAL_COUNT"
          BinaryOperation using operator ==
             Type: bool
             Source: "parentGen == 0"
            Identifier parentGen
               Type: uint16
               Source: "parentGen"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
          BinaryOperation using operator ==
             Type: bool
             Source: "gen0CreatedCount == GEN0_TOTAL_COUNT"
            Identifier gen0CreatedCount
               Type: uint256
               Source: "gen0CreatedCount"
            Identifier GEN0_TOTAL_COUNT
               Type: uint256
               Source: "GEN0_TOTAL_COUNT"
        Block
           Source: "{\n            probability = 0;\n        }"
          ExpressionStatement
             Gas costs: 8
             Source: "probability = 0"
            Assignment using operator =
               Type: uint256
               Source: "probability = 0"
              Identifier probability
                 Type: uint256
                 Source: "probability"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      IfStatement
         Source: "if (uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability) {\n            // Make the new kitten!\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        } else {\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: [???]
           Source: "uint256(keccak256(block.blockhash(block.number - 2), now)) % 100 < probability"
          BinaryOperation using operator %
             Type: uint256
             Source: "uint256(keccak256(block.blockhash(block.number - 2), now)) % 100"
            FunctionCall
               Type: uint256
               Source: "uint256(keccak256(block.blockhash(block.number - 2), now))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: bytes32
                 Source: "keccak256(block.blockhash(block.number - 2), now)"
                Identifier keccak256
                   Type: function () pure returns (bytes32)
                   Source: "keccak256"
                FunctionCall
                   Type: bytes32
                   Source: "block.blockhash(block.number - 2)"
                  MemberAccess to member blockhash
                     Type: function (uint256) view returns (bytes32)
                     Source: "block.blockhash"
                    Identifier block
                       Type: block
                       Source: "block"
                  BinaryOperation using operator -
                     Type: uint256
                     Source: "block.number - 2"
                    MemberAccess to member number
                       Type: uint256
                       Source: "block.number"
                      Identifier block
                         Type: block
                         Source: "block"
                    Literal, token: [no token] value: 2
                       Type: int_const 2
                       Source: "2"
                Identifier now
                   Type: uint256
                   Source: "now"
            Literal, token: [no token] value: 100
               Type: int_const 100
               Source: "100"
          Identifier probability
             Type: uint256
             Source: "probability"
        Block
           Source: "{\n            // Make the new kitten!\n            address owner = childOwner[_matronId];\n            kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);\n        }"
          VariableDeclarationStatement
             Gas costs: 331
             Source: "address owner = childOwner[_matronId]"
            VariableDeclaration "owner"
               Type: address
               Source: "address owner"
              ElementaryTypeName address
                 Source: "address"
            IndexAccess
               Type: address
               Source: "childOwner[_matronId]"
              Identifier childOwner
                 Type: mapping(uint256 => address)
                 Source: "childOwner"
              Identifier _matronId
                 Type: uint256
                 Source: "_matronId"
          ExpressionStatement
             Gas costs: 345
             Source: "kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner)"
            Assignment using operator =
               Type: uint256
               Source: "kittenId = _createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner)"
              Identifier kittenId
                 Type: uint256
                 Source: "kittenId"
              FunctionCall
                 Type: uint256
                 Source: "_createPanda(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner)"
                Identifier _createPanda
                   Type: function (uint256,uint256,uint256,uint256[2] memory,address) returns (uint256)
                   Source: "_createPanda"
                Identifier _matronId
                   Type: uint256
                   Source: "_matronId"
                MemberAccess to member siringWithId
                   Type: uint32
                   Source: "matron.siringWithId"
                  Identifier matron
                     Type: struct PandaBase.Panda storage pointer
                     Source: "matron"
                BinaryOperation using operator +
                   Type: uint16
                   Source: "parentGen + 1"
                  Identifier parentGen
                     Type: uint16
                     Source: "parentGen"
                  Literal, token: [no token] value: 1
                     Type: int_const 1
                     Source: "1"
                Identifier childGenes
                   Type: uint256[2] memory
                   Source: "childGenes"
                Identifier owner
                   Type: address
                   Source: "owner"
        Block
           Source: "{\n            Abortion(pandaIndexToOwner[_matronId], _matronId, sireId);\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "Abortion(pandaIndexToOwner[_matronId], _matronId, sireId)"
            FunctionCall
               Type: tuple()
               Source: "Abortion(pandaIndexToOwner[_matronId], _matronId, sireId)"
              Identifier Abortion
                 Type: function (address,uint256,uint256)
                 Source: "Abortion"
              IndexAccess
                 Type: address
                 Source: "pandaIndexToOwner[_matronId]"
                Identifier pandaIndexToOwner
                   Type: mapping(uint256 => address)
                   Source: "pandaIndexToOwner"
                Identifier _matronId
                   Type: uint256
                   Source: "_matronId"
              Identifier _matronId
                 Type: uint256
                 Source: "_matronId"
              Identifier sireId
                 Type: uint256
                 Source: "sireId"
      ExpressionStatement
         Gas costs: 20298
         Source: "delete matron.siringWithId"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete matron.siringWithId"
          MemberAccess to member siringWithId
             Type: uint32
             Source: "matron.siringWithId"
            Identifier matron
               Type: struct PandaBase.Panda storage pointer
               Source: "matron"
      ExpressionStatement
         Gas costs: 20240
         Source: "pregnantPandas--"
        UnaryOperation (postfix) --
           Type: uint256
           Source: "pregnantPandas--"
          Identifier pregnantPandas
             Type: uint256
             Source: "pregnantPandas"
      ExpressionStatement
         Gas costs: [???]
         Source: "msg.sender.send(autoBirthFee)"
        FunctionCall
           Type: bool
           Source: "msg.sender.send(autoBirthFee)"
          MemberAccess to member send
             Type: function (uint256) returns (bool)
             Source: "msg.sender.send"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier autoBirthFee
             Type: uint256
             Source: "autoBirthFee"
      ExpressionStatement
         Gas costs: 20320
         Source: "delete childOwner[_matronId]"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete childOwner[_matronId]"
          IndexAccess
             Type: address
             Source: "childOwner[_matronId]"
            Identifier childOwner
               Type: mapping(uint256 => address)
               Source: "childOwner"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
      Return
         Gas costs: 8
         Source: "return kittenId"
        Identifier kittenId
           Type: uint256
           Source: "kittenId"
ContractDefinition "ClockAuctionBase"
   Source: "contract ClockAuctionBase {\n\n    // Represents an auction on an NFT\n    struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n        // is this auction for gen0 panda\n        uint64 isGen0;\n    }\n\n    // Reference to contract tracking NFT ownership\n    ERC721 public nonFungibleContract;\n\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\n    // Values 0-10,000 map to 0%-100%\n    uint256 public ownerCut;\n\n    // Map from token ID to their corresponding auction.\n    mapping (uint256 => Auction) tokenIdToAuction;\n\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\n    event AuctionCancelled(uint256 tokenId);\n\n    /// @dev Returns true if the claimant owns the token.\n    /// @param _claimant - Address claiming to own the token.\n    /// @param _tokenId - ID of token whose ownership to verify.\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }\n\n    /// @dev Escrows the NFT, assigning ownership to this contract.\n    /// Throws if the escrow fails.\n    /// @param _owner - Current owner address of token to escrow.\n    /// @param _tokenId - ID of token whose approval to verify.\n    function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }\n\n    /// @dev Transfers an NFT owned by this contract to another address.\n    /// Returns true if the transfer succeeds.\n    /// @param _receiver - Address to transfer NFT to.\n    /// @param _tokenId - ID of token to transfer.\n    function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    } \n\n    /// @dev Cancels an auction unconditionally.\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }\n\n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n\n\n\n    /// @dev Removes an auction from the list of open auctions.\n    /// @param _tokenId - ID of NFT on auction.\n    function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }\n\n    /// @dev Returns true if the NFT is on auction.\n    /// @param _auction - Auction to check.\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }\n\n    /// @dev Returns current price of an NFT on auction. Broken into two\n    ///  functions (this one, that computes the duration from the auction\n    ///  structure, and the other that does the price computation) so we\n    ///  can easily test that the price computation works correctly.\n    function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }\n\n    /// @dev Computes the current price of an auction. Factored out\n    ///  from _currentPrice so we can run extensive unit tests.\n    ///  When testing, make this function public and turn on\n    ///  `Current price computation` test suite.\n    function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }\n\n    /// @dev Computes owner's cut of a sale.\n    /// @param _price - Sale price of NFT.\n    function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }\n\n}"
  StructDefinition "Auction"
     Gas costs: 0
     Source: "struct Auction {\n        // Current owner of NFT\n        address seller;\n        // Price (in wei) at beginning of auction\n        uint128 startingPrice;\n        // Price (in wei) at end of auction\n        uint128 endingPrice;\n        // Duration (in seconds) of auction\n        uint64 duration;\n        // Time when auction started\n        // NOTE: 0 if this auction has been concluded\n        uint64 startedAt;\n        // is this auction for gen0 panda\n        uint64 isGen0;\n    }"
    VariableDeclaration "seller"
       Type: address
       Source: "address seller"
      ElementaryTypeName address
         Source: "address"
    VariableDeclaration "startingPrice"
       Type: uint128
       Source: "uint128 startingPrice"
      ElementaryTypeName uint128
         Source: "uint128"
    VariableDeclaration "endingPrice"
       Type: uint128
       Source: "uint128 endingPrice"
      ElementaryTypeName uint128
         Source: "uint128"
    VariableDeclaration "duration"
       Type: uint64
       Source: "uint64 duration"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "startedAt"
       Type: uint64
       Source: "uint64 startedAt"
      ElementaryTypeName uint64
         Source: "uint64"
    VariableDeclaration "isGen0"
       Type: uint64
       Source: "uint64 isGen0"
      ElementaryTypeName uint64
         Source: "uint64"
  VariableDeclaration "nonFungibleContract"
     Type: contract ERC721
     Gas costs: 0
     Source: "ERC721 public nonFungibleContract"
    UserDefinedTypeName "ERC721"
       Source: "ERC721"
  VariableDeclaration "ownerCut"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public ownerCut"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "tokenIdToAuction"
     Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
     Gas costs: 0
     Source: "mapping (uint256 => Auction) tokenIdToAuction"
    Mapping
       Source: "mapping (uint256 => Auction)"
      ElementaryTypeName uint256
         Source: "uint256"
      UserDefinedTypeName "Auction"
         Source: "Auction"
  EventDefinition "AuctionCreated"
     Gas costs: 0
     Source: "event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);"
    ParameterList
       Source: "(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration)"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "startingPrice"
         Type: uint256
         Source: "uint256 startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "endingPrice"
         Type: uint256
         Source: "uint256 endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "duration"
         Type: uint256
         Source: "uint256 duration"
        ElementaryTypeName uint256
           Source: "uint256"
  EventDefinition "AuctionSuccessful"
     Gas costs: 0
     Source: "event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);"
    ParameterList
       Source: "(uint256 tokenId, uint256 totalPrice, address winner)"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "totalPrice"
         Type: uint256
         Source: "uint256 totalPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "winner"
         Type: address
         Source: "address winner"
        ElementaryTypeName address
           Source: "address"
  EventDefinition "AuctionCancelled"
     Gas costs: 0
     Source: "event AuctionCancelled(uint256 tokenId);"
    ParameterList
       Source: "(uint256 tokenId)"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
  FunctionDefinition "_owns" - const
     Source: "function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _claimant, uint256 _tokenId)"
      VariableDeclaration "_claimant"
         Type: address
         Source: "address _claimant"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\n    }"
      Return
         Gas costs: 0
         Source: "return (nonFungibleContract.ownerOf(_tokenId) == _claimant)"
        TupleExpression
           Type: bool
           Source: "(nonFungibleContract.ownerOf(_tokenId) == _claimant)"
          BinaryOperation using operator ==
             Type: bool
             Source: "nonFungibleContract.ownerOf(_tokenId) == _claimant"
            FunctionCall
               Type: address
               Source: "nonFungibleContract.ownerOf(_tokenId)"
              MemberAccess to member ownerOf
                 Type: function (uint256) view external returns (address)
                 Source: "nonFungibleContract.ownerOf"
                Identifier nonFungibleContract
                   Type: contract ERC721
                   Source: "nonFungibleContract"
              Identifier _tokenId
                 Type: uint256
                 Source: "_tokenId"
            Identifier _claimant
               Type: address
               Source: "_claimant"
  FunctionDefinition "_escrow"
     Source: "function _escrow(address _owner, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _owner, uint256 _tokenId)"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // it will throw if transfer fails\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "nonFungibleContract.transferFrom(_owner, this, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "nonFungibleContract.transferFrom(_owner, this, _tokenId)"
          MemberAccess to member transferFrom
             Type: function (address,address,uint256) external
             Source: "nonFungibleContract.transferFrom"
            Identifier nonFungibleContract
               Type: contract ERC721
               Source: "nonFungibleContract"
          Identifier _owner
             Type: address
             Source: "_owner"
          Identifier this
             Type: contract ClockAuctionBase
             Source: "this"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "_transfer"
     Source: "function _transfer(address _receiver, uint256 _tokenId) internal {\n        // it will throw if transfer fails\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _receiver, uint256 _tokenId)"
      VariableDeclaration "_receiver"
         Type: address
         Source: "address _receiver"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // it will throw if transfer fails\n        nonFungibleContract.transfer(_receiver, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "nonFungibleContract.transfer(_receiver, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "nonFungibleContract.transfer(_receiver, _tokenId)"
          MemberAccess to member transfer
             Type: function (address,uint256) external
             Source: "nonFungibleContract.transfer"
            Identifier nonFungibleContract
               Type: contract ERC721
               Source: "nonFungibleContract"
          Identifier _receiver
             Type: address
             Source: "_receiver"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "_addAuction"
     Source: "function _addAuction(uint256 _tokenId, Auction _auction) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId, Auction _auction)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_auction"
         Type: struct ClockAuctionBase.Auction memory
         Source: "Auction _auction"
        UserDefinedTypeName "Auction"
           Source: "Auction"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        );\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_auction.duration >= 1 minutes)"
        FunctionCall
           Type: tuple()
           Source: "require(_auction.duration >= 1 minutes)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "_auction.duration >= 1 minutes"
            MemberAccess to member duration
               Type: uint64
               Source: "_auction.duration"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
            Literal, token: [no token] value: 1
               Type: int_const 60
               Source: "1 minutes"
      ExpressionStatement
         Gas costs: 0
         Source: "tokenIdToAuction[_tokenId] = _auction"
        Assignment using operator =
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId] = _auction"
          IndexAccess
             Type: struct ClockAuctionBase.Auction storage ref
             Source: "tokenIdToAuction[_tokenId]"
            Identifier tokenIdToAuction
               Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
               Source: "tokenIdToAuction"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "_auction"
      ExpressionStatement
         Gas costs: 0
         Source: "AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        )"
        FunctionCall
           Type: tuple()
           Source: "AuctionCreated(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration)\n        )"
          Identifier AuctionCreated
             Type: function (uint256,uint256,uint256,uint256)
             Source: "AuctionCreated"
          FunctionCall
             Type: uint256
             Source: "uint256(_tokenId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          FunctionCall
             Type: uint256
             Source: "uint256(_auction.startingPrice)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member startingPrice
               Type: uint128
               Source: "_auction.startingPrice"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
          FunctionCall
             Type: uint256
             Source: "uint256(_auction.endingPrice)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member endingPrice
               Type: uint128
               Source: "_auction.endingPrice"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
          FunctionCall
             Type: uint256
             Source: "uint256(_auction.duration)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member duration
               Type: uint64
               Source: "_auction.duration"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
  FunctionDefinition "_cancelAuction"
     Source: "function _cancelAuction(uint256 _tokenId, address _seller) internal {\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId, address _seller)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_seller"
         Type: address
         Source: "address _seller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        _removeAuction(_tokenId);\n        _transfer(_seller, _tokenId);\n        AuctionCancelled(_tokenId);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "_removeAuction(_tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_removeAuction(_tokenId)"
          Identifier _removeAuction
             Type: function (uint256)
             Source: "_removeAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "_transfer(_seller, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(_seller, _tokenId)"
          Identifier _transfer
             Type: function (address,uint256)
             Source: "_transfer"
          Identifier _seller
             Type: address
             Source: "_seller"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "AuctionCancelled(_tokenId)"
        FunctionCall
           Type: tuple()
           Source: "AuctionCancelled(_tokenId)"
          Identifier AuctionCancelled
             Type: function (uint256)
             Source: "AuctionCancelled"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "_bid"
     Source: "function _bid(uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId, uint256 _bidAmount)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_bidAmount"
         Type: uint256
         Source: "uint256 _bidAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }\n\n        // Calculate any excess funds included with the bid. If the excess\n        // is anything worth worrying about, transfer it back to bidder.\n        // NOTE: We checked above that the bid amount is greater than or\n        // equal to the price so this cannot underflow.\n        uint256 bidExcess = _bidAmount - price;\n\n        // Return the funds. Similar to the previous transfer, this is\n        // not susceptible to a re-entry attack because the auction is\n        // removed before any transfers occur.\n        msg.sender.transfer(bidExcess);\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 price = _currentPrice(auction)"
        VariableDeclaration "price"
           Type: uint256
           Source: "uint256 price"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "_currentPrice(auction)"
          Identifier _currentPrice
             Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (uint256)
             Source: "_currentPrice"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_bidAmount >= price)"
        FunctionCall
           Type: tuple()
           Source: "require(_bidAmount >= price)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "_bidAmount >= price"
            Identifier _bidAmount
               Type: uint256
               Source: "_bidAmount"
            Identifier price
               Type: uint256
               Source: "price"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address seller = auction.seller"
        VariableDeclaration "seller"
           Type: address
           Source: "address seller"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member seller
           Type: address
           Source: "auction.seller"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "_removeAuction(_tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_removeAuction(_tokenId)"
          Identifier _removeAuction
             Type: function (uint256)
             Source: "_removeAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      IfStatement
         Source: "if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "price > 0"
          Identifier price
             Type: uint256
             Source: "price"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // NOTE: Doing a transfer() in the middle of a complex\n            // method like this is generally discouraged because of\n            // reentrancy attacks and DoS attacks if the seller is\n            // a contract with an invalid fallback function. We explicitly\n            // guard against reentrancy attacks by removing the auction\n            // before calling transfer(), and the only thing the seller\n            // can DoS is the sale of their own asset! (And if it's an\n            // accident, they can call cancelAuction(). )\n            seller.transfer(sellerProceeds);\n        }"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "uint256 auctioneerCut = _computeCut(price)"
            VariableDeclaration "auctioneerCut"
               Type: uint256
               Source: "uint256 auctioneerCut"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "_computeCut(price)"
              Identifier _computeCut
                 Type: function (uint256) view returns (uint256)
                 Source: "_computeCut"
              Identifier price
                 Type: uint256
                 Source: "price"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "uint256 sellerProceeds = price - auctioneerCut"
            VariableDeclaration "sellerProceeds"
               Type: uint256
               Source: "uint256 sellerProceeds"
              ElementaryTypeName uint256
                 Source: "uint256"
            BinaryOperation using operator -
               Type: uint256
               Source: "price - auctioneerCut"
              Identifier price
                 Type: uint256
                 Source: "price"
              Identifier auctioneerCut
                 Type: uint256
                 Source: "auctioneerCut"
          ExpressionStatement
             Gas costs: 0
             Source: "seller.transfer(sellerProceeds)"
            FunctionCall
               Type: tuple()
               Source: "seller.transfer(sellerProceeds)"
              MemberAccess to member transfer
                 Type: function (uint256)
                 Source: "seller.transfer"
                Identifier seller
                   Type: address
                   Source: "seller"
              Identifier sellerProceeds
                 Type: uint256
                 Source: "sellerProceeds"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 bidExcess = _bidAmount - price"
        VariableDeclaration "bidExcess"
           Type: uint256
           Source: "uint256 bidExcess"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator -
           Type: uint256
           Source: "_bidAmount - price"
          Identifier _bidAmount
             Type: uint256
             Source: "_bidAmount"
          Identifier price
             Type: uint256
             Source: "price"
      ExpressionStatement
         Gas costs: 0
         Source: "msg.sender.transfer(bidExcess)"
        FunctionCall
           Type: tuple()
           Source: "msg.sender.transfer(bidExcess)"
          MemberAccess to member transfer
             Type: function (uint256)
             Source: "msg.sender.transfer"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
          Identifier bidExcess
             Type: uint256
             Source: "bidExcess"
      ExpressionStatement
         Gas costs: 0
         Source: "AuctionSuccessful(_tokenId, price, msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "AuctionSuccessful(_tokenId, price, msg.sender)"
          Identifier AuctionSuccessful
             Type: function (uint256,uint256,address)
             Source: "AuctionSuccessful"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier price
             Type: uint256
             Source: "price"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      Return
         Gas costs: 0
         Source: "return price"
        Identifier price
           Type: uint256
           Source: "price"
  FunctionDefinition "_removeAuction"
     Source: "function _removeAuction(uint256 _tokenId) internal {\n        delete tokenIdToAuction[_tokenId];\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        delete tokenIdToAuction[_tokenId];\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "delete tokenIdToAuction[_tokenId]"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete tokenIdToAuction[_tokenId]"
          IndexAccess
             Type: struct ClockAuctionBase.Auction storage ref
             Source: "tokenIdToAuction[_tokenId]"
            Identifier tokenIdToAuction
               Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
               Source: "tokenIdToAuction"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
  FunctionDefinition "_isOnAuction" - const
     Source: "function _isOnAuction(Auction storage _auction) internal view returns (bool) {\n        return (_auction.startedAt > 0);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(Auction storage _auction)"
      VariableDeclaration "_auction"
         Type: struct ClockAuctionBase.Auction storage pointer
         Source: "Auction storage _auction"
        UserDefinedTypeName "Auction"
           Source: "Auction"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        return (_auction.startedAt > 0);\n    }"
      Return
         Gas costs: 0
         Source: "return (_auction.startedAt > 0)"
        TupleExpression
           Type: bool
           Source: "(_auction.startedAt > 0)"
          BinaryOperation using operator >
             Type: bool
             Source: "_auction.startedAt > 0"
            MemberAccess to member startedAt
               Type: uint64
               Source: "_auction.startedAt"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction storage pointer
                 Source: "_auction"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
  FunctionDefinition "_currentPrice" - const
     Source: "function _currentPrice(Auction storage _auction)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(Auction storage _auction)"
      VariableDeclaration "_auction"
         Type: struct ClockAuctionBase.Auction storage pointer
         Source: "Auction storage _auction"
        UserDefinedTypeName "Auction"
           Source: "Auction"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        uint256 secondsPassed = 0;\n\n        // A bit of insurance against negative values (or wraparound).\n        // Probably not necessary (since Ethereum guarnatees that the\n        // now variable doesn't ever go backwards).\n        if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }\n\n        return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        );\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 secondsPassed = 0"
        VariableDeclaration "secondsPassed"
           Type: uint256
           Source: "uint256 secondsPassed"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      IfStatement
         Source: "if (now > _auction.startedAt) {\n            secondsPassed = now - _auction.startedAt;\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "now > _auction.startedAt"
          Identifier now
             Type: uint256
             Source: "now"
          MemberAccess to member startedAt
             Type: uint64
             Source: "_auction.startedAt"
            Identifier _auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "_auction"
        Block
           Source: "{\n            secondsPassed = now - _auction.startedAt;\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "secondsPassed = now - _auction.startedAt"
            Assignment using operator =
               Type: uint256
               Source: "secondsPassed = now - _auction.startedAt"
              Identifier secondsPassed
                 Type: uint256
                 Source: "secondsPassed"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "now - _auction.startedAt"
                Identifier now
                   Type: uint256
                   Source: "now"
                MemberAccess to member startedAt
                   Type: uint64
                   Source: "_auction.startedAt"
                  Identifier _auction
                     Type: struct ClockAuctionBase.Auction storage pointer
                     Source: "_auction"
      Return
         Gas costs: 0
         Source: "return _computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        )"
        FunctionCall
           Type: uint256
           Source: "_computeCurrentPrice(\n            _auction.startingPrice,\n            _auction.endingPrice,\n            _auction.duration,\n            secondsPassed\n        )"
          Identifier _computeCurrentPrice
             Type: function (uint256,uint256,uint256,uint256) pure returns (uint256)
             Source: "_computeCurrentPrice"
          MemberAccess to member startingPrice
             Type: uint128
             Source: "_auction.startingPrice"
            Identifier _auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "_auction"
          MemberAccess to member endingPrice
             Type: uint128
             Source: "_auction.endingPrice"
            Identifier _auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "_auction"
          MemberAccess to member duration
             Type: uint64
             Source: "_auction.duration"
            Identifier _auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "_auction"
          Identifier secondsPassed
             Type: uint256
             Source: "secondsPassed"
  FunctionDefinition "_computeCurrentPrice"
     Source: "function _computeCurrentPrice(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        uint256 _secondsPassed\n    )"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_secondsPassed"
         Type: uint256
         Source: "uint256 _secondsPassed"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our public functions carefully cap the maximum values for\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\n        //  also known to be non-zero (see the require() statement in\n        //  _addAuction())\n        if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }\n    }"
      IfStatement
         Source: "if (_secondsPassed >= _duration) {\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        } else {\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }"
        BinaryOperation using operator >=
           Type: bool
           Gas costs: 0
           Source: "_secondsPassed >= _duration"
          Identifier _secondsPassed
             Type: uint256
             Source: "_secondsPassed"
          Identifier _duration
             Type: uint256
             Source: "_duration"
        Block
           Source: "{\n            // We've reached the end of the dynamic pricing portion\n            // of the auction, just return the end price.\n            return _endingPrice;\n        }"
          Return
             Gas costs: 0
             Source: "return _endingPrice"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
        Block
           Source: "{\n            // Starting price can be higher than ending price (and often is!), so\n            // this delta can be negative.\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n\n            // This multiplication can't overflow, _secondsPassed will easily fit within\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\n            // will always fit within 256-bits.\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n\n            // currentPriceChange can be negative, but if so, will have a magnitude\n            // less that _startingPrice. Thus, this result will always end up positive.\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n\n            return uint256(currentPrice);\n        }"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice)"
            VariableDeclaration "totalPriceChange"
               Type: int256
               Source: "int256 totalPriceChange"
              ElementaryTypeName int256
                 Source: "int256"
            BinaryOperation using operator -
               Type: int256
               Source: "int256(_endingPrice) - int256(_startingPrice)"
              FunctionCall
                 Type: int256
                 Source: "int256(_endingPrice)"
                ElementaryTypeNameExpression int256
                   Type: type(int256)
                   Source: "int256"
                Identifier _endingPrice
                   Type: uint256
                   Source: "_endingPrice"
              FunctionCall
                 Type: int256
                 Source: "int256(_startingPrice)"
                ElementaryTypeNameExpression int256
                   Type: type(int256)
                   Source: "int256"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration)"
            VariableDeclaration "currentPriceChange"
               Type: int256
               Source: "int256 currentPriceChange"
              ElementaryTypeName int256
                 Source: "int256"
            BinaryOperation using operator /
               Type: int256
               Source: "totalPriceChange * int256(_secondsPassed) / int256(_duration)"
              BinaryOperation using operator *
                 Type: int256
                 Source: "totalPriceChange * int256(_secondsPassed)"
                Identifier totalPriceChange
                   Type: int256
                   Source: "totalPriceChange"
                FunctionCall
                   Type: int256
                   Source: "int256(_secondsPassed)"
                  ElementaryTypeNameExpression int256
                     Type: type(int256)
                     Source: "int256"
                  Identifier _secondsPassed
                     Type: uint256
                     Source: "_secondsPassed"
              FunctionCall
                 Type: int256
                 Source: "int256(_duration)"
                ElementaryTypeNameExpression int256
                   Type: type(int256)
                   Source: "int256"
                Identifier _duration
                   Type: uint256
                   Source: "_duration"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "int256 currentPrice = int256(_startingPrice) + currentPriceChange"
            VariableDeclaration "currentPrice"
               Type: int256
               Source: "int256 currentPrice"
              ElementaryTypeName int256
                 Source: "int256"
            BinaryOperation using operator +
               Type: int256
               Source: "int256(_startingPrice) + currentPriceChange"
              FunctionCall
                 Type: int256
                 Source: "int256(_startingPrice)"
                ElementaryTypeNameExpression int256
                   Type: type(int256)
                   Source: "int256"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
              Identifier currentPriceChange
                 Type: int256
                 Source: "currentPriceChange"
          Return
             Gas costs: 0
             Source: "return uint256(currentPrice)"
            FunctionCall
               Type: uint256
               Source: "uint256(currentPrice)"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              Identifier currentPrice
                 Type: int256
                 Source: "currentPrice"
  FunctionDefinition "_computeCut" - const
     Source: "function _computeCut(uint256 _price) internal view returns (uint256) {\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _price)"
      VariableDeclaration "_price"
         Type: uint256
         Source: "uint256 _price"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        // NOTE: We don't use SafeMath (or similar) in this function because\n        //  all of our entry functions carefully cap the maximum values for\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\n        //  statement in the ClockAuction constructor). The result of this\n        //  function is always guaranteed to be <= _price.\n        return _price * ownerCut / 10000;\n    }"
      Return
         Gas costs: 0
         Source: "return _price * ownerCut / 10000"
        BinaryOperation using operator /
           Type: uint256
           Source: "_price * ownerCut / 10000"
          BinaryOperation using operator *
             Type: uint256
             Source: "_price * ownerCut"
            Identifier _price
               Type: uint256
               Source: "_price"
            Identifier ownerCut
               Type: uint256
               Source: "ownerCut"
          Literal, token: [no token] value: 10000
             Type: int_const 10000
             Source: "10000"
ContractDefinition "Pausable"
   Source: "contract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Ownable"
    UserDefinedTypeName "Ownable"
       Source: "Ownable"
  EventDefinition "Pause"
     Gas costs: 0
     Source: "event Pause();"
    ParameterList
       Source: "()"
  EventDefinition "Unpause"
     Gas costs: 0
     Source: "event Unpause();"
    ParameterList
       Source: "()"
  VariableDeclaration "paused"
     Type: bool
     Gas costs: 0
     Source: "bool public paused = false"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: false value: false
       Type: bool
       Source: "false"
  ModifierDefinition "whenNotPaused"
     Source: "modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    Block
       Source: "{\n    require(!paused);\n    _;\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(!paused)"
        FunctionCall
           Type: tuple()
           Source: "require(!paused)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!paused"
            Identifier paused
               Type: bool
               Source: "paused"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  ModifierDefinition "whenPaused"
     Source: "modifier whenPaused {\n    require(paused);\n    _;\n  }"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n    require(paused);\n    _;\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(paused)"
        FunctionCall
           Type: tuple()
           Source: "require(paused)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          Identifier paused
             Type: bool
             Source: "paused"
      PlaceholderStatement
         Gas costs: 0
         Source: "_"
  FunctionDefinition "pause" - public
     Source: "function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    Pause();\n    return true;\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n    paused = true;\n    Pause();\n    return true;\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "paused = true"
        Assignment using operator =
           Type: bool
           Source: "paused = true"
          Identifier paused
             Type: bool
             Source: "paused"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "Pause()"
        FunctionCall
           Type: tuple()
           Source: "Pause()"
          Identifier Pause
             Type: function ()
             Source: "Pause"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
  FunctionDefinition "unpause" - public
     Source: "function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    Unpause();\n    return true;\n  }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(bool)"
      VariableDeclaration ""
         Type: bool
         Source: "bool"
        ElementaryTypeName bool
           Source: "bool"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    ModifierInvocation "whenPaused"
       Gas costs: 0
       Source: "whenPaused"
      Identifier whenPaused
         Type: modifier ()
         Source: "whenPaused"
    Block
       Source: "{\n    paused = false;\n    Unpause();\n    return true;\n  }"
      ExpressionStatement
         Gas costs: 0
         Source: "paused = false"
        Assignment using operator =
           Type: bool
           Source: "paused = false"
          Identifier paused
             Type: bool
             Source: "paused"
          Literal, token: false value: false
             Type: bool
             Source: "false"
      ExpressionStatement
         Gas costs: 0
         Source: "Unpause()"
        FunctionCall
           Type: tuple()
           Source: "Unpause()"
          Identifier Unpause
             Type: function ()
             Source: "Unpause"
      Return
         Gas costs: 0
         Source: "return true"
        Literal, token: true value: true
           Type: bool
           Source: "true"
ContractDefinition "ClockAuction"
   Source: "contract ClockAuction is Pausable, ClockAuctionBase {\n\n    /// @dev The ERC-165 interface signature for ERC-721.\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\n\n    /// @dev Constructor creates a reference to the NFT ownership contract\n    ///  and verifies the owner cut is in the valid range.\n    /// @param _nftAddress - address of a deployed contract implementing\n    ///  the Nonfungible Interface.\n    /// @param _cut - percent cut the owner takes on each auction, must be\n    ///  between 0-10,000.\n    function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }\n\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\n    ///  as well as any Ether sent directly to the contract address.\n    ///  Always transfers to the NFT contract, but can be called either by\n    ///  the owner or the NFT contract.\n    function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        // We are using this boolean method to make sure that even if one fails it will still work\n        // <yes> <report> UNCHECKED_LL_CALLS\n        bool res = nftAddress.send(this.balance);\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of time to move between starting\n    ///  price and ending price (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Bids on an open auction, completing the auction and transferring\n    ///  ownership of the NFT if enough Ether is supplied.\n    /// @param _tokenId - ID of token to bid on.\n    function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }\n\n    /// @dev Cancels an auction that hasn't been won yet.\n    ///  Returns the NFT to original owner.\n    /// @notice This is a state-modifying function that can\n    ///  be called while the contract is paused.\n    /// @param _tokenId - ID of token on auction\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }\n\n    /// @dev Cancels an auction when the contract is paused.\n    ///  Only the owner may do this, and NFTs are returned to\n    ///  the seller. This should only be used in emergencies.\n    /// @param _tokenId - ID of the NFT on auction to cancel.\n    function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }\n\n    /// @dev Returns auction info for an NFT on auction.\n    /// @param _tokenId - ID of NFT on auction.\n    function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }\n\n    /// @dev Returns the current price of an auction.\n    /// @param _tokenId - ID of the token price we are checking.\n    function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }\n\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "Pausable"
    UserDefinedTypeName "Pausable"
       Source: "Pausable"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ClockAuctionBase"
    UserDefinedTypeName "ClockAuctionBase"
       Source: "ClockAuctionBase"
  VariableDeclaration "InterfaceSignature_ERC721"
     Type: bytes4
     Gas costs: 0
     Source: "bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d)"
    ElementaryTypeName bytes4
       Source: "bytes4"
    FunctionCall
       Type: bytes4
       Source: "bytes4(0x9a20483d)"
      ElementaryTypeNameExpression bytes4
         Type: type(bytes4)
         Source: "bytes4"
      Literal, token: [no token] value: 0x9a20483d
         Type: int_const 2585806909
         Source: "0x9a20483d"
  FunctionDefinition "ClockAuction" - public
     Source: "function ClockAuction(address _nftAddress, uint256 _cut) public {\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _nftAddress, uint256 _cut)"
      VariableDeclaration "_nftAddress"
         Type: address
         Source: "address _nftAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_cut"
         Type: uint256
         Source: "uint256 _cut"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(_cut <= 10000);\n        ownerCut = _cut;\n\n        ERC721 candidateContract = ERC721(_nftAddress);\n        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\n        nonFungibleContract = candidateContract;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_cut <= 10000)"
        FunctionCall
           Type: tuple()
           Source: "require(_cut <= 10000)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator <=
             Type: bool
             Source: "_cut <= 10000"
            Identifier _cut
               Type: uint256
               Source: "_cut"
            Literal, token: [no token] value: 10000
               Type: int_const 10000
               Source: "10000"
      ExpressionStatement
         Gas costs: 0
         Source: "ownerCut = _cut"
        Assignment using operator =
           Type: uint256
           Source: "ownerCut = _cut"
          Identifier ownerCut
             Type: uint256
             Source: "ownerCut"
          Identifier _cut
             Type: uint256
             Source: "_cut"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "ERC721 candidateContract = ERC721(_nftAddress)"
        VariableDeclaration "candidateContract"
           Type: contract ERC721
           Source: "ERC721 candidateContract"
          UserDefinedTypeName "ERC721"
             Source: "ERC721"
        FunctionCall
           Type: contract ERC721
           Source: "ERC721(_nftAddress)"
          Identifier ERC721
             Type: type(contract ERC721)
             Source: "ERC721"
          Identifier _nftAddress
             Type: address
             Source: "_nftAddress"
      ExpressionStatement
         Gas costs: 0
         Source: "require(candidateContract.supportsInterface(InterfaceSignature_ERC721))"
        FunctionCall
           Type: tuple()
           Source: "require(candidateContract.supportsInterface(InterfaceSignature_ERC721))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "candidateContract.supportsInterface(InterfaceSignature_ERC721)"
            MemberAccess to member supportsInterface
               Type: function (bytes4) view external returns (bool)
               Source: "candidateContract.supportsInterface"
              Identifier candidateContract
                 Type: contract ERC721
                 Source: "candidateContract"
            Identifier InterfaceSignature_ERC721
               Type: bytes4
               Source: "InterfaceSignature_ERC721"
      ExpressionStatement
         Gas costs: 0
         Source: "nonFungibleContract = candidateContract"
        Assignment using operator =
           Type: contract ERC721
           Source: "nonFungibleContract = candidateContract"
          Identifier nonFungibleContract
             Type: contract ERC721
             Source: "nonFungibleContract"
          Identifier candidateContract
             Type: contract ERC721
             Source: "candidateContract"
  FunctionDefinition "withdrawBalance" - public
     Source: "function withdrawBalance() external {\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        // We are using this boolean method to make sure that even if one fails it will still work\n        // <yes> <report> UNCHECKED_LL_CALLS\n        bool res = nftAddress.send(this.balance);\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        address nftAddress = address(nonFungibleContract);\n\n        require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        );\n        // We are using this boolean method to make sure that even if one fails it will still work\n        // <yes> <report> UNCHECKED_LL_CALLS\n        bool res = nftAddress.send(this.balance);\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address nftAddress = address(nonFungibleContract)"
        VariableDeclaration "nftAddress"
           Type: address
           Source: "address nftAddress"
          ElementaryTypeName address
             Source: "address"
        FunctionCall
           Type: address
           Source: "address(nonFungibleContract)"
          ElementaryTypeNameExpression address
             Type: type(address)
             Source: "address"
          Identifier nonFungibleContract
             Type: contract ERC721
             Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        )"
        FunctionCall
           Type: tuple()
           Source: "require(\n            msg.sender == owner ||\n            msg.sender == nftAddress\n        )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "msg.sender == owner ||\n            msg.sender == nftAddress"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == owner"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier owner
                 Type: address
                 Source: "owner"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == nftAddress"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier nftAddress
                 Type: address
                 Source: "nftAddress"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bool res = nftAddress.send(this.balance)"
        VariableDeclaration "res"
           Type: bool
           Source: "bool res"
          ElementaryTypeName bool
             Source: "bool"
        FunctionCall
           Type: bool
           Source: "nftAddress.send(this.balance)"
          MemberAccess to member send
             Type: function (uint256) returns (bool)
             Source: "nftAddress.send"
            Identifier nftAddress
               Type: address
               Source: "nftAddress"
          MemberAccess to member balance
             Type: uint256
             Source: "this.balance"
            Identifier this
               Type: contract ClockAuction
               Source: "this"
  FunctionDefinition "createAuction" - public
     Source: "function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n        whenNotPaused\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_seller"
         Type: address
         Source: "address _seller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(_owns(msg.sender, _tokenId));\n        _escrow(msg.sender, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_startingPrice == uint256(uint128(_startingPrice))"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_startingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_startingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_endingPrice == uint256(uint128(_endingPrice))"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_endingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_endingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _endingPrice
                   Type: uint256
                   Source: "_endingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_duration == uint256(uint64(_duration)))"
        FunctionCall
           Type: tuple()
           Source: "require(_duration == uint256(uint64(_duration)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_duration == uint256(uint64(_duration))"
            Identifier _duration
               Type: uint256
               Source: "_duration"
            FunctionCall
               Type: uint256
               Source: "uint256(uint64(_duration))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint64
                 Source: "uint64(_duration)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier _duration
                   Type: uint256
                   Source: "_duration"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_owns(msg.sender, _tokenId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _tokenId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _tokenId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "_escrow(msg.sender, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_escrow(msg.sender, _tokenId)"
          Identifier _escrow
             Type: function (address,uint256)
             Source: "_escrow"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction memory auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        FunctionCall
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
          Identifier Auction
             Type: type(struct ClockAuctionBase.Auction storage pointer)
             Source: "Auction"
          Identifier _seller
             Type: address
             Source: "_seller"
          FunctionCall
             Type: uint128
             Source: "uint128(_startingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
          FunctionCall
             Type: uint128
             Source: "uint128(_endingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
          FunctionCall
             Type: uint64
             Source: "uint64(_duration)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier _duration
               Type: uint256
               Source: "_duration"
          FunctionCall
             Type: uint64
             Source: "uint64(now)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier now
               Type: uint256
               Source: "now"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "_addAuction(_tokenId, auction)"
        FunctionCall
           Type: tuple()
           Source: "_addAuction(_tokenId, auction)"
          Identifier _addAuction
             Type: function (uint256,struct ClockAuctionBase.Auction memory)
             Source: "_addAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "auction"
  FunctionDefinition "bid" - public
     Source: "function bid(uint256 _tokenId)\n        external\n        payable\n        whenNotPaused\n    {\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // _bid will throw if the bid or funds transfer fails\n        _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "_bid(_tokenId, msg.value)"
        FunctionCall
           Type: uint256
           Source: "_bid(_tokenId, msg.value)"
          Identifier _bid
             Type: function (uint256,uint256) returns (uint256)
             Source: "_bid"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "_transfer(msg.sender, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(msg.sender, _tokenId)"
          Identifier _transfer
             Type: function (address,uint256)
             Source: "_transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
  FunctionDefinition "cancelAuction" - public
     Source: "function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address seller = auction.seller"
        VariableDeclaration "seller"
           Type: address
           Source: "address seller"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member seller
           Type: address
           Source: "auction.seller"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == seller)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == seller)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == seller"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier seller
               Type: address
               Source: "seller"
      ExpressionStatement
         Gas costs: 0
         Source: "_cancelAuction(_tokenId, seller)"
        FunctionCall
           Type: tuple()
           Source: "_cancelAuction(_tokenId, seller)"
          Identifier _cancelAuction
             Type: function (uint256,address)
             Source: "_cancelAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier seller
             Type: address
             Source: "seller"
  FunctionDefinition "cancelAuctionWhenPaused" - public
     Source: "function cancelAuctionWhenPaused(uint256 _tokenId)\n        whenPaused\n        onlyOwner\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenPaused"
       Gas costs: 0
       Source: "whenPaused"
      Identifier whenPaused
         Type: modifier ()
         Source: "whenPaused"
    ModifierInvocation "onlyOwner"
       Gas costs: 0
       Source: "onlyOwner"
      Identifier onlyOwner
         Type: modifier ()
         Source: "onlyOwner"
    Block
       Source: "{\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        _cancelAuction(_tokenId, auction.seller);\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "_cancelAuction(_tokenId, auction.seller)"
        FunctionCall
           Type: tuple()
           Source: "_cancelAuction(_tokenId, auction.seller)"
          Identifier _cancelAuction
             Type: function (uint256,address)
             Source: "_cancelAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          MemberAccess to member seller
             Type: address
             Source: "auction.seller"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
  FunctionDefinition "getAuction" - public - const
     Source: "function getAuction(uint256 _tokenId)\n        external\n        view\n        returns\n    (\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    ) {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(\n        address seller,\n        uint256 startingPrice,\n        uint256 endingPrice,\n        uint256 duration,\n        uint256 startedAt\n    )"
      VariableDeclaration "seller"
         Type: address
         Source: "address seller"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "startingPrice"
         Type: uint256
         Source: "uint256 startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "endingPrice"
         Type: uint256
         Source: "uint256 endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "duration"
         Type: uint256
         Source: "uint256 duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "startedAt"
         Type: uint256
         Source: "uint256 startedAt"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        );\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      Return
         Gas costs: 0
         Source: "return (\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        )"
        TupleExpression
           Type: tuple(address,uint128,uint128,uint64,uint64)
           Source: "(\n            auction.seller,\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            auction.startedAt\n        )"
          MemberAccess to member seller
             Type: address
             Source: "auction.seller"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
          MemberAccess to member startingPrice
             Type: uint128
             Source: "auction.startingPrice"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
          MemberAccess to member endingPrice
             Type: uint128
             Source: "auction.endingPrice"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
          MemberAccess to member duration
             Type: uint64
             Source: "auction.duration"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
          MemberAccess to member startedAt
             Type: uint64
             Source: "auction.startedAt"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
  FunctionDefinition "getCurrentPrice" - public - const
     Source: "function getCurrentPrice(uint256 _tokenId)\n        external\n        view\n        returns (uint256)\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        return _currentPrice(auction);\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      Return
         Gas costs: 0
         Source: "return _currentPrice(auction)"
        FunctionCall
           Type: uint256
           Source: "_currentPrice(auction)"
          Identifier _currentPrice
             Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (uint256)
             Source: "_currentPrice"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
ContractDefinition "SiringClockAuction"
   Source: "contract SiringClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSiringAuctionAddress() call.\n    bool public isSiringClockAuction = true;\n\n    // Delegate constructor\n    function SiringClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    /// @dev Creates and begins a new auction. Since this function is wrapped,\n    /// require sender to be PandaCore contract.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    /// @dev Places a bid for siring. Requires the sender\n    /// is the PandaCore contract because all bid methods\n    /// should be wrapped. Also returns the panda to the\n    /// seller rather than the winner.\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        // _bid checks that token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value);\n        // We transfer the panda back to the seller, the winner will get\n        // the offspring\n        _transfer(seller, _tokenId);\n    }\n\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ClockAuction"
    UserDefinedTypeName "ClockAuction"
       Source: "ClockAuction"
  VariableDeclaration "isSiringClockAuction"
     Type: bool
     Gas costs: 0
     Source: "bool public isSiringClockAuction = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  FunctionDefinition "SiringClockAuction" - public
     Source: "function SiringClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}"
    ParameterList
       Gas costs: 0
       Source: "(address _nftAddr, uint256 _cut)"
      VariableDeclaration "_nftAddr"
         Type: address
         Source: "address _nftAddr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_cut"
         Type: uint256
         Source: "uint256 _cut"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "ClockAuction"
       Gas costs: 0
       Source: "ClockAuction(_nftAddr, _cut)"
      Identifier ClockAuction
         Type: type(contract ClockAuction)
         Source: "ClockAuction"
      Identifier _nftAddr
         Type: address
         Source: "_nftAddr"
      Identifier _cut
         Type: uint256
         Source: "_cut"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "createAuction" - public
     Source: "function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_seller"
         Type: address
         Source: "address _seller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_startingPrice == uint256(uint128(_startingPrice))"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_startingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_startingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_endingPrice == uint256(uint128(_endingPrice))"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_endingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_endingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _endingPrice
                   Type: uint256
                   Source: "_endingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_duration == uint256(uint64(_duration)))"
        FunctionCall
           Type: tuple()
           Source: "require(_duration == uint256(uint64(_duration)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_duration == uint256(uint64(_duration))"
            Identifier _duration
               Type: uint256
               Source: "_duration"
            FunctionCall
               Type: uint256
               Source: "uint256(uint64(_duration))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint64
                 Source: "uint64(_duration)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier _duration
                   Type: uint256
                   Source: "_duration"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "_escrow(_seller, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_escrow(_seller, _tokenId)"
          Identifier _escrow
             Type: function (address,uint256)
             Source: "_escrow"
          Identifier _seller
             Type: address
             Source: "_seller"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction memory auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        FunctionCall
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
          Identifier Auction
             Type: type(struct ClockAuctionBase.Auction storage pointer)
             Source: "Auction"
          Identifier _seller
             Type: address
             Source: "_seller"
          FunctionCall
             Type: uint128
             Source: "uint128(_startingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
          FunctionCall
             Type: uint128
             Source: "uint128(_endingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
          FunctionCall
             Type: uint64
             Source: "uint64(_duration)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier _duration
               Type: uint256
               Source: "_duration"
          FunctionCall
             Type: uint64
             Source: "uint64(now)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier now
               Type: uint256
               Source: "now"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "_addAuction(_tokenId, auction)"
        FunctionCall
           Type: tuple()
           Source: "_addAuction(_tokenId, auction)"
          Identifier _addAuction
             Type: function (uint256,struct ClockAuctionBase.Auction memory)
             Source: "_addAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "auction"
  FunctionDefinition "bid" - public
     Source: "function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        // _bid checks that token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value);\n        // We transfer the panda back to the seller, the winner will get\n        // the offspring\n        _transfer(seller, _tokenId);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(msg.sender == address(nonFungibleContract));\n        address seller = tokenIdToAuction[_tokenId].seller;\n        // _bid checks that token ID is valid and will throw if bid fails\n        _bid(_tokenId, msg.value);\n        // We transfer the panda back to the seller, the winner will get\n        // the offspring\n        _transfer(seller, _tokenId);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address seller = tokenIdToAuction[_tokenId].seller"
        VariableDeclaration "seller"
           Type: address
           Source: "address seller"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member seller
           Type: address
           Source: "tokenIdToAuction[_tokenId].seller"
          IndexAccess
             Type: struct ClockAuctionBase.Auction storage ref
             Source: "tokenIdToAuction[_tokenId]"
            Identifier tokenIdToAuction
               Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
               Source: "tokenIdToAuction"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "_bid(_tokenId, msg.value)"
        FunctionCall
           Type: uint256
           Source: "_bid(_tokenId, msg.value)"
          Identifier _bid
             Type: function (uint256,uint256) returns (uint256)
             Source: "_bid"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "_transfer(seller, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(seller, _tokenId)"
          Identifier _transfer
             Type: function (address,uint256)
             Source: "_transfer"
          Identifier seller
             Type: address
             Source: "seller"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
ContractDefinition "SaleClockAuction"
   Source: "contract SaleClockAuction is ClockAuction {\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSaleAuctionAddress() call.\n    bool public isSaleClockAuction = true;\n\n    // Tracks last 5 sale price of gen0 panda sales\n    uint256 public gen0SaleCount;\n    uint256[5] public lastGen0SalePrices;\n    uint256 public constant SurpriseValue = 10 finney;\n\n    uint256[] CommonPanda;\n    uint256[] RarePanda;\n    uint256   CommonPandaIndex;\n    uint256   RarePandaIndex;\n\n    // Delegate constructor\n    function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {\n            CommonPandaIndex = 1;\n            RarePandaIndex   = 1;\n    }\n\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }\n\n    function createGen0Auction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        );\n        _addAuction(_tokenId, auction);\n    }    \n\n    /// @dev Updates lastSalePrice if seller is the nft contract\n    /// Otherwise, works the same as default bid method.\n    function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        // _bid verifies token ID size\n        uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If not a gen0 auction, exit\n        if (isGen0 == 1) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }\n\n    function createPanda(uint256 _tokenId,uint256 _type)\n        external\n    {\n        require(msg.sender == address(nonFungibleContract));\n        if (_type == 0) {\n            CommonPanda.push(_tokenId);\n        }else {\n            RarePanda.push(_tokenId);\n        }\n    }\n\n    function surprisePanda()\n        external\n        payable\n    {\n        bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1));\n        uint256 PandaIndex;\n        if (bHash[25] > 0xC8) {\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n\n        } else{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }\n        _transfer(msg.sender,PandaIndex);\n    }\n\n    function packageCount() external view returns(uint256 common,uint256 surprise) {\n        common   = CommonPanda.length + 1 - CommonPandaIndex;\n        surprise = RarePanda.length + 1 - RarePandaIndex;\n    }\n\n    function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }\n\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ClockAuction"
    UserDefinedTypeName "ClockAuction"
       Source: "ClockAuction"
  VariableDeclaration "isSaleClockAuction"
     Type: bool
     Gas costs: 0
     Source: "bool public isSaleClockAuction = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "gen0SaleCount"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public gen0SaleCount"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "lastGen0SalePrices"
     Type: uint256[5] storage ref
     Gas costs: 0
     Source: "uint256[5] public lastGen0SalePrices"
    ArrayTypeName
       Source: "uint256[5]"
      ElementaryTypeName uint256
         Source: "uint256"
      Literal, token: [no token] value: 5
         Type unknown.
         Source: "5"
  VariableDeclaration "SurpriseValue"
     Type: uint256
     Gas costs: 0
     Source: "uint256 public constant SurpriseValue = 10 finney"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10
       Type: int_const 10000000000000000
       Source: "10 finney"
  VariableDeclaration "CommonPanda"
     Type: uint256[] storage ref
     Gas costs: 0
     Source: "uint256[] CommonPanda"
    ArrayTypeName
       Source: "uint256[]"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "RarePanda"
     Type: uint256[] storage ref
     Gas costs: 0
     Source: "uint256[] RarePanda"
    ArrayTypeName
       Source: "uint256[]"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "CommonPandaIndex"
     Type: uint256
     Gas costs: 0
     Source: "uint256   CommonPandaIndex"
    ElementaryTypeName uint256
       Source: "uint256"
  VariableDeclaration "RarePandaIndex"
     Type: uint256
     Gas costs: 0
     Source: "uint256   RarePandaIndex"
    ElementaryTypeName uint256
       Source: "uint256"
  FunctionDefinition "SaleClockAuction" - public
     Source: "function SaleClockAuction(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {\n            CommonPandaIndex = 1;\n            RarePandaIndex   = 1;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _nftAddr, uint256 _cut)"
      VariableDeclaration "_nftAddr"
         Type: address
         Source: "address _nftAddr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_cut"
         Type: uint256
         Source: "uint256 _cut"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "ClockAuction"
       Gas costs: 0
       Source: "ClockAuction(_nftAddr, _cut)"
      Identifier ClockAuction
         Type: type(contract ClockAuction)
         Source: "ClockAuction"
      Identifier _nftAddr
         Type: address
         Source: "_nftAddr"
      Identifier _cut
         Type: uint256
         Source: "_cut"
    Block
       Source: "{\n            CommonPandaIndex = 1;\n            RarePandaIndex   = 1;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "CommonPandaIndex = 1"
        Assignment using operator =
           Type: uint256
           Source: "CommonPandaIndex = 1"
          Identifier CommonPandaIndex
             Type: uint256
             Source: "CommonPandaIndex"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Gas costs: 0
         Source: "RarePandaIndex   = 1"
        Assignment using operator =
           Type: uint256
           Source: "RarePandaIndex   = 1"
          Identifier RarePandaIndex
             Type: uint256
             Source: "RarePandaIndex"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
  FunctionDefinition "createAuction" - public
     Source: "function createAuction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_seller"
         Type: address
         Source: "address _seller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuction(_tokenId, auction);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_startingPrice == uint256(uint128(_startingPrice))"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_startingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_startingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_endingPrice == uint256(uint128(_endingPrice))"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_endingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_endingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _endingPrice
                   Type: uint256
                   Source: "_endingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_duration == uint256(uint64(_duration)))"
        FunctionCall
           Type: tuple()
           Source: "require(_duration == uint256(uint64(_duration)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_duration == uint256(uint64(_duration))"
            Identifier _duration
               Type: uint256
               Source: "_duration"
            FunctionCall
               Type: uint256
               Source: "uint256(uint64(_duration))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint64
                 Source: "uint64(_duration)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier _duration
                   Type: uint256
                   Source: "_duration"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "_escrow(_seller, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_escrow(_seller, _tokenId)"
          Identifier _escrow
             Type: function (address,uint256)
             Source: "_escrow"
          Identifier _seller
             Type: address
             Source: "_seller"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction memory auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        FunctionCall
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
          Identifier Auction
             Type: type(struct ClockAuctionBase.Auction storage pointer)
             Source: "Auction"
          Identifier _seller
             Type: address
             Source: "_seller"
          FunctionCall
             Type: uint128
             Source: "uint128(_startingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
          FunctionCall
             Type: uint128
             Source: "uint128(_endingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
          FunctionCall
             Type: uint64
             Source: "uint64(_duration)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier _duration
               Type: uint256
               Source: "_duration"
          FunctionCall
             Type: uint64
             Source: "uint64(now)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier now
               Type: uint256
               Source: "now"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "_addAuction(_tokenId, auction)"
        FunctionCall
           Type: tuple()
           Source: "_addAuction(_tokenId, auction)"
          Identifier _addAuction
             Type: function (uint256,struct ClockAuctionBase.Auction memory)
             Source: "_addAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "auction"
  FunctionDefinition "createGen0Auction" - public
     Source: "function createGen0Auction(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        );\n        _addAuction(_tokenId, auction);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _tokenId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_seller"
         Type: address
         Source: "address _seller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        );\n        _addAuction(_tokenId, auction);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_startingPrice == uint256(uint128(_startingPrice))"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_startingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_startingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_endingPrice == uint256(uint128(_endingPrice))"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_endingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_endingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _endingPrice
                   Type: uint256
                   Source: "_endingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_duration == uint256(uint64(_duration)))"
        FunctionCall
           Type: tuple()
           Source: "require(_duration == uint256(uint64(_duration)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_duration == uint256(uint64(_duration))"
            Identifier _duration
               Type: uint256
               Source: "_duration"
            FunctionCall
               Type: uint256
               Source: "uint256(uint64(_duration))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint64
                 Source: "uint64(_duration)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier _duration
                   Type: uint256
                   Source: "_duration"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "_escrow(_seller, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_escrow(_seller, _tokenId)"
          Identifier _escrow
             Type: function (address,uint256)
             Source: "_escrow"
          Identifier _seller
             Type: address
             Source: "_seller"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        )"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction memory auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        FunctionCall
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            1\n        )"
          Identifier Auction
             Type: type(struct ClockAuctionBase.Auction storage pointer)
             Source: "Auction"
          Identifier _seller
             Type: address
             Source: "_seller"
          FunctionCall
             Type: uint128
             Source: "uint128(_startingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
          FunctionCall
             Type: uint128
             Source: "uint128(_endingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
          FunctionCall
             Type: uint64
             Source: "uint64(_duration)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier _duration
               Type: uint256
               Source: "_duration"
          FunctionCall
             Type: uint64
             Source: "uint64(now)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier now
               Type: uint256
               Source: "now"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
      ExpressionStatement
         Gas costs: 0
         Source: "_addAuction(_tokenId, auction)"
        FunctionCall
           Type: tuple()
           Source: "_addAuction(_tokenId, auction)"
          Identifier _addAuction
             Type: function (uint256,struct ClockAuctionBase.Auction memory)
             Source: "_addAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "auction"
  FunctionDefinition "bid" - public
     Source: "function bid(uint256 _tokenId)\n        external\n        payable\n    {\n        // _bid verifies token ID size\n        uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If not a gen0 auction, exit\n        if (isGen0 == 1) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // _bid verifies token ID size\n        uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0;\n        uint256 price = _bid(_tokenId, msg.value);\n        _transfer(msg.sender, _tokenId);\n\n        // If not a gen0 auction, exit\n        if (isGen0 == 1) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint64 isGen0 = tokenIdToAuction[_tokenId].isGen0"
        VariableDeclaration "isGen0"
           Type: uint64
           Source: "uint64 isGen0"
          ElementaryTypeName uint64
             Source: "uint64"
        MemberAccess to member isGen0
           Type: uint64
           Source: "tokenIdToAuction[_tokenId].isGen0"
          IndexAccess
             Type: struct ClockAuctionBase.Auction storage ref
             Source: "tokenIdToAuction[_tokenId]"
            Identifier tokenIdToAuction
               Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
               Source: "tokenIdToAuction"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 price = _bid(_tokenId, msg.value)"
        VariableDeclaration "price"
           Type: uint256
           Source: "uint256 price"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "_bid(_tokenId, msg.value)"
          Identifier _bid
             Type: function (uint256,uint256) returns (uint256)
             Source: "_bid"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          MemberAccess to member value
             Type: uint256
             Source: "msg.value"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "_transfer(msg.sender, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(msg.sender, _tokenId)"
          Identifier _transfer
             Type: function (address,uint256)
             Source: "_transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      IfStatement
         Source: "if (isGen0 == 1) {\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "isGen0 == 1"
          Identifier isGen0
             Type: uint64
             Source: "isGen0"
          Literal, token: [no token] value: 1
             Type: int_const 1
             Source: "1"
        Block
           Source: "{\n            // Track gen0 sale prices\n            lastGen0SalePrices[gen0SaleCount % 5] = price;\n            gen0SaleCount++;\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "lastGen0SalePrices[gen0SaleCount % 5] = price"
            Assignment using operator =
               Type: uint256
               Source: "lastGen0SalePrices[gen0SaleCount % 5] = price"
              IndexAccess
                 Type: uint256
                 Source: "lastGen0SalePrices[gen0SaleCount % 5]"
                Identifier lastGen0SalePrices
                   Type: uint256[5] storage ref
                   Source: "lastGen0SalePrices"
                BinaryOperation using operator %
                   Type: uint256
                   Source: "gen0SaleCount % 5"
                  Identifier gen0SaleCount
                     Type: uint256
                     Source: "gen0SaleCount"
                  Literal, token: [no token] value: 5
                     Type: int_const 5
                     Source: "5"
              Identifier price
                 Type: uint256
                 Source: "price"
          ExpressionStatement
             Gas costs: 0
             Source: "gen0SaleCount++"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "gen0SaleCount++"
              Identifier gen0SaleCount
                 Type: uint256
                 Source: "gen0SaleCount"
  FunctionDefinition "createPanda" - public
     Source: "function createPanda(uint256 _tokenId,uint256 _type)\n        external\n    {\n        require(msg.sender == address(nonFungibleContract));\n        if (_type == 0) {\n            CommonPanda.push(_tokenId);\n        }else {\n            RarePanda.push(_tokenId);\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId,uint256 _type)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(msg.sender == address(nonFungibleContract));\n        if (_type == 0) {\n            CommonPanda.push(_tokenId);\n        }else {\n            RarePanda.push(_tokenId);\n        }\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      IfStatement
         Source: "if (_type == 0) {\n            CommonPanda.push(_tokenId);\n        }else {\n            RarePanda.push(_tokenId);\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 0
           Source: "_type == 0"
          Identifier _type
             Type: uint256
             Source: "_type"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            CommonPanda.push(_tokenId);\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "CommonPanda.push(_tokenId)"
            FunctionCall
               Type: uint256
               Source: "CommonPanda.push(_tokenId)"
              MemberAccess to member push
                 Type: function (uint256) returns (uint256)
                 Source: "CommonPanda.push"
                Identifier CommonPanda
                   Type: uint256[] storage ref
                   Source: "CommonPanda"
              Identifier _tokenId
                 Type: uint256
                 Source: "_tokenId"
        Block
           Source: "{\n            RarePanda.push(_tokenId);\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "RarePanda.push(_tokenId)"
            FunctionCall
               Type: uint256
               Source: "RarePanda.push(_tokenId)"
              MemberAccess to member push
                 Type: function (uint256) returns (uint256)
                 Source: "RarePanda.push"
                Identifier RarePanda
                   Type: uint256[] storage ref
                   Source: "RarePanda"
              Identifier _tokenId
                 Type: uint256
                 Source: "_tokenId"
  FunctionDefinition "surprisePanda" - public
     Source: "function surprisePanda()\n        external\n        payable\n    {\n        bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1));\n        uint256 PandaIndex;\n        if (bHash[25] > 0xC8) {\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n\n        } else{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }\n        _transfer(msg.sender,PandaIndex);\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1));\n        uint256 PandaIndex;\n        if (bHash[25] > 0xC8) {\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n\n        } else{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }\n        _transfer(msg.sender,PandaIndex);\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "bytes32 bHash = keccak256(block.blockhash(block.number),block.blockhash(block.number-1))"
        VariableDeclaration "bHash"
           Type: bytes32
           Source: "bytes32 bHash"
          ElementaryTypeName bytes32
             Source: "bytes32"
        FunctionCall
           Type: bytes32
           Source: "keccak256(block.blockhash(block.number),block.blockhash(block.number-1))"
          Identifier keccak256
             Type: function () pure returns (bytes32)
             Source: "keccak256"
          FunctionCall
             Type: bytes32
             Source: "block.blockhash(block.number)"
            MemberAccess to member blockhash
               Type: function (uint256) view returns (bytes32)
               Source: "block.blockhash"
              Identifier block
                 Type: block
                 Source: "block"
            MemberAccess to member number
               Type: uint256
               Source: "block.number"
              Identifier block
                 Type: block
                 Source: "block"
          FunctionCall
             Type: bytes32
             Source: "block.blockhash(block.number-1)"
            MemberAccess to member blockhash
               Type: function (uint256) view returns (bytes32)
               Source: "block.blockhash"
              Identifier block
                 Type: block
                 Source: "block"
            BinaryOperation using operator -
               Type: uint256
               Source: "block.number-1"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 PandaIndex"
        VariableDeclaration "PandaIndex"
           Type: uint256
           Source: "uint256 PandaIndex"
          ElementaryTypeName uint256
             Source: "uint256"
      IfStatement
         Source: "if (bHash[25] > 0xC8) {\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n\n        } else{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "bHash[25] > 0xC8"
          IndexAccess
             Type: bytes1
             Source: "bHash[25]"
            Identifier bHash
               Type: bytes32
               Source: "bHash"
            Literal, token: [no token] value: 25
               Type: int_const 25
               Source: "25"
          Literal, token: [no token] value: 0xC8
             Type: int_const 200
             Source: "0xC8"
        Block
           Source: "{\n            require(uint256(RarePanda.length) >= RarePandaIndex);\n            PandaIndex = RarePandaIndex;\n            RarePandaIndex ++;\n\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "require(uint256(RarePanda.length) >= RarePandaIndex)"
            FunctionCall
               Type: tuple()
               Source: "require(uint256(RarePanda.length) >= RarePandaIndex)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "uint256(RarePanda.length) >= RarePandaIndex"
                FunctionCall
                   Type: uint256
                   Source: "uint256(RarePanda.length)"
                  ElementaryTypeNameExpression uint256
                     Type: type(uint256)
                     Source: "uint256"
                  MemberAccess to member length
                     Type: uint256
                     Source: "RarePanda.length"
                    Identifier RarePanda
                       Type: uint256[] storage ref
                       Source: "RarePanda"
                Identifier RarePandaIndex
                   Type: uint256
                   Source: "RarePandaIndex"
          ExpressionStatement
             Gas costs: 0
             Source: "PandaIndex = RarePandaIndex"
            Assignment using operator =
               Type: uint256
               Source: "PandaIndex = RarePandaIndex"
              Identifier PandaIndex
                 Type: uint256
                 Source: "PandaIndex"
              Identifier RarePandaIndex
                 Type: uint256
                 Source: "RarePandaIndex"
          ExpressionStatement
             Gas costs: 0
             Source: "RarePandaIndex ++"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "RarePandaIndex ++"
              Identifier RarePandaIndex
                 Type: uint256
                 Source: "RarePandaIndex"
        Block
           Source: "{\n            require(uint256(CommonPanda.length) >= CommonPandaIndex);\n            PandaIndex = CommonPandaIndex;\n            CommonPandaIndex ++;\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "require(uint256(CommonPanda.length) >= CommonPandaIndex)"
            FunctionCall
               Type: tuple()
               Source: "require(uint256(CommonPanda.length) >= CommonPandaIndex)"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              BinaryOperation using operator >=
                 Type: bool
                 Source: "uint256(CommonPanda.length) >= CommonPandaIndex"
                FunctionCall
                   Type: uint256
                   Source: "uint256(CommonPanda.length)"
                  ElementaryTypeNameExpression uint256
                     Type: type(uint256)
                     Source: "uint256"
                  MemberAccess to member length
                     Type: uint256
                     Source: "CommonPanda.length"
                    Identifier CommonPanda
                       Type: uint256[] storage ref
                       Source: "CommonPanda"
                Identifier CommonPandaIndex
                   Type: uint256
                   Source: "CommonPandaIndex"
          ExpressionStatement
             Gas costs: 0
             Source: "PandaIndex = CommonPandaIndex"
            Assignment using operator =
               Type: uint256
               Source: "PandaIndex = CommonPandaIndex"
              Identifier PandaIndex
                 Type: uint256
                 Source: "PandaIndex"
              Identifier CommonPandaIndex
                 Type: uint256
                 Source: "CommonPandaIndex"
          ExpressionStatement
             Gas costs: 0
             Source: "CommonPandaIndex ++"
            UnaryOperation (postfix) ++
               Type: uint256
               Source: "CommonPandaIndex ++"
              Identifier CommonPandaIndex
                 Type: uint256
                 Source: "CommonPandaIndex"
      ExpressionStatement
         Gas costs: 0
         Source: "_transfer(msg.sender,PandaIndex)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(msg.sender,PandaIndex)"
          Identifier _transfer
             Type: function (address,uint256)
             Source: "_transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier PandaIndex
             Type: uint256
             Source: "PandaIndex"
  FunctionDefinition "packageCount" - public - const
     Source: "function packageCount() external view returns(uint256 common,uint256 surprise) {\n        common   = CommonPanda.length + 1 - CommonPandaIndex;\n        surprise = RarePanda.length + 1 - RarePandaIndex;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(uint256 common,uint256 surprise)"
      VariableDeclaration "common"
         Type: uint256
         Source: "uint256 common"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "surprise"
         Type: uint256
         Source: "uint256 surprise"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        common   = CommonPanda.length + 1 - CommonPandaIndex;\n        surprise = RarePanda.length + 1 - RarePandaIndex;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "common   = CommonPanda.length + 1 - CommonPandaIndex"
        Assignment using operator =
           Type: uint256
           Source: "common   = CommonPanda.length + 1 - CommonPandaIndex"
          Identifier common
             Type: uint256
             Source: "common"
          BinaryOperation using operator -
             Type: uint256
             Source: "CommonPanda.length + 1 - CommonPandaIndex"
            BinaryOperation using operator +
               Type: uint256
               Source: "CommonPanda.length + 1"
              MemberAccess to member length
                 Type: uint256
                 Source: "CommonPanda.length"
                Identifier CommonPanda
                   Type: uint256[] storage ref
                   Source: "CommonPanda"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
            Identifier CommonPandaIndex
               Type: uint256
               Source: "CommonPandaIndex"
      ExpressionStatement
         Gas costs: 0
         Source: "surprise = RarePanda.length + 1 - RarePandaIndex"
        Assignment using operator =
           Type: uint256
           Source: "surprise = RarePanda.length + 1 - RarePandaIndex"
          Identifier surprise
             Type: uint256
             Source: "surprise"
          BinaryOperation using operator -
             Type: uint256
             Source: "RarePanda.length + 1 - RarePandaIndex"
            BinaryOperation using operator +
               Type: uint256
               Source: "RarePanda.length + 1"
              MemberAccess to member length
                 Type: uint256
                 Source: "RarePanda.length"
                Identifier RarePanda
                   Type: uint256[] storage ref
                   Source: "RarePanda"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
            Identifier RarePandaIndex
               Type: uint256
               Source: "RarePandaIndex"
  FunctionDefinition "averageGen0SalePrice" - public - const
     Source: "function averageGen0SalePrice() external view returns (uint256) {\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        uint256 sum = 0;\n        for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }\n        return sum / 5;\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 sum = 0"
        VariableDeclaration "sum"
           Type: uint256
           Source: "uint256 sum"
          ElementaryTypeName uint256
             Source: "uint256"
        Literal, token: [no token] value: 0
           Type: int_const 0
           Source: "0"
      ForStatement
         Source: "for (uint256 i = 0; i < 5; i++) {\n            sum += lastGen0SalePrices[i];\n        }"
        VariableDeclarationStatement
           Gas costs: 0
           Source: "uint256 i = 0"
          VariableDeclaration "i"
             Type: uint256
             Source: "uint256 i"
            ElementaryTypeName uint256
               Source: "uint256"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 0
           Source: "i < 5"
          Identifier i
             Type: uint256
             Source: "i"
          Literal, token: [no token] value: 5
             Type: int_const 5
             Source: "5"
        ExpressionStatement
           Gas costs: 0
           Source: "i++"
          UnaryOperation (postfix) ++
             Type: uint256
             Source: "i++"
            Identifier i
               Type: uint256
               Source: "i"
        Block
           Source: "{\n            sum += lastGen0SalePrices[i];\n        }"
          ExpressionStatement
             Gas costs: 0
             Source: "sum += lastGen0SalePrices[i]"
            Assignment using operator +=
               Type: uint256
               Source: "sum += lastGen0SalePrices[i]"
              Identifier sum
                 Type: uint256
                 Source: "sum"
              IndexAccess
                 Type: uint256
                 Source: "lastGen0SalePrices[i]"
                Identifier lastGen0SalePrices
                   Type: uint256[5] storage ref
                   Source: "lastGen0SalePrices"
                Identifier i
                   Type: uint256
                   Source: "i"
      Return
         Gas costs: 0
         Source: "return sum / 5"
        BinaryOperation using operator /
           Type: uint256
           Source: "sum / 5"
          Identifier sum
             Type: uint256
             Source: "sum"
          Literal, token: [no token] value: 5
             Type: int_const 5
             Source: "5"
ContractDefinition "SaleClockAuctionERC20"
   Source: "contract SaleClockAuctionERC20 is ClockAuction {\n\n\n    event AuctionERC20Created(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration, address erc20Contract);\n\n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setSaleAuctionAddress() call.\n    bool public isSaleClockAuctionERC20 = true;\n\n    mapping (uint256 => address) public tokenIdToErc20Address;\n\n    mapping (address => uint256) public erc20ContractsSwitcher;\n\n    mapping (address => uint256) public balances;\n    \n    // Delegate constructor\n    function SaleClockAuctionERC20(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}\n\n    function erc20ContractSwitch(address _erc20address, uint256 _onoff) external{\n        require (msg.sender == address(nonFungibleContract));\n\n        require (_erc20address != address(0));\n\n        erc20ContractsSwitcher[_erc20address] = _onoff;\n    }\n    /// @dev Creates and begins a new auction.\n    /// @param _tokenId - ID of token to auction, sender must be owner.\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\n    /// @param _duration - Length of auction (in seconds).\n    /// @param _seller - Seller, if not the message sender\n    function createAuction(\n        uint256 _tokenId,\n        address _erc20Address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n\n        require (erc20ContractsSwitcher[_erc20Address] > 0);\n        \n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuctionERC20(_tokenId, auction, _erc20Address);\n        tokenIdToErc20Address[_tokenId] = _erc20Address;\n    }\n\n    /// @dev Adds an auction to the list of open auctions. Also fires the\n    ///  AuctionCreated event.\n    /// @param _tokenId The ID of the token to be put on auction.\n    /// @param _auction Auction to add.\n    function _addAuctionERC20(uint256 _tokenId, Auction _auction, address _erc20address) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        );\n    }   \n\n    function bid(uint256 _tokenId)\n        external\n        payable{\n            // do nothing\n    }\n\n    /// @dev Updates lastSalePrice if seller is the nft contract\n    /// Otherwise, works the same as default bid method.\n    function bidERC20(uint256 _tokenId,uint256 _amount)\n        external\n    {\n        // _bid verifies token ID size\n        address seller = tokenIdToAuction[_tokenId].seller;\n        address _erc20address = tokenIdToErc20Address[_tokenId];\n        require (_erc20address != address(0));\n        uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount);\n        _transfer(msg.sender, _tokenId);\n        delete tokenIdToErc20Address[_tokenId];\n    }\n\n    function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n        delete tokenIdToErc20Address[_tokenId];\n    }\n\n    function withdrawERC20Balance(address _erc20Address, address _to) external returns(bool res)  {\n        require (balances[_erc20Address] > 0);\n        require(msg.sender == address(nonFungibleContract));\n        ERC20(_erc20Address).transfer(_to, balances[_erc20Address]);\n    }\n    \n    /// @dev Computes the price and transfers winnings.\n    /// Does NOT transfer ownership of token.\n    function _bidERC20(address _erc20Address,address _buyerAddress, uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n\n        require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]);\n        \n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Send Erc20 Token to seller should call Erc20 contract\n            // Reference to contract\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "ClockAuction"
    UserDefinedTypeName "ClockAuction"
       Source: "ClockAuction"
  EventDefinition "AuctionERC20Created"
     Gas costs: 0
     Source: "event AuctionERC20Created(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration, address erc20Contract);"
    ParameterList
       Source: "(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration, address erc20Contract)"
      VariableDeclaration "tokenId"
         Type: uint256
         Source: "uint256 tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "startingPrice"
         Type: uint256
         Source: "uint256 startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "endingPrice"
         Type: uint256
         Source: "uint256 endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "duration"
         Type: uint256
         Source: "uint256 duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "erc20Contract"
         Type: address
         Source: "address erc20Contract"
        ElementaryTypeName address
           Source: "address"
  VariableDeclaration "isSaleClockAuctionERC20"
     Type: bool
     Gas costs: 0
     Source: "bool public isSaleClockAuctionERC20 = true"
    ElementaryTypeName bool
       Source: "bool"
    Literal, token: true value: true
       Type: bool
       Source: "true"
  VariableDeclaration "tokenIdToErc20Address"
     Type: mapping(uint256 => address)
     Gas costs: 0
     Source: "mapping (uint256 => address) public tokenIdToErc20Address"
    Mapping
       Source: "mapping (uint256 => address)"
      ElementaryTypeName uint256
         Source: "uint256"
      ElementaryTypeName address
         Source: "address"
  VariableDeclaration "erc20ContractsSwitcher"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) public erc20ContractsSwitcher"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  VariableDeclaration "balances"
     Type: mapping(address => uint256)
     Gas costs: 0
     Source: "mapping (address => uint256) public balances"
    Mapping
       Source: "mapping (address => uint256)"
      ElementaryTypeName address
         Source: "address"
      ElementaryTypeName uint256
         Source: "uint256"
  FunctionDefinition "SaleClockAuctionERC20" - public
     Source: "function SaleClockAuctionERC20(address _nftAddr, uint256 _cut) public\n        ClockAuction(_nftAddr, _cut) {}"
    ParameterList
       Gas costs: 0
       Source: "(address _nftAddr, uint256 _cut)"
      VariableDeclaration "_nftAddr"
         Type: address
         Source: "address _nftAddr"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_cut"
         Type: uint256
         Source: "uint256 _cut"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "ClockAuction"
       Gas costs: 0
       Source: "ClockAuction(_nftAddr, _cut)"
      Identifier ClockAuction
         Type: type(contract ClockAuction)
         Source: "ClockAuction"
      Identifier _nftAddr
         Type: address
         Source: "_nftAddr"
      Identifier _cut
         Type: uint256
         Source: "_cut"
    Block
       Gas costs: 0
       Source: "{}"
  FunctionDefinition "erc20ContractSwitch" - public
     Source: "function erc20ContractSwitch(address _erc20address, uint256 _onoff) external{\n        require (msg.sender == address(nonFungibleContract));\n\n        require (_erc20address != address(0));\n\n        erc20ContractsSwitcher[_erc20address] = _onoff;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _erc20address, uint256 _onoff)"
      VariableDeclaration "_erc20address"
         Type: address
         Source: "address _erc20address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_onoff"
         Type: uint256
         Source: "uint256 _onoff"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require (msg.sender == address(nonFungibleContract));\n\n        require (_erc20address != address(0));\n\n        erc20ContractsSwitcher[_erc20address] = _onoff;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require (msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require (msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "require (_erc20address != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require (_erc20address != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_erc20address != address(0)"
            Identifier _erc20address
               Type: address
               Source: "_erc20address"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "erc20ContractsSwitcher[_erc20address] = _onoff"
        Assignment using operator =
           Type: uint256
           Source: "erc20ContractsSwitcher[_erc20address] = _onoff"
          IndexAccess
             Type: uint256
             Source: "erc20ContractsSwitcher[_erc20address]"
            Identifier erc20ContractsSwitcher
               Type: mapping(address => uint256)
               Source: "erc20ContractsSwitcher"
            Identifier _erc20address
               Type: address
               Source: "_erc20address"
          Identifier _onoff
             Type: uint256
             Source: "_onoff"
  FunctionDefinition "createAuction" - public
     Source: "function createAuction(\n        uint256 _tokenId,\n        address _erc20Address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )\n        external\n    {\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n\n        require (erc20ContractsSwitcher[_erc20Address] > 0);\n        \n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuctionERC20(_tokenId, auction, _erc20Address);\n        tokenIdToErc20Address[_tokenId] = _erc20Address;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _tokenId,\n        address _erc20Address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration,\n        address _seller\n    )"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_erc20Address"
         Type: address
         Source: "address _erc20Address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_seller"
         Type: address
         Source: "address _seller"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Sanity check that no inputs overflow how many bits we've allocated\n        // to store them in the auction struct.\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n\n        require(msg.sender == address(nonFungibleContract));\n\n        require (erc20ContractsSwitcher[_erc20Address] > 0);\n        \n        _escrow(_seller, _tokenId);\n        Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        );\n        _addAuctionERC20(_tokenId, auction, _erc20Address);\n        tokenIdToErc20Address[_tokenId] = _erc20Address;\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_startingPrice == uint256(uint128(_startingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_startingPrice == uint256(uint128(_startingPrice))"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_startingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_startingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _startingPrice
                   Type: uint256
                   Source: "_startingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(_endingPrice == uint256(uint128(_endingPrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_endingPrice == uint256(uint128(_endingPrice))"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(_endingPrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(_endingPrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier _endingPrice
                   Type: uint256
                   Source: "_endingPrice"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_duration == uint256(uint64(_duration)))"
        FunctionCall
           Type: tuple()
           Source: "require(_duration == uint256(uint64(_duration)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "_duration == uint256(uint64(_duration))"
            Identifier _duration
               Type: uint256
               Source: "_duration"
            FunctionCall
               Type: uint256
               Source: "uint256(uint64(_duration))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint64
                 Source: "uint64(_duration)"
                ElementaryTypeNameExpression uint64
                   Type: type(uint64)
                   Source: "uint64"
                Identifier _duration
                   Type: uint256
                   Source: "_duration"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "require (erc20ContractsSwitcher[_erc20Address] > 0)"
        FunctionCall
           Type: tuple()
           Source: "require (erc20ContractsSwitcher[_erc20Address] > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "erc20ContractsSwitcher[_erc20Address] > 0"
            IndexAccess
               Type: uint256
               Source: "erc20ContractsSwitcher[_erc20Address]"
              Identifier erc20ContractsSwitcher
                 Type: mapping(address => uint256)
                 Source: "erc20ContractsSwitcher"
              Identifier _erc20Address
                 Type: address
                 Source: "_erc20Address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "_escrow(_seller, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_escrow(_seller, _tokenId)"
          Identifier _escrow
             Type: function (address,uint256)
             Source: "_escrow"
          Identifier _seller
             Type: address
             Source: "_seller"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction memory auction = Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction memory auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        FunctionCall
           Type: struct ClockAuctionBase.Auction memory
           Source: "Auction(\n            _seller,\n            uint128(_startingPrice),\n            uint128(_endingPrice),\n            uint64(_duration),\n            uint64(now),\n            0\n        )"
          Identifier Auction
             Type: type(struct ClockAuctionBase.Auction storage pointer)
             Source: "Auction"
          Identifier _seller
             Type: address
             Source: "_seller"
          FunctionCall
             Type: uint128
             Source: "uint128(_startingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _startingPrice
               Type: uint256
               Source: "_startingPrice"
          FunctionCall
             Type: uint128
             Source: "uint128(_endingPrice)"
            ElementaryTypeNameExpression uint128
               Type: type(uint128)
               Source: "uint128"
            Identifier _endingPrice
               Type: uint256
               Source: "_endingPrice"
          FunctionCall
             Type: uint64
             Source: "uint64(_duration)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier _duration
               Type: uint256
               Source: "_duration"
          FunctionCall
             Type: uint64
             Source: "uint64(now)"
            ElementaryTypeNameExpression uint64
               Type: type(uint64)
               Source: "uint64"
            Identifier now
               Type: uint256
               Source: "now"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "_addAuctionERC20(_tokenId, auction, _erc20Address)"
        FunctionCall
           Type: tuple()
           Source: "_addAuctionERC20(_tokenId, auction, _erc20Address)"
          Identifier _addAuctionERC20
             Type: function (uint256,struct ClockAuctionBase.Auction memory,address)
             Source: "_addAuctionERC20"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "auction"
          Identifier _erc20Address
             Type: address
             Source: "_erc20Address"
      ExpressionStatement
         Gas costs: 0
         Source: "tokenIdToErc20Address[_tokenId] = _erc20Address"
        Assignment using operator =
           Type: address
           Source: "tokenIdToErc20Address[_tokenId] = _erc20Address"
          IndexAccess
             Type: address
             Source: "tokenIdToErc20Address[_tokenId]"
            Identifier tokenIdToErc20Address
               Type: mapping(uint256 => address)
               Source: "tokenIdToErc20Address"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _erc20Address
             Type: address
             Source: "_erc20Address"
  FunctionDefinition "_addAuctionERC20"
     Source: "function _addAuctionERC20(uint256 _tokenId, Auction _auction, address _erc20address) internal {\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId, Auction _auction, address _erc20address)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_auction"
         Type: struct ClockAuctionBase.Auction memory
         Source: "Auction _auction"
        UserDefinedTypeName "Auction"
           Source: "Auction"
      VariableDeclaration "_erc20address"
         Type: address
         Source: "address _erc20address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Require that all auctions have a duration of\n        // at least one minute. (Keeps our math from getting hairy!)\n        require(_auction.duration >= 1 minutes);\n\n        tokenIdToAuction[_tokenId] = _auction;\n\n        AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        );\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_auction.duration >= 1 minutes)"
        FunctionCall
           Type: tuple()
           Source: "require(_auction.duration >= 1 minutes)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "_auction.duration >= 1 minutes"
            MemberAccess to member duration
               Type: uint64
               Source: "_auction.duration"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
            Literal, token: [no token] value: 1
               Type: int_const 60
               Source: "1 minutes"
      ExpressionStatement
         Gas costs: 0
         Source: "tokenIdToAuction[_tokenId] = _auction"
        Assignment using operator =
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId] = _auction"
          IndexAccess
             Type: struct ClockAuctionBase.Auction storage ref
             Source: "tokenIdToAuction[_tokenId]"
            Identifier tokenIdToAuction
               Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
               Source: "tokenIdToAuction"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          Identifier _auction
             Type: struct ClockAuctionBase.Auction memory
             Source: "_auction"
      ExpressionStatement
         Gas costs: 0
         Source: "AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        )"
        FunctionCall
           Type: tuple()
           Source: "AuctionERC20Created(\n            uint256(_tokenId),\n            uint256(_auction.startingPrice),\n            uint256(_auction.endingPrice),\n            uint256(_auction.duration),\n            _erc20address\n        )"
          Identifier AuctionERC20Created
             Type: function (uint256,uint256,uint256,uint256,address)
             Source: "AuctionERC20Created"
          FunctionCall
             Type: uint256
             Source: "uint256(_tokenId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
          FunctionCall
             Type: uint256
             Source: "uint256(_auction.startingPrice)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member startingPrice
               Type: uint128
               Source: "_auction.startingPrice"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
          FunctionCall
             Type: uint256
             Source: "uint256(_auction.endingPrice)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member endingPrice
               Type: uint128
               Source: "_auction.endingPrice"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
          FunctionCall
             Type: uint256
             Source: "uint256(_auction.duration)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member duration
               Type: uint64
               Source: "_auction.duration"
              Identifier _auction
                 Type: struct ClockAuctionBase.Auction memory
                 Source: "_auction"
          Identifier _erc20address
             Type: address
             Source: "_erc20address"
  FunctionDefinition "bid" - public
     Source: "function bid(uint256 _tokenId)\n        external\n        payable{\n            // do nothing\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Gas costs: 0
       Source: "{\n            // do nothing\n    }"
  FunctionDefinition "bidERC20" - public
     Source: "function bidERC20(uint256 _tokenId,uint256 _amount)\n        external\n    {\n        // _bid verifies token ID size\n        address seller = tokenIdToAuction[_tokenId].seller;\n        address _erc20address = tokenIdToErc20Address[_tokenId];\n        require (_erc20address != address(0));\n        uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount);\n        _transfer(msg.sender, _tokenId);\n        delete tokenIdToErc20Address[_tokenId];\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId,uint256 _amount)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_amount"
         Type: uint256
         Source: "uint256 _amount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // _bid verifies token ID size\n        address seller = tokenIdToAuction[_tokenId].seller;\n        address _erc20address = tokenIdToErc20Address[_tokenId];\n        require (_erc20address != address(0));\n        uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount);\n        _transfer(msg.sender, _tokenId);\n        delete tokenIdToErc20Address[_tokenId];\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address seller = tokenIdToAuction[_tokenId].seller"
        VariableDeclaration "seller"
           Type: address
           Source: "address seller"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member seller
           Type: address
           Source: "tokenIdToAuction[_tokenId].seller"
          IndexAccess
             Type: struct ClockAuctionBase.Auction storage ref
             Source: "tokenIdToAuction[_tokenId]"
            Identifier tokenIdToAuction
               Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
               Source: "tokenIdToAuction"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address _erc20address = tokenIdToErc20Address[_tokenId]"
        VariableDeclaration "_erc20address"
           Type: address
           Source: "address _erc20address"
          ElementaryTypeName address
             Source: "address"
        IndexAccess
           Type: address
           Source: "tokenIdToErc20Address[_tokenId]"
          Identifier tokenIdToErc20Address
             Type: mapping(uint256 => address)
             Source: "tokenIdToErc20Address"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require (_erc20address != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require (_erc20address != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "_erc20address != address(0)"
            Identifier _erc20address
               Type: address
               Source: "_erc20address"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 price = _bidERC20(_erc20address,msg.sender,_tokenId, _amount)"
        VariableDeclaration "price"
           Type: uint256
           Source: "uint256 price"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "_bidERC20(_erc20address,msg.sender,_tokenId, _amount)"
          Identifier _bidERC20
             Type: function (address,address,uint256,uint256) returns (uint256)
             Source: "_bidERC20"
          Identifier _erc20address
             Type: address
             Source: "_erc20address"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier _amount
             Type: uint256
             Source: "_amount"
      ExpressionStatement
         Gas costs: 0
         Source: "_transfer(msg.sender, _tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_transfer(msg.sender, _tokenId)"
          Identifier _transfer
             Type: function (address,uint256)
             Source: "_transfer"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "delete tokenIdToErc20Address[_tokenId]"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete tokenIdToErc20Address[_tokenId]"
          IndexAccess
             Type: address
             Source: "tokenIdToErc20Address[_tokenId]"
            Identifier tokenIdToErc20Address
               Type: mapping(uint256 => address)
               Source: "tokenIdToErc20Address"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
  FunctionDefinition "cancelAuction" - public
     Source: "function cancelAuction(uint256 _tokenId)\n        external\n    {\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n        delete tokenIdToErc20Address[_tokenId];\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _tokenId)"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        Auction storage auction = tokenIdToAuction[_tokenId];\n        require(_isOnAuction(auction));\n        address seller = auction.seller;\n        require(msg.sender == seller);\n        _cancelAuction(_tokenId, seller);\n        delete tokenIdToErc20Address[_tokenId];\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address seller = auction.seller"
        VariableDeclaration "seller"
           Type: address
           Source: "address seller"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member seller
           Type: address
           Source: "auction.seller"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == seller)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == seller)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == seller"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier seller
               Type: address
               Source: "seller"
      ExpressionStatement
         Gas costs: 0
         Source: "_cancelAuction(_tokenId, seller)"
        FunctionCall
           Type: tuple()
           Source: "_cancelAuction(_tokenId, seller)"
          Identifier _cancelAuction
             Type: function (uint256,address)
             Source: "_cancelAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier seller
             Type: address
             Source: "seller"
      ExpressionStatement
         Gas costs: 0
         Source: "delete tokenIdToErc20Address[_tokenId]"
        UnaryOperation (prefix) delete
           Type: tuple()
           Source: "delete tokenIdToErc20Address[_tokenId]"
          IndexAccess
             Type: address
             Source: "tokenIdToErc20Address[_tokenId]"
            Identifier tokenIdToErc20Address
               Type: mapping(uint256 => address)
               Source: "tokenIdToErc20Address"
            Identifier _tokenId
               Type: uint256
               Source: "_tokenId"
  FunctionDefinition "withdrawERC20Balance" - public
     Source: "function withdrawERC20Balance(address _erc20Address, address _to) external returns(bool res)  {\n        require (balances[_erc20Address] > 0);\n        require(msg.sender == address(nonFungibleContract));\n        ERC20(_erc20Address).transfer(_to, balances[_erc20Address]);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _erc20Address, address _to)"
      VariableDeclaration "_erc20Address"
         Type: address
         Source: "address _erc20Address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: "(bool res)"
      VariableDeclaration "res"
         Type: bool
         Source: "bool res"
        ElementaryTypeName bool
           Source: "bool"
    Block
       Source: "{\n        require (balances[_erc20Address] > 0);\n        require(msg.sender == address(nonFungibleContract));\n        ERC20(_erc20Address).transfer(_to, balances[_erc20Address]);\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "require (balances[_erc20Address] > 0)"
        FunctionCall
           Type: tuple()
           Source: "require (balances[_erc20Address] > 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >
             Type: bool
             Source: "balances[_erc20Address] > 0"
            IndexAccess
               Type: uint256
               Source: "balances[_erc20Address]"
              Identifier balances
                 Type: mapping(address => uint256)
                 Source: "balances"
              Identifier _erc20Address
                 Type: address
                 Source: "_erc20Address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      ExpressionStatement
         Gas costs: 0
         Source: "require(msg.sender == address(nonFungibleContract))"
        FunctionCall
           Type: tuple()
           Source: "require(msg.sender == address(nonFungibleContract))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "msg.sender == address(nonFungibleContract)"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            FunctionCall
               Type: address
               Source: "address(nonFungibleContract)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Identifier nonFungibleContract
                 Type: contract ERC721
                 Source: "nonFungibleContract"
      ExpressionStatement
         Gas costs: 0
         Source: "ERC20(_erc20Address).transfer(_to, balances[_erc20Address])"
        FunctionCall
           Type: bool
           Source: "ERC20(_erc20Address).transfer(_to, balances[_erc20Address])"
          MemberAccess to member transfer
             Type: function (address,uint256) external returns (bool)
             Source: "ERC20(_erc20Address).transfer"
            FunctionCall
               Type: contract ERC20
               Source: "ERC20(_erc20Address)"
              Identifier ERC20
                 Type: type(contract ERC20)
                 Source: "ERC20"
              Identifier _erc20Address
                 Type: address
                 Source: "_erc20Address"
          Identifier _to
             Type: address
             Source: "_to"
          IndexAccess
             Type: uint256
             Source: "balances[_erc20Address]"
            Identifier balances
               Type: mapping(address => uint256)
               Source: "balances"
            Identifier _erc20Address
               Type: address
               Source: "_erc20Address"
  FunctionDefinition "_bidERC20"
     Source: "function _bidERC20(address _erc20Address,address _buyerAddress, uint256 _tokenId, uint256 _bidAmount)\n        internal\n        returns (uint256)\n    {\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n\n        require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]);\n        \n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Send Erc20 Token to seller should call Erc20 contract\n            // Reference to contract\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _erc20Address,address _buyerAddress, uint256 _tokenId, uint256 _bidAmount)"
      VariableDeclaration "_erc20Address"
         Type: address
         Source: "address _erc20Address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_buyerAddress"
         Type: address
         Source: "address _buyerAddress"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_tokenId"
         Type: uint256
         Source: "uint256 _tokenId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_bidAmount"
         Type: uint256
         Source: "uint256 _bidAmount"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        // Get a reference to the auction struct\n        Auction storage auction = tokenIdToAuction[_tokenId];\n\n        // Explicitly check that this auction is currently live.\n        // (Because of how Ethereum mappings work, we can't just count\n        // on the lookup above failing. An invalid _tokenId will just\n        // return an auction object that is all zeros.)\n        require(_isOnAuction(auction));\n\n\n        require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]);\n        \n\n        // Check that the bid is greater than or equal to the current price\n        uint256 price = _currentPrice(auction);\n        require(_bidAmount >= price);\n\n        // Grab a reference to the seller before the auction struct\n        // gets deleted.\n        address seller = auction.seller;\n\n        // The bid is good! Remove the auction before sending the fees\n        // to the sender so we can't have a reentrancy attack.\n        _removeAuction(_tokenId);\n\n        // Transfer proceeds to seller (if there are any!)\n        if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Send Erc20 Token to seller should call Erc20 contract\n            // Reference to contract\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }\n\n        // Tell the world!\n        AuctionSuccessful(_tokenId, price, msg.sender);\n\n        return price;\n    }"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "Auction storage auction = tokenIdToAuction[_tokenId]"
        VariableDeclaration "auction"
           Type: struct ClockAuctionBase.Auction storage pointer
           Source: "Auction storage auction"
          UserDefinedTypeName "Auction"
             Source: "Auction"
        IndexAccess
           Type: struct ClockAuctionBase.Auction storage ref
           Source: "tokenIdToAuction[_tokenId]"
          Identifier tokenIdToAuction
             Type: mapping(uint256 => struct ClockAuctionBase.Auction storage ref)
             Source: "tokenIdToAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_isOnAuction(auction))"
        FunctionCall
           Type: tuple()
           Source: "require(_isOnAuction(auction))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_isOnAuction(auction)"
            Identifier _isOnAuction
               Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (bool)
               Source: "_isOnAuction"
            Identifier auction
               Type: struct ClockAuctionBase.Auction storage pointer
               Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId])"
        FunctionCall
           Type: tuple()
           Source: "require (_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId])"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator &&
             Type: bool
             Source: "_erc20Address != address(0) && _erc20Address == tokenIdToErc20Address[_tokenId]"
            BinaryOperation using operator !=
               Type: bool
               Source: "_erc20Address != address(0)"
              Identifier _erc20Address
                 Type: address
                 Source: "_erc20Address"
              FunctionCall
                 Type: address
                 Source: "address(0)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Literal, token: [no token] value: 0
                   Type: int_const 0
                   Source: "0"
            BinaryOperation using operator ==
               Type: bool
               Source: "_erc20Address == tokenIdToErc20Address[_tokenId]"
              Identifier _erc20Address
                 Type: address
                 Source: "_erc20Address"
              IndexAccess
                 Type: address
                 Source: "tokenIdToErc20Address[_tokenId]"
                Identifier tokenIdToErc20Address
                   Type: mapping(uint256 => address)
                   Source: "tokenIdToErc20Address"
                Identifier _tokenId
                   Type: uint256
                   Source: "_tokenId"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "uint256 price = _currentPrice(auction)"
        VariableDeclaration "price"
           Type: uint256
           Source: "uint256 price"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "_currentPrice(auction)"
          Identifier _currentPrice
             Type: function (struct ClockAuctionBase.Auction storage pointer) view returns (uint256)
             Source: "_currentPrice"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "require(_bidAmount >= price)"
        FunctionCall
           Type: tuple()
           Source: "require(_bidAmount >= price)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "_bidAmount >= price"
            Identifier _bidAmount
               Type: uint256
               Source: "_bidAmount"
            Identifier price
               Type: uint256
               Source: "price"
      VariableDeclarationStatement
         Gas costs: 0
         Source: "address seller = auction.seller"
        VariableDeclaration "seller"
           Type: address
           Source: "address seller"
          ElementaryTypeName address
             Source: "address"
        MemberAccess to member seller
           Type: address
           Source: "auction.seller"
          Identifier auction
             Type: struct ClockAuctionBase.Auction storage pointer
             Source: "auction"
      ExpressionStatement
         Gas costs: 0
         Source: "_removeAuction(_tokenId)"
        FunctionCall
           Type: tuple()
           Source: "_removeAuction(_tokenId)"
          Identifier _removeAuction
             Type: function (uint256)
             Source: "_removeAuction"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
      IfStatement
         Source: "if (price > 0) {\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Send Erc20 Token to seller should call Erc20 contract\n            // Reference to contract\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 0
           Source: "price > 0"
          Identifier price
             Type: uint256
             Source: "price"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
        Block
           Source: "{\n            // Calculate the auctioneer's cut.\n            // (NOTE: _computeCut() is guaranteed to return a\n            // value <= price, so this subtraction can't go negative.)\n            uint256 auctioneerCut = _computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n\n            // Send Erc20 Token to seller should call Erc20 contract\n            // Reference to contract\n            require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds));\n            if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }\n        }"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "uint256 auctioneerCut = _computeCut(price)"
            VariableDeclaration "auctioneerCut"
               Type: uint256
               Source: "uint256 auctioneerCut"
              ElementaryTypeName uint256
                 Source: "uint256"
            FunctionCall
               Type: uint256
               Source: "_computeCut(price)"
              Identifier _computeCut
                 Type: function (uint256) view returns (uint256)
                 Source: "_computeCut"
              Identifier price
                 Type: uint256
                 Source: "price"
          VariableDeclarationStatement
             Gas costs: 0
             Source: "uint256 sellerProceeds = price - auctioneerCut"
            VariableDeclaration "sellerProceeds"
               Type: uint256
               Source: "uint256 sellerProceeds"
              ElementaryTypeName uint256
                 Source: "uint256"
            BinaryOperation using operator -
               Type: uint256
               Source: "price - auctioneerCut"
              Identifier price
                 Type: uint256
                 Source: "price"
              Identifier auctioneerCut
                 Type: uint256
                 Source: "auctioneerCut"
          ExpressionStatement
             Gas costs: 0
             Source: "require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds))"
            FunctionCall
               Type: tuple()
               Source: "require(ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds))"
              Identifier require
                 Type: function (bool) pure
                 Source: "require"
              FunctionCall
                 Type: bool
                 Source: "ERC20(_erc20Address).transferFrom(_buyerAddress,seller,sellerProceeds)"
                MemberAccess to member transferFrom
                   Type: function (address,address,uint256) external returns (bool)
                   Source: "ERC20(_erc20Address).transferFrom"
                  FunctionCall
                     Type: contract ERC20
                     Source: "ERC20(_erc20Address)"
                    Identifier ERC20
                       Type: type(contract ERC20)
                       Source: "ERC20"
                    Identifier _erc20Address
                       Type: address
                       Source: "_erc20Address"
                Identifier _buyerAddress
                   Type: address
                   Source: "_buyerAddress"
                Identifier seller
                   Type: address
                   Source: "seller"
                Identifier sellerProceeds
                   Type: uint256
                   Source: "sellerProceeds"
          IfStatement
             Source: "if (auctioneerCut > 0){\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }"
            BinaryOperation using operator >
               Type: bool
               Gas costs: 0
               Source: "auctioneerCut > 0"
              Identifier auctioneerCut
                 Type: uint256
                 Source: "auctioneerCut"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
            Block
               Source: "{\n                require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut));\n                balances[_erc20Address] += auctioneerCut;\n            }"
              ExpressionStatement
                 Gas costs: 0
                 Source: "require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut))"
                FunctionCall
                   Type: tuple()
                   Source: "require(ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut))"
                  Identifier require
                     Type: function (bool) pure
                     Source: "require"
                  FunctionCall
                     Type: bool
                     Source: "ERC20(_erc20Address).transferFrom(_buyerAddress,address(this),auctioneerCut)"
                    MemberAccess to member transferFrom
                       Type: function (address,address,uint256) external returns (bool)
                       Source: "ERC20(_erc20Address).transferFrom"
                      FunctionCall
                         Type: contract ERC20
                         Source: "ERC20(_erc20Address)"
                        Identifier ERC20
                           Type: type(contract ERC20)
                           Source: "ERC20"
                        Identifier _erc20Address
                           Type: address
                           Source: "_erc20Address"
                    Identifier _buyerAddress
                       Type: address
                       Source: "_buyerAddress"
                    FunctionCall
                       Type: address
                       Source: "address(this)"
                      ElementaryTypeNameExpression address
                         Type: type(address)
                         Source: "address"
                      Identifier this
                         Type: contract SaleClockAuctionERC20
                         Source: "this"
                    Identifier auctioneerCut
                       Type: uint256
                       Source: "auctioneerCut"
              ExpressionStatement
                 Gas costs: 0
                 Source: "balances[_erc20Address] += auctioneerCut"
                Assignment using operator +=
                   Type: uint256
                   Source: "balances[_erc20Address] += auctioneerCut"
                  IndexAccess
                     Type: uint256
                     Source: "balances[_erc20Address]"
                    Identifier balances
                       Type: mapping(address => uint256)
                       Source: "balances"
                    Identifier _erc20Address
                       Type: address
                       Source: "_erc20Address"
                  Identifier auctioneerCut
                     Type: uint256
                     Source: "auctioneerCut"
      ExpressionStatement
         Gas costs: 0
         Source: "AuctionSuccessful(_tokenId, price, msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "AuctionSuccessful(_tokenId, price, msg.sender)"
          Identifier AuctionSuccessful
             Type: function (uint256,uint256,address)
             Source: "AuctionSuccessful"
          Identifier _tokenId
             Type: uint256
             Source: "_tokenId"
          Identifier price
             Type: uint256
             Source: "price"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      Return
         Gas costs: 0
         Source: "return price"
        Identifier price
           Type: uint256
           Source: "price"
ContractDefinition "PandaAuction"
   Source: "contract PandaAuction is PandaBreeding {\n\n    // @notice The auction contract variables are defined in PandaBase to allow\n    //  us to refer to them in PandaOwnership to prevent accidental transfers.\n    // `saleAuction` refers to the auction for gen0 and p2p sale of pandas.\n    // `siringAuction` refers to the auction for siring rights of pandas.\n\n    /// @dev Sets the reference to the sale auction.\n    /// @param _address - Address of sale contract.\n    function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }\n\n    function setSaleAuctionERC20Address(address _address) external onlyCEO {\n        SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuctionERC20());\n\n        // Set the new contract address\n        saleAuctionERC20 = candidateContract;\n    }\n\n    /// @dev Sets the reference to the siring auction.\n    /// @param _address - Address of siring contract.\n    function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSiringClockAuction());\n\n        // Set the new contract address\n        siringAuction = candidateContract;\n    }\n\n    /// @dev Put a panda up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createSaleAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Put a panda up for auction.\n    ///  Does some ownership trickery to create auctions in one tx.\n    function createSaleAuctionERC20(\n        uint256 _pandaId,\n        address _erc20address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuctionERC20);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    function switchSaleAuctionERC20For(address _erc20address, uint256 _onoff) external onlyCOO{\n        saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff);\n    }\n\n\n    /// @dev Put a panda up for auction to be sire.\n    ///  Performs checks to ensure the panda can be sired, then\n    ///  delegates to reverse auction.\n    function createSiringAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        require(isReadyToBreed(_pandaId));\n        _approve(_pandaId, siringAuction);\n        // Siring auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }\n\n    /// @dev Completes a siring auction by bidding.\n    ///  Immediately breeds the winning matron with the sire on auction.\n    /// @param _sireId - ID of the sire on auction.\n    /// @param _matronId - ID of the matron owned by the bidder.\n    function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n        // Define the current price of the auction.\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n\n        // Siring auction will throw if the bid fails.\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId), msg.sender);\n    }\n\n    /// @dev Transfers the balance of the sale auction contract\n    /// to the PandaCore contract. We use two-step withdrawal to\n    /// prevent two transfer calls in the auction bid function.\n    function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }\n\n\n    function withdrawERC20Balance(address _erc20Address, address _to) external onlyCLevel {\n        require(saleAuctionERC20 != address(0));\n        saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to);\n    }    \n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "PandaBreeding"
    UserDefinedTypeName "PandaBreeding"
       Source: "PandaBreeding"
  FunctionDefinition "setSaleAuctionAddress" - public
     Source: "function setSaleAuctionAddress(address _address) external onlyCEO {\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        SaleClockAuction candidateContract = SaleClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuction());\n\n        // Set the new contract address\n        saleAuction = candidateContract;\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "SaleClockAuction candidateContract = SaleClockAuction(_address)"
        VariableDeclaration "candidateContract"
           Type: contract SaleClockAuction
           Source: "SaleClockAuction candidateContract"
          UserDefinedTypeName "SaleClockAuction"
             Source: "SaleClockAuction"
        FunctionCall
           Type: contract SaleClockAuction
           Source: "SaleClockAuction(_address)"
          Identifier SaleClockAuction
             Type: type(contract SaleClockAuction)
             Source: "SaleClockAuction"
          Identifier _address
             Type: address
             Source: "_address"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(candidateContract.isSaleClockAuction())"
        FunctionCall
           Type: tuple()
           Source: "require(candidateContract.isSaleClockAuction())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "candidateContract.isSaleClockAuction()"
            MemberAccess to member isSaleClockAuction
               Type: function () view external returns (bool)
               Source: "candidateContract.isSaleClockAuction"
              Identifier candidateContract
                 Type: contract SaleClockAuction
                 Source: "candidateContract"
      ExpressionStatement
         Gas costs: 20267
         Source: "saleAuction = candidateContract"
        Assignment using operator =
           Type: contract SaleClockAuction
           Source: "saleAuction = candidateContract"
          Identifier saleAuction
             Type: contract SaleClockAuction
             Source: "saleAuction"
          Identifier candidateContract
             Type: contract SaleClockAuction
             Source: "candidateContract"
  FunctionDefinition "setSaleAuctionERC20Address" - public
     Source: "function setSaleAuctionERC20Address(address _address) external onlyCEO {\n        SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuctionERC20());\n\n        // Set the new contract address\n        saleAuctionERC20 = candidateContract;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSaleClockAuctionERC20());\n\n        // Set the new contract address\n        saleAuctionERC20 = candidateContract;\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "SaleClockAuctionERC20 candidateContract = SaleClockAuctionERC20(_address)"
        VariableDeclaration "candidateContract"
           Type: contract SaleClockAuctionERC20
           Source: "SaleClockAuctionERC20 candidateContract"
          UserDefinedTypeName "SaleClockAuctionERC20"
             Source: "SaleClockAuctionERC20"
        FunctionCall
           Type: contract SaleClockAuctionERC20
           Source: "SaleClockAuctionERC20(_address)"
          Identifier SaleClockAuctionERC20
             Type: type(contract SaleClockAuctionERC20)
             Source: "SaleClockAuctionERC20"
          Identifier _address
             Type: address
             Source: "_address"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(candidateContract.isSaleClockAuctionERC20())"
        FunctionCall
           Type: tuple()
           Source: "require(candidateContract.isSaleClockAuctionERC20())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "candidateContract.isSaleClockAuctionERC20()"
            MemberAccess to member isSaleClockAuctionERC20
               Type: function () view external returns (bool)
               Source: "candidateContract.isSaleClockAuctionERC20"
              Identifier candidateContract
                 Type: contract SaleClockAuctionERC20
                 Source: "candidateContract"
      ExpressionStatement
         Gas costs: 20267
         Source: "saleAuctionERC20 = candidateContract"
        Assignment using operator =
           Type: contract SaleClockAuctionERC20
           Source: "saleAuctionERC20 = candidateContract"
          Identifier saleAuctionERC20
             Type: contract SaleClockAuctionERC20
             Source: "saleAuctionERC20"
          Identifier candidateContract
             Type: contract SaleClockAuctionERC20
             Source: "candidateContract"
  FunctionDefinition "setSiringAuctionAddress" - public
     Source: "function setSiringAuctionAddress(address _address) external onlyCEO {\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSiringClockAuction());\n\n        // Set the new contract address\n        siringAuction = candidateContract;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _address)"
      VariableDeclaration "_address"
         Type: address
         Source: "address _address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    Block
       Source: "{\n        SiringClockAuction candidateContract = SiringClockAuction(_address);\n\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\n        require(candidateContract.isSiringClockAuction());\n\n        // Set the new contract address\n        siringAuction = candidateContract;\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "SiringClockAuction candidateContract = SiringClockAuction(_address)"
        VariableDeclaration "candidateContract"
           Type: contract SiringClockAuction
           Source: "SiringClockAuction candidateContract"
          UserDefinedTypeName "SiringClockAuction"
             Source: "SiringClockAuction"
        FunctionCall
           Type: contract SiringClockAuction
           Source: "SiringClockAuction(_address)"
          Identifier SiringClockAuction
             Type: type(contract SiringClockAuction)
             Source: "SiringClockAuction"
          Identifier _address
             Type: address
             Source: "_address"
      ExpressionStatement
         Gas costs: [???]
         Source: "require(candidateContract.isSiringClockAuction())"
        FunctionCall
           Type: tuple()
           Source: "require(candidateContract.isSiringClockAuction())"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "candidateContract.isSiringClockAuction()"
            MemberAccess to member isSiringClockAuction
               Type: function () view external returns (bool)
               Source: "candidateContract.isSiringClockAuction"
              Identifier candidateContract
                 Type: contract SiringClockAuction
                 Source: "candidateContract"
      ExpressionStatement
         Gas costs: 20267
         Source: "siringAuction = candidateContract"
        Assignment using operator =
           Type: contract SiringClockAuction
           Source: "siringAuction = candidateContract"
          Identifier siringAuction
             Type: contract SiringClockAuction
             Source: "siringAuction"
          Identifier candidateContract
             Type: contract SiringClockAuction
             Source: "candidateContract"
  FunctionDefinition "createSaleAuction" - public
     Source: "function createSaleAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )"
      VariableDeclaration "_pandaId"
         Type: uint256
         Source: "uint256 _pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuction);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _pandaId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
      ExpressionStatement
         Gas costs: 47
         Source: "require(!isPregnant(_pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(!isPregnant(_pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isPregnant(_pandaId)"
            FunctionCall
               Type: bool
               Source: "isPregnant(_pandaId)"
              Identifier isPregnant
                 Type: function (uint256) view returns (bool)
                 Source: "isPregnant"
              Identifier _pandaId
                 Type: uint256
                 Source: "_pandaId"
      ExpressionStatement
         Gas costs: 257
         Source: "_approve(_pandaId, saleAuction)"
        FunctionCall
           Type: tuple()
           Source: "_approve(_pandaId, saleAuction)"
          Identifier _approve
             Type: function (uint256,address)
             Source: "_approve"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier saleAuction
             Type: contract SaleClockAuction
             Source: "saleAuction"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        )"
        FunctionCall
           Type: tuple()
           Source: "saleAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        )"
          MemberAccess to member createAuction
             Type: function (uint256,uint256,uint256,uint256,address) external
             Source: "saleAuction.createAuction"
            Identifier saleAuction
               Type: contract SaleClockAuction
               Source: "saleAuction"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier _startingPrice
             Type: uint256
             Source: "_startingPrice"
          Identifier _endingPrice
             Type: uint256
             Source: "_endingPrice"
          Identifier _duration
             Type: uint256
             Source: "_duration"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "createSaleAuctionERC20" - public
     Source: "function createSaleAuctionERC20(\n        uint256 _pandaId,\n        address _erc20address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuctionERC20);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _pandaId,\n        address _erc20address,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )"
      VariableDeclaration "_pandaId"
         Type: uint256
         Source: "uint256 _pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_erc20address"
         Type: address
         Source: "address _erc20address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        // Ensure the panda is not pregnant to prevent the auction\n        // contract accidentally receiving ownership of the child.\n        // NOTE: the panda IS allowed to be in a cooldown.\n        require(!isPregnant(_pandaId));\n        _approve(_pandaId, saleAuctionERC20);\n        // Sale auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _pandaId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
      ExpressionStatement
         Gas costs: 47
         Source: "require(!isPregnant(_pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(!isPregnant(_pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          UnaryOperation (prefix) !
             Type: bool
             Source: "!isPregnant(_pandaId)"
            FunctionCall
               Type: bool
               Source: "isPregnant(_pandaId)"
              Identifier isPregnant
                 Type: function (uint256) view returns (bool)
                 Source: "isPregnant"
              Identifier _pandaId
                 Type: uint256
                 Source: "_pandaId"
      ExpressionStatement
         Gas costs: 257
         Source: "_approve(_pandaId, saleAuctionERC20)"
        FunctionCall
           Type: tuple()
           Source: "_approve(_pandaId, saleAuctionERC20)"
          Identifier _approve
             Type: function (uint256,address)
             Source: "_approve"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier saleAuctionERC20
             Type: contract SaleClockAuctionERC20
             Source: "saleAuctionERC20"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        )"
        FunctionCall
           Type: tuple()
           Source: "saleAuctionERC20.createAuction(\n            _pandaId,\n            _erc20address,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        )"
          MemberAccess to member createAuction
             Type: function (uint256,address,uint256,uint256,uint256,address) external
             Source: "saleAuctionERC20.createAuction"
            Identifier saleAuctionERC20
               Type: contract SaleClockAuctionERC20
               Source: "saleAuctionERC20"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier _erc20address
             Type: address
             Source: "_erc20address"
          Identifier _startingPrice
             Type: uint256
             Source: "_startingPrice"
          Identifier _endingPrice
             Type: uint256
             Source: "_endingPrice"
          Identifier _duration
             Type: uint256
             Source: "_duration"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "switchSaleAuctionERC20For" - public
     Source: "function switchSaleAuctionERC20For(address _erc20address, uint256 _onoff) external onlyCOO{\n        saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _erc20address, uint256 _onoff)"
      VariableDeclaration "_erc20address"
         Type: address
         Source: "address _erc20address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_onoff"
         Type: uint256
         Source: "uint256 _onoff"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCOO"
       Gas costs: 0
       Source: "onlyCOO"
      Identifier onlyCOO
         Type: modifier ()
         Source: "onlyCOO"
    Block
       Source: "{\n        saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff);\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff)"
        FunctionCall
           Type: tuple()
           Source: "saleAuctionERC20.erc20ContractSwitch(_erc20address,_onoff)"
          MemberAccess to member erc20ContractSwitch
             Type: function (address,uint256) external
             Source: "saleAuctionERC20.erc20ContractSwitch"
            Identifier saleAuctionERC20
               Type: contract SaleClockAuctionERC20
               Source: "saleAuctionERC20"
          Identifier _erc20address
             Type: address
             Source: "_erc20address"
          Identifier _onoff
             Type: uint256
             Source: "_onoff"
  FunctionDefinition "createSiringAuction" - public
     Source: "function createSiringAuction(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )\n        external\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        require(isReadyToBreed(_pandaId));\n        _approve(_pandaId, siringAuction);\n        // Siring auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _pandaId,\n        uint256 _startingPrice,\n        uint256 _endingPrice,\n        uint256 _duration\n    )"
      VariableDeclaration "_pandaId"
         Type: uint256
         Source: "uint256 _pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_startingPrice"
         Type: uint256
         Source: "uint256 _startingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_endingPrice"
         Type: uint256
         Source: "uint256 _endingPrice"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_duration"
         Type: uint256
         Source: "uint256 _duration"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Auction contract checks input sizes\n        // If panda is already on any auction, this will throw\n        // because it will be owned by the auction contract.\n        require(_owns(msg.sender, _pandaId));\n        require(isReadyToBreed(_pandaId));\n        _approve(_pandaId, siringAuction);\n        // Siring auction throws if inputs are invalid and clears\n        // transfer and sire approval after escrowing the panda.\n        siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        );\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _pandaId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
      ExpressionStatement
         Gas costs: 44
         Source: "require(isReadyToBreed(_pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(isReadyToBreed(_pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "isReadyToBreed(_pandaId)"
            Identifier isReadyToBreed
               Type: function (uint256) view returns (bool)
               Source: "isReadyToBreed"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
      ExpressionStatement
         Gas costs: 257
         Source: "_approve(_pandaId, siringAuction)"
        FunctionCall
           Type: tuple()
           Source: "_approve(_pandaId, siringAuction)"
          Identifier _approve
             Type: function (uint256,address)
             Source: "_approve"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier siringAuction
             Type: contract SiringClockAuction
             Source: "siringAuction"
      ExpressionStatement
         Gas costs: [???]
         Source: "siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        )"
        FunctionCall
           Type: tuple()
           Source: "siringAuction.createAuction(\n            _pandaId,\n            _startingPrice,\n            _endingPrice,\n            _duration,\n            msg.sender\n        )"
          MemberAccess to member createAuction
             Type: function (uint256,uint256,uint256,uint256,address) external
             Source: "siringAuction.createAuction"
            Identifier siringAuction
               Type: contract SiringClockAuction
               Source: "siringAuction"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier _startingPrice
             Type: uint256
             Source: "_startingPrice"
          Identifier _endingPrice
             Type: uint256
             Source: "_endingPrice"
          Identifier _duration
             Type: uint256
             Source: "_duration"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "bidOnSiringAuction" - public
     Source: "function bidOnSiringAuction(\n        uint256 _sireId,\n        uint256 _matronId\n    )\n        external\n        payable\n        whenNotPaused\n    {\n        // Auction contract checks input sizes\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n        // Define the current price of the auction.\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n\n        // Siring auction will throw if the bid fails.\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId), msg.sender);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(\n        uint256 _sireId,\n        uint256 _matronId\n    )"
      VariableDeclaration "_sireId"
         Type: uint256
         Source: "uint256 _sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_matronId"
         Type: uint256
         Source: "uint256 _matronId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        // Auction contract checks input sizes\n        require(_owns(msg.sender, _matronId));\n        require(isReadyToBreed(_matronId));\n        require(_canBreedWithViaAuction(_matronId, _sireId));\n\n        // Define the current price of the auction.\n        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);\n        require(msg.value >= currentPrice + autoBirthFee);\n\n        // Siring auction will throw if the bid fails.\n        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);\n        _breedWith(uint32(_matronId), uint32(_sireId), msg.sender);\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _matronId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _matronId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _matronId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
      ExpressionStatement
         Gas costs: 44
         Source: "require(isReadyToBreed(_matronId))"
        FunctionCall
           Type: tuple()
           Source: "require(isReadyToBreed(_matronId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "isReadyToBreed(_matronId)"
            Identifier isReadyToBreed
               Type: function (uint256) view returns (bool)
               Source: "isReadyToBreed"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
      ExpressionStatement
         Gas costs: 36
         Source: "require(_canBreedWithViaAuction(_matronId, _sireId))"
        FunctionCall
           Type: tuple()
           Source: "require(_canBreedWithViaAuction(_matronId, _sireId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_canBreedWithViaAuction(_matronId, _sireId)"
            Identifier _canBreedWithViaAuction
               Type: function (uint256,uint256) view returns (bool)
               Source: "_canBreedWithViaAuction"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 currentPrice = siringAuction.getCurrentPrice(_sireId)"
        VariableDeclaration "currentPrice"
           Type: uint256
           Source: "uint256 currentPrice"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "siringAuction.getCurrentPrice(_sireId)"
          MemberAccess to member getCurrentPrice
             Type: function (uint256) view external returns (uint256)
             Source: "siringAuction.getCurrentPrice"
            Identifier siringAuction
               Type: contract SiringClockAuction
               Source: "siringAuction"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      ExpressionStatement
         Gas costs: 243
         Source: "require(msg.value >= currentPrice + autoBirthFee)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value >= currentPrice + autoBirthFee)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= currentPrice + autoBirthFee"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            BinaryOperation using operator +
               Type: uint256
               Source: "currentPrice + autoBirthFee"
              Identifier currentPrice
                 Type: uint256
                 Source: "currentPrice"
              Identifier autoBirthFee
                 Type: uint256
                 Source: "autoBirthFee"
      ExpressionStatement
         Gas costs: [???]
         Source: "siringAuction.bid.value(msg.value - autoBirthFee)(_sireId)"
        FunctionCall
           Type: tuple()
           Source: "siringAuction.bid.value(msg.value - autoBirthFee)(_sireId)"
          FunctionCall
             Type: function (uint256) payable external
             Source: "siringAuction.bid.value(msg.value - autoBirthFee)"
            MemberAccess to member value
               Type: function (uint256) returns (function (uint256) payable external)
               Source: "siringAuction.bid.value"
              MemberAccess to member bid
                 Type: function (uint256) payable external
                 Source: "siringAuction.bid"
                Identifier siringAuction
                   Type: contract SiringClockAuction
                   Source: "siringAuction"
            BinaryOperation using operator -
               Type: uint256
               Source: "msg.value - autoBirthFee"
              MemberAccess to member value
                 Type: uint256
                 Source: "msg.value"
                Identifier msg
                   Type: msg
                   Source: "msg"
              Identifier autoBirthFee
                 Type: uint256
                 Source: "autoBirthFee"
          Identifier _sireId
             Type: uint256
             Source: "_sireId"
      ExpressionStatement
         Gas costs: 24
         Source: "_breedWith(uint32(_matronId), uint32(_sireId), msg.sender)"
        FunctionCall
           Type: tuple()
           Source: "_breedWith(uint32(_matronId), uint32(_sireId), msg.sender)"
          Identifier _breedWith
             Type: function (uint256,uint256,address)
             Source: "_breedWith"
          FunctionCall
             Type: uint32
             Source: "uint32(_matronId)"
            ElementaryTypeNameExpression uint32
               Type: type(uint32)
               Source: "uint32"
            Identifier _matronId
               Type: uint256
               Source: "_matronId"
          FunctionCall
             Type: uint32
             Source: "uint32(_sireId)"
            ElementaryTypeNameExpression uint32
               Type: type(uint32)
               Source: "uint32"
            Identifier _sireId
               Type: uint256
               Source: "_sireId"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "withdrawAuctionBalances" - public
     Source: "function withdrawAuctionBalances() external onlyCLevel {\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCLevel"
       Gas costs: 0
       Source: "onlyCLevel"
      Identifier onlyCLevel
         Type: modifier ()
         Source: "onlyCLevel"
    Block
       Source: "{\n        saleAuction.withdrawBalance();\n        siringAuction.withdrawBalance();\n    }"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuction.withdrawBalance()"
        FunctionCall
           Type: tuple()
           Source: "saleAuction.withdrawBalance()"
          MemberAccess to member withdrawBalance
             Type: function () external
             Source: "saleAuction.withdrawBalance"
            Identifier saleAuction
               Type: contract SaleClockAuction
               Source: "saleAuction"
      ExpressionStatement
         Gas costs: [???]
         Source: "siringAuction.withdrawBalance()"
        FunctionCall
           Type: tuple()
           Source: "siringAuction.withdrawBalance()"
          MemberAccess to member withdrawBalance
             Type: function () external
             Source: "siringAuction.withdrawBalance"
            Identifier siringAuction
               Type: contract SiringClockAuction
               Source: "siringAuction"
  FunctionDefinition "withdrawERC20Balance" - public
     Source: "function withdrawERC20Balance(address _erc20Address, address _to) external onlyCLevel {\n        require(saleAuctionERC20 != address(0));\n        saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _erc20Address, address _to)"
      VariableDeclaration "_erc20Address"
         Type: address
         Source: "address _erc20Address"
        ElementaryTypeName address
           Source: "address"
      VariableDeclaration "_to"
         Type: address
         Source: "address _to"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCLevel"
       Gas costs: 0
       Source: "onlyCLevel"
      Identifier onlyCLevel
         Type: modifier ()
         Source: "onlyCLevel"
    Block
       Source: "{\n        require(saleAuctionERC20 != address(0));\n        saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to);\n    }"
      ExpressionStatement
         Gas costs: 286
         Source: "require(saleAuctionERC20 != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(saleAuctionERC20 != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "saleAuctionERC20 != address(0)"
            Identifier saleAuctionERC20
               Type: contract SaleClockAuctionERC20
               Source: "saleAuctionERC20"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to)"
        FunctionCall
           Type: bool
           Source: "saleAuctionERC20.withdrawERC20Balance(_erc20Address,_to)"
          MemberAccess to member withdrawERC20Balance
             Type: function (address,address) external returns (bool)
             Source: "saleAuctionERC20.withdrawERC20Balance"
            Identifier saleAuctionERC20
               Type: contract SaleClockAuctionERC20
               Source: "saleAuctionERC20"
          Identifier _erc20Address
             Type: address
             Source: "_erc20Address"
          Identifier _to
             Type: address
             Source: "_to"
ContractDefinition "PandaMinting"
   Source: "contract PandaMinting is PandaAuction {\n\n    // Limits the number of cats the contract owner can ever create.\n    //uint256 public constant PROMO_CREATION_LIMIT = 5000;\n    uint256 public constant GEN0_CREATION_LIMIT = 45000;\n\n\n    // Constants for gen0 auctions.\n    uint256 public constant GEN0_STARTING_PRICE = 100 finney;\n    uint256 public constant GEN0_AUCTION_DURATION = 1 days;\n    uint256 public constant OPEN_PACKAGE_PRICE = 10 finney;\n\n\n    // Counts the number of cats the contract owner has created.\n    //uint256 public promoCreatedCount;\n\n\n    /// @dev we can create promo kittens, up to a limit. Only callable by COO\n    /// @param _genes the encoded genes of the kitten to be created, any value is accepted\n    /// @param _owner the future owner of the created kittens. Default to contract COO\n    function createWizzPanda(uint256[2] _genes, uint256 _generation, address _owner) external onlyCOO {\n        address pandaOwner = _owner;\n        if (pandaOwner == address(0)) {\n            pandaOwner = cooAddress;\n        }\n\n        _createPanda(0, 0, _generation, _genes, pandaOwner);\n    }\n\n    /// @dev create pandaWithGenes\n    /// @param _genes panda genes\n    /// @param _type  0 common 1 rare\n    function createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)\n        external\n        payable\n        onlyCOO\n        whenNotPaused\n    {\n        require(msg.value >= OPEN_PACKAGE_PRICE);\n        uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction);\n        saleAuction.createPanda(kittenId,_type);\n    }\n\n    //function buyPandaERC20(address _erc20Address, address _buyerAddress, uint256 _pandaID, uint256 _amount)\n    //external\n    //onlyCOO\n    //whenNotPaused {\n    //    saleAuctionERC20.bid(_erc20Address, _buyerAddress, _pandaID, _amount);\n    //}\n\n    /// @dev Creates a new gen0 panda with the given genes and\n    ///  creates an auction for it.\n    //function createGen0Auction(uint256[2] _genes) external onlyCOO {\n    //    require(gen0CreatedCount < GEN0_CREATION_LIMIT);\n    //\n    //    uint256 pandaId = _createPanda(0, 0, 0, _genes, address(this));\n    //    _approve(pandaId, saleAuction);\n    //\n    //    saleAuction.createAuction(\n    //        pandaId,\n    //        _computeNextGen0Price(),\n    //        0,\n    //        GEN0_AUCTION_DURATION,\n    //        address(this)\n    //    );\n    //\n    //    gen0CreatedCount++;\n    //}\n\n    function createGen0Auction(uint256 _pandaId) external onlyCOO {\n        require(_owns(msg.sender, _pandaId));\n        //require(pandas[_pandaId].generation==1);\n\n        _approve(_pandaId, saleAuction);\n\n        saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        );\n    }\n\n    /// @dev Computes the next gen0 auction starting price, given\n    ///  the average of the past 5 prices + 50%.\n    function _computeNextGen0Price() internal view returns(uint256) {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n\n        // Sanity check to ensure we don't overflow arithmetic\n        require(avePrice == uint256(uint128(avePrice)));\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n        // We never auction for less than starting price\n        if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }\n\n        return nextPrice;\n    }\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "PandaAuction"
    UserDefinedTypeName "PandaAuction"
       Source: "PandaAuction"
  VariableDeclaration "GEN0_CREATION_LIMIT"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant GEN0_CREATION_LIMIT = 45000"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 45000
       Type: int_const 45000
       Source: "45000"
  VariableDeclaration "GEN0_STARTING_PRICE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant GEN0_STARTING_PRICE = 100 finney"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 100
       Type: int_const 100000000000000000
       Source: "100 finney"
  VariableDeclaration "GEN0_AUCTION_DURATION"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant GEN0_AUCTION_DURATION = 1 days"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 1
       Type: int_const 86400
       Source: "1 days"
  VariableDeclaration "OPEN_PACKAGE_PRICE"
     Type: uint256
     Gas costs: [???]
     Source: "uint256 public constant OPEN_PACKAGE_PRICE = 10 finney"
    ElementaryTypeName uint256
       Source: "uint256"
    Literal, token: [no token] value: 10
       Type: int_const 10000000000000000
       Source: "10 finney"
  FunctionDefinition "createWizzPanda" - public
     Source: "function createWizzPanda(uint256[2] _genes, uint256 _generation, address _owner) external onlyCOO {\n        address pandaOwner = _owner;\n        if (pandaOwner == address(0)) {\n            pandaOwner = cooAddress;\n        }\n\n        _createPanda(0, 0, _generation, _genes, pandaOwner);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256[2] _genes, uint256 _generation, address _owner)"
      VariableDeclaration "_genes"
         Type: uint256[2] calldata
         Source: "uint256[2] _genes"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
      VariableDeclaration "_generation"
         Type: uint256
         Source: "uint256 _generation"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_owner"
         Type: address
         Source: "address _owner"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCOO"
       Gas costs: 0
       Source: "onlyCOO"
      Identifier onlyCOO
         Type: modifier ()
         Source: "onlyCOO"
    Block
       Source: "{\n        address pandaOwner = _owner;\n        if (pandaOwner == address(0)) {\n            pandaOwner = cooAddress;\n        }\n\n        _createPanda(0, 0, _generation, _genes, pandaOwner);\n    }"
      VariableDeclarationStatement
         Gas costs: 11
         Source: "address pandaOwner = _owner"
        VariableDeclaration "pandaOwner"
           Type: address
           Source: "address pandaOwner"
          ElementaryTypeName address
             Source: "address"
        Identifier _owner
           Type: address
           Source: "_owner"
      IfStatement
         Source: "if (pandaOwner == address(0)) {\n            pandaOwner = cooAddress;\n        }"
        BinaryOperation using operator ==
           Type: bool
           Gas costs: 21
           Source: "pandaOwner == address(0)"
          Identifier pandaOwner
             Type: address
             Source: "pandaOwner"
          FunctionCall
             Type: address
             Source: "address(0)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
        Block
           Source: "{\n            pandaOwner = cooAddress;\n        }"
          ExpressionStatement
             Gas costs: 244
             Source: "pandaOwner = cooAddress"
            Assignment using operator =
               Type: address
               Source: "pandaOwner = cooAddress"
              Identifier pandaOwner
                 Type: address
                 Source: "pandaOwner"
              Identifier cooAddress
                 Type: address
                 Source: "cooAddress"
      ExpressionStatement
         Gas costs: [???]
         Source: "_createPanda(0, 0, _generation, _genes, pandaOwner)"
        FunctionCall
           Type: uint256
           Source: "_createPanda(0, 0, _generation, _genes, pandaOwner)"
          Identifier _createPanda
             Type: function (uint256,uint256,uint256,uint256[2] memory,address) returns (uint256)
             Source: "_createPanda"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier _generation
             Type: uint256
             Source: "_generation"
          Identifier _genes
             Type: uint256[2] calldata
             Source: "_genes"
          Identifier pandaOwner
             Type: address
             Source: "pandaOwner"
  FunctionDefinition "createPanda" - public
     Source: "function createPanda(uint256[2] _genes,uint256 _generation,uint256 _type)\n        external\n        payable\n        onlyCOO\n        whenNotPaused\n    {\n        require(msg.value >= OPEN_PACKAGE_PRICE);\n        uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction);\n        saleAuction.createPanda(kittenId,_type);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256[2] _genes,uint256 _generation,uint256 _type)"
      VariableDeclaration "_genes"
         Type: uint256[2] calldata
         Source: "uint256[2] _genes"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
      VariableDeclaration "_generation"
         Type: uint256
         Source: "uint256 _generation"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "_type"
         Type: uint256
         Source: "uint256 _type"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCOO"
       Gas costs: 0
       Source: "onlyCOO"
      Identifier onlyCOO
         Type: modifier ()
         Source: "onlyCOO"
    ModifierInvocation "whenNotPaused"
       Gas costs: 0
       Source: "whenNotPaused"
      Identifier whenNotPaused
         Type: modifier ()
         Source: "whenNotPaused"
    Block
       Source: "{\n        require(msg.value >= OPEN_PACKAGE_PRICE);\n        uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction);\n        saleAuction.createPanda(kittenId,_type);\n    }"
      ExpressionStatement
         Gas costs: 34
         Source: "require(msg.value >= OPEN_PACKAGE_PRICE)"
        FunctionCall
           Type: tuple()
           Source: "require(msg.value >= OPEN_PACKAGE_PRICE)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator >=
             Type: bool
             Source: "msg.value >= OPEN_PACKAGE_PRICE"
            MemberAccess to member value
               Type: uint256
               Source: "msg.value"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier OPEN_PACKAGE_PRICE
               Type: uint256
               Source: "OPEN_PACKAGE_PRICE"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 kittenId = _createPanda(0, 0, _generation, _genes, saleAuction)"
        VariableDeclaration "kittenId"
           Type: uint256
           Source: "uint256 kittenId"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "_createPanda(0, 0, _generation, _genes, saleAuction)"
          Identifier _createPanda
             Type: function (uint256,uint256,uint256,uint256[2] memory,address) returns (uint256)
             Source: "_createPanda"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier _generation
             Type: uint256
             Source: "_generation"
          Identifier _genes
             Type: uint256[2] calldata
             Source: "_genes"
          Identifier saleAuction
             Type: contract SaleClockAuction
             Source: "saleAuction"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuction.createPanda(kittenId,_type)"
        FunctionCall
           Type: tuple()
           Source: "saleAuction.createPanda(kittenId,_type)"
          MemberAccess to member createPanda
             Type: function (uint256,uint256) external
             Source: "saleAuction.createPanda"
            Identifier saleAuction
               Type: contract SaleClockAuction
               Source: "saleAuction"
          Identifier kittenId
             Type: uint256
             Source: "kittenId"
          Identifier _type
             Type: uint256
             Source: "_type"
  FunctionDefinition "createGen0Auction" - public
     Source: "function createGen0Auction(uint256 _pandaId) external onlyCOO {\n        require(_owns(msg.sender, _pandaId));\n        //require(pandas[_pandaId].generation==1);\n\n        _approve(_pandaId, saleAuction);\n\n        saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _pandaId)"
      VariableDeclaration "_pandaId"
         Type: uint256
         Source: "uint256 _pandaId"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCOO"
       Gas costs: 0
       Source: "onlyCOO"
      Identifier onlyCOO
         Type: modifier ()
         Source: "onlyCOO"
    Block
       Source: "{\n        require(_owns(msg.sender, _pandaId));\n        //require(pandas[_pandaId].generation==1);\n\n        _approve(_pandaId, saleAuction);\n\n        saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        );\n    }"
      ExpressionStatement
         Gas costs: 46
         Source: "require(_owns(msg.sender, _pandaId))"
        FunctionCall
           Type: tuple()
           Source: "require(_owns(msg.sender, _pandaId))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          FunctionCall
             Type: bool
             Source: "_owns(msg.sender, _pandaId)"
            Identifier _owns
               Type: function (address,uint256) view returns (bool)
               Source: "_owns"
            MemberAccess to member sender
               Type: address
               Source: "msg.sender"
              Identifier msg
                 Type: msg
                 Source: "msg"
            Identifier _pandaId
               Type: uint256
               Source: "_pandaId"
      ExpressionStatement
         Gas costs: 257
         Source: "_approve(_pandaId, saleAuction)"
        FunctionCall
           Type: tuple()
           Source: "_approve(_pandaId, saleAuction)"
          Identifier _approve
             Type: function (uint256,address)
             Source: "_approve"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          Identifier saleAuction
             Type: contract SaleClockAuction
             Source: "saleAuction"
      ExpressionStatement
         Gas costs: [???]
         Source: "saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        )"
        FunctionCall
           Type: tuple()
           Source: "saleAuction.createGen0Auction(\n            _pandaId,\n            _computeNextGen0Price(),\n            0,\n            GEN0_AUCTION_DURATION,\n            msg.sender\n        )"
          MemberAccess to member createGen0Auction
             Type: function (uint256,uint256,uint256,uint256,address) external
             Source: "saleAuction.createGen0Auction"
            Identifier saleAuction
               Type: contract SaleClockAuction
               Source: "saleAuction"
          Identifier _pandaId
             Type: uint256
             Source: "_pandaId"
          FunctionCall
             Type: uint256
             Source: "_computeNextGen0Price()"
            Identifier _computeNextGen0Price
               Type: function () view returns (uint256)
               Source: "_computeNextGen0Price"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier GEN0_AUCTION_DURATION
             Type: uint256
             Source: "GEN0_AUCTION_DURATION"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "_computeNextGen0Price" - const
     Source: "function _computeNextGen0Price() internal view returns(uint256) {\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n\n        // Sanity check to ensure we don't overflow arithmetic\n        require(avePrice == uint256(uint128(avePrice)));\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n        // We never auction for less than starting price\n        if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }\n\n        return nextPrice;\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 3
       Source: "(uint256)"
      VariableDeclaration ""
         Type: uint256
         Source: "uint256"
        ElementaryTypeName uint256
           Source: "uint256"
    Block
       Source: "{\n        uint256 avePrice = saleAuction.averageGen0SalePrice();\n\n        // Sanity check to ensure we don't overflow arithmetic\n        require(avePrice == uint256(uint128(avePrice)));\n\n        uint256 nextPrice = avePrice + (avePrice / 2);\n\n        // We never auction for less than starting price\n        if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }\n\n        return nextPrice;\n    }"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256 avePrice = saleAuction.averageGen0SalePrice()"
        VariableDeclaration "avePrice"
           Type: uint256
           Source: "uint256 avePrice"
          ElementaryTypeName uint256
             Source: "uint256"
        FunctionCall
           Type: uint256
           Source: "saleAuction.averageGen0SalePrice()"
          MemberAccess to member averageGen0SalePrice
             Type: function () view external returns (uint256)
             Source: "saleAuction.averageGen0SalePrice"
            Identifier saleAuction
               Type: contract SaleClockAuction
               Source: "saleAuction"
      ExpressionStatement
         Gas costs: 41
         Source: "require(avePrice == uint256(uint128(avePrice)))"
        FunctionCall
           Type: tuple()
           Source: "require(avePrice == uint256(uint128(avePrice)))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "avePrice == uint256(uint128(avePrice))"
            Identifier avePrice
               Type: uint256
               Source: "avePrice"
            FunctionCall
               Type: uint256
               Source: "uint256(uint128(avePrice))"
              ElementaryTypeNameExpression uint256
                 Type: type(uint256)
                 Source: "uint256"
              FunctionCall
                 Type: uint128
                 Source: "uint128(avePrice)"
                ElementaryTypeNameExpression uint128
                   Type: type(uint128)
                   Source: "uint128"
                Identifier avePrice
                   Type: uint256
                   Source: "avePrice"
      VariableDeclarationStatement
         Gas costs: 48
         Source: "uint256 nextPrice = avePrice + (avePrice / 2)"
        VariableDeclaration "nextPrice"
           Type: uint256
           Source: "uint256 nextPrice"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator +
           Type: uint256
           Source: "avePrice + (avePrice / 2)"
          Identifier avePrice
             Type: uint256
             Source: "avePrice"
          TupleExpression
             Type: uint256
             Source: "(avePrice / 2)"
            BinaryOperation using operator /
               Type: uint256
               Source: "avePrice / 2"
              Identifier avePrice
                 Type: uint256
                 Source: "avePrice"
              Literal, token: [no token] value: 2
                 Type: int_const 2
                 Source: "2"
      IfStatement
         Source: "if (nextPrice < GEN0_STARTING_PRICE) {\n            nextPrice = GEN0_STARTING_PRICE;\n        }"
        BinaryOperation using operator <
           Type: bool
           Gas costs: 6
           Source: "nextPrice < GEN0_STARTING_PRICE"
          Identifier nextPrice
             Type: uint256
             Source: "nextPrice"
          Identifier GEN0_STARTING_PRICE
             Type: uint256
             Source: "GEN0_STARTING_PRICE"
        Block
           Source: "{\n            nextPrice = GEN0_STARTING_PRICE;\n        }"
          ExpressionStatement
             Gas costs: 5
             Source: "nextPrice = GEN0_STARTING_PRICE"
            Assignment using operator =
               Type: uint256
               Source: "nextPrice = GEN0_STARTING_PRICE"
              Identifier nextPrice
                 Type: uint256
                 Source: "nextPrice"
              Identifier GEN0_STARTING_PRICE
                 Type: uint256
                 Source: "GEN0_STARTING_PRICE"
      Return
         Gas costs: 8
         Source: "return nextPrice"
        Identifier nextPrice
           Type: uint256
           Source: "nextPrice"
ContractDefinition "PandaCore"
   Source: "contract PandaCore is PandaMinting {\n\n    // This is the main CryptoPandas contract. In order to keep our code seperated into logical sections,\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\n    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\n    // panda ownership. The genetic combination algorithm is kept seperate so we can open-source all of\n    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.\n    // Don't worry, I'm sure someone will reverse engineer it soon enough!\n    //\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\n    // facet of functionality of CK. This allows us to keep related code bundled together while still\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\n    //\n    //      - PandaBase: This is where we define the most fundamental code shared throughout the core\n    //             functionality. This includes our main data storage, constants and data types, plus\n    //             internal functions for managing these items.\n    //\n    //      - PandaAccessControl: This contract manages the various addresses and constraints for operations\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\n    //\n    //      - PandaOwnership: This provides the methods required for basic non-fungible token\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\n    //\n    //      - PandaBreeding: This file contains the methods necessary to breed cats together, including\n    //             keeping track of siring offers, and relies on an external genetic combination contract.\n    //\n    //      - PandaAuctions: Here we have the public methods for auctioning or bidding on cats or siring\n    //             services. The actual auction functionality is handled in two sibling contracts (one\n    //             for sales and one for siring), while auction creation and bidding is mostly mediated\n    //             through this facet of the core contract.\n    //\n    //      - PandaMinting: This final facet contains the functionality we use for creating new gen0 cats.\n    //             the community is new), and all others can only be created and then immediately put up\n    //             for auction via an algorithmically determined starting price. Regardless of how they\n    //             are created, there is a hard limit of 50k gen0 cats. After that, it's all up to the\n    //             community to breed, breed, breed!\n\n    // Set in case the core contract is broken and an upgrade is required\n    address public newContractAddress;\n\n\n    /// @notice Creates the main CryptoPandas smart contract instance.\n    function PandaCore() public {\n        // Starts paused.\n        paused = true;\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial COO\n        cooAddress = msg.sender;\n\n        // move these code to init(), so we not excceed gas limit\n        //uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        //wizzPandaQuota[1] = 100;\n\n        //_createPanda(0, 0, 0, _genes, address(0));\n    }\n\n    /// init contract\n    function init() external onlyCEO whenPaused {\n        // make sure init() only run once\n        require(pandas.length == 0);\n        // start with the mythical kitten 0 - so we don't have generation-0 parent issues\n        uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        wizzPandaQuota[1] = 100;\n       _createPanda(0, 0, 0, _genes, address(0));\n    }\n\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n    ///  breaking bug. This method does nothing but keep track of the new contract and\n    ///  emit a message indicating that the new address is set. It's up to clients of this\n    ///  contract to update to the new contract address in that case. (This contract will\n    ///  be paused indefinitely if such an upgrade takes place.)\n    /// @param _v2Address new address\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        // See README.md for updgrade plan\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }\n    \n\n    /// @notice No tipping!\n    /// @dev Reject all Ether from being sent here, unless it's from one of the\n    ///  two auction contracts. (Hopefully, we can prevent user accidents.)\n    function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n    }\n\n    /// @notice Returns all the relevant information about a specific panda.\n    /// @param _id The ID of the panda of interest.\n    function getPanda(uint256 _id)\n        external\n        view\n        returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256[2] genes\n    ) {\n        Panda storage kit = pandas[_id];\n\n        // if this variable is 0 then it's not gestating\n        isGestating = (kit.siringWithId != 0);\n        isReady = (kit.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(kit.cooldownIndex);\n        nextActionAt = uint256(kit.cooldownEndBlock);\n        siringWithId = uint256(kit.siringWithId);\n        birthTime = uint256(kit.birthTime);\n        matronId = uint256(kit.matronId);\n        sireId = uint256(kit.sireId);\n        generation = uint256(kit.generation);\n        genes = kit.genes;\n    }\n\n    /// @dev Override unpause so it requires all external contract addresses\n    ///  to be set before contract can be unpaused. Also, we can't have\n    ///  newContractAddress set either, because then the contract was upgraded.\n    /// @notice This is public rather than external so we can call super.unpause\n    ///  without using an expensive CALL.\n    function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n\n        // Actually unpause the contract.\n        super.unpause();\n    }\n\n    // @dev Allows the CFO to capture the balance available to the contract.\n    function withdrawBalance() external onlyCFO {\n        uint256 balance = this.balance;\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\n        uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee;\n\n        if (balance > subtractFees) {\n             // <yes> <report> UNCHECKED_LL_CALLS\n            cfoAddress.send(balance - subtractFees);\n        }\n    }\n}"
  InheritanceSpecifier
     Gas costs: 0
     Source: "PandaMinting"
    UserDefinedTypeName "PandaMinting"
       Source: "PandaMinting"
  VariableDeclaration "newContractAddress"
     Type: address
     Gas costs: [???]
     Source: "address public newContractAddress"
    ElementaryTypeName address
       Source: "address"
  FunctionDefinition "PandaCore" - public
     Source: "function PandaCore() public {\n        // Starts paused.\n        paused = true;\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial COO\n        cooAddress = msg.sender;\n\n        // move these code to init(), so we not excceed gas limit\n        //uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        //wizzPandaQuota[1] = 100;\n\n        //_createPanda(0, 0, 0, _genes, address(0));\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        // Starts paused.\n        paused = true;\n\n        // the creator of the contract is the initial CEO\n        ceoAddress = msg.sender;\n\n        // the creator of the contract is also the initial COO\n        cooAddress = msg.sender;\n\n        // move these code to init(), so we not excceed gas limit\n        //uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        //wizzPandaQuota[1] = 100;\n\n        //_createPanda(0, 0, 0, _genes, address(0));\n    }"
      ExpressionStatement
         Gas costs: 0
         Source: "paused = true"
        Assignment using operator =
           Type: bool
           Source: "paused = true"
          Identifier paused
             Type: bool
             Source: "paused"
          Literal, token: true value: true
             Type: bool
             Source: "true"
      ExpressionStatement
         Gas costs: 0
         Source: "ceoAddress = msg.sender"
        Assignment using operator =
           Type: address
           Source: "ceoAddress = msg.sender"
          Identifier ceoAddress
             Type: address
             Source: "ceoAddress"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
      ExpressionStatement
         Gas costs: 0
         Source: "cooAddress = msg.sender"
        Assignment using operator =
           Type: address
           Source: "cooAddress = msg.sender"
          Identifier cooAddress
             Type: address
             Source: "cooAddress"
          MemberAccess to member sender
             Type: address
             Source: "msg.sender"
            Identifier msg
               Type: msg
               Source: "msg"
  FunctionDefinition "init" - public
     Source: "function init() external onlyCEO whenPaused {\n        // make sure init() only run once\n        require(pandas.length == 0);\n        // start with the mythical kitten 0 - so we don't have generation-0 parent issues\n        uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        wizzPandaQuota[1] = 100;\n       _createPanda(0, 0, 0, _genes, address(0));\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    ModifierInvocation "whenPaused"
       Gas costs: 0
       Source: "whenPaused"
      Identifier whenPaused
         Type: modifier ()
         Source: "whenPaused"
    Block
       Source: "{\n        // make sure init() only run once\n        require(pandas.length == 0);\n        // start with the mythical kitten 0 - so we don't have generation-0 parent issues\n        uint256[2] memory _genes = [uint256(-1),uint256(-1)];\n\n        wizzPandaQuota[1] = 100;\n       _createPanda(0, 0, 0, _genes, address(0));\n    }"
      ExpressionStatement
         Gas costs: 243
         Source: "require(pandas.length == 0)"
        FunctionCall
           Type: tuple()
           Source: "require(pandas.length == 0)"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "pandas.length == 0"
            MemberAccess to member length
               Type: uint256
               Source: "pandas.length"
              Identifier pandas
                 Type: struct PandaBase.Panda storage ref[] storage ref
                 Source: "pandas"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
      VariableDeclarationStatement
         Gas costs: [???]
         Source: "uint256[2] memory _genes = [uint256(-1),uint256(-1)]"
        VariableDeclaration "_genes"
           Type: uint256[2] memory
           Source: "uint256[2] memory _genes"
          ArrayTypeName
             Source: "uint256[2]"
            ElementaryTypeName uint256
               Source: "uint256"
            Literal, token: [no token] value: 2
               Type unknown.
               Source: "2"
        TupleExpression
           Type: uint256[2] memory
           Source: "[uint256(-1),uint256(-1)]"
          FunctionCall
             Type: uint256
             Source: "uint256(-1)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            UnaryOperation (prefix) -
               Type: int_const -1
               Source: "-1"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          FunctionCall
             Type: uint256
             Source: "uint256(-1)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            UnaryOperation (prefix) -
               Type: int_const -1
               Source: "-1"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
      ExpressionStatement
         Gas costs: 20092
         Source: "wizzPandaQuota[1] = 100"
        Assignment using operator =
           Type: uint256
           Source: "wizzPandaQuota[1] = 100"
          IndexAccess
             Type: uint256
             Source: "wizzPandaQuota[1]"
            Identifier wizzPandaQuota
               Type: mapping(uint256 => uint256)
               Source: "wizzPandaQuota"
            Literal, token: [no token] value: 1
               Type: int_const 1
               Source: "1"
          Literal, token: [no token] value: 100
             Type: int_const 100
             Source: "100"
      ExpressionStatement
         Gas costs: 32
         Source: "_createPanda(0, 0, 0, _genes, address(0))"
        FunctionCall
           Type: uint256
           Source: "_createPanda(0, 0, 0, _genes, address(0))"
          Identifier _createPanda
             Type: function (uint256,uint256,uint256,uint256[2] memory,address) returns (uint256)
             Source: "_createPanda"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Literal, token: [no token] value: 0
             Type: int_const 0
             Source: "0"
          Identifier _genes
             Type: uint256[2] memory
             Source: "_genes"
          FunctionCall
             Type: address
             Source: "address(0)"
            ElementaryTypeNameExpression address
               Type: type(address)
               Source: "address"
            Literal, token: [no token] value: 0
               Type: int_const 0
               Source: "0"
  FunctionDefinition "setNewAddress" - public
     Source: "function setNewAddress(address _v2Address) external onlyCEO whenPaused {\n        // See README.md for updgrade plan\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }"
    ParameterList
       Gas costs: 0
       Source: "(address _v2Address)"
      VariableDeclaration "_v2Address"
         Type: address
         Source: "address _v2Address"
        ElementaryTypeName address
           Source: "address"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    ModifierInvocation "whenPaused"
       Gas costs: 0
       Source: "whenPaused"
      Identifier whenPaused
         Type: modifier ()
         Source: "whenPaused"
    Block
       Source: "{\n        // See README.md for updgrade plan\n        newContractAddress = _v2Address;\n        ContractUpgrade(_v2Address);\n    }"
      ExpressionStatement
         Gas costs: 20267
         Source: "newContractAddress = _v2Address"
        Assignment using operator =
           Type: address
           Source: "newContractAddress = _v2Address"
          Identifier newContractAddress
             Type: address
             Source: "newContractAddress"
          Identifier _v2Address
             Type: address
             Source: "_v2Address"
      ExpressionStatement
         Gas costs: [???]
         Source: "ContractUpgrade(_v2Address)"
        FunctionCall
           Type: tuple()
           Source: "ContractUpgrade(_v2Address)"
          Identifier ContractUpgrade
             Type: function (address)
             Source: "ContractUpgrade"
          Identifier _v2Address
             Type: address
             Source: "_v2Address"
  FunctionDefinition "" - public
     Source: "function() external payable {\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    Block
       Source: "{\n        require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        );\n    }"
      ExpressionStatement
         Gas costs: 557
         Source: "require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        )"
        FunctionCall
           Type: tuple()
           Source: "require(\n            msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)\n        )"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ||
             Type: bool
             Source: "msg.sender == address(saleAuction) ||\n            msg.sender == address(siringAuction)"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == address(saleAuction)"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              FunctionCall
                 Type: address
                 Source: "address(saleAuction)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier saleAuction
                   Type: contract SaleClockAuction
                   Source: "saleAuction"
            BinaryOperation using operator ==
               Type: bool
               Source: "msg.sender == address(siringAuction)"
              MemberAccess to member sender
                 Type: address
                 Source: "msg.sender"
                Identifier msg
                   Type: msg
                   Source: "msg"
              FunctionCall
                 Type: address
                 Source: "address(siringAuction)"
                ElementaryTypeNameExpression address
                   Type: type(address)
                   Source: "address"
                Identifier siringAuction
                   Type: contract SiringClockAuction
                   Source: "siringAuction"
  FunctionDefinition "getPanda" - public - const
     Source: "function getPanda(uint256 _id)\n        external\n        view\n        returns (\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256[2] genes\n    ) {\n        Panda storage kit = pandas[_id];\n\n        // if this variable is 0 then it's not gestating\n        isGestating = (kit.siringWithId != 0);\n        isReady = (kit.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(kit.cooldownIndex);\n        nextActionAt = uint256(kit.cooldownEndBlock);\n        siringWithId = uint256(kit.siringWithId);\n        birthTime = uint256(kit.birthTime);\n        matronId = uint256(kit.matronId);\n        sireId = uint256(kit.sireId);\n        generation = uint256(kit.generation);\n        genes = kit.genes;\n    }"
    ParameterList
       Gas costs: 0
       Source: "(uint256 _id)"
      VariableDeclaration "_id"
         Type: uint256
         Source: "uint256 _id"
        ElementaryTypeName uint256
           Source: "uint256"
    ParameterList
       Gas costs: 31
       Source: "(\n        bool isGestating,\n        bool isReady,\n        uint256 cooldownIndex,\n        uint256 nextActionAt,\n        uint256 siringWithId,\n        uint256 birthTime,\n        uint256 matronId,\n        uint256 sireId,\n        uint256 generation,\n        uint256[2] genes\n    )"
      VariableDeclaration "isGestating"
         Type: bool
         Source: "bool isGestating"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "isReady"
         Type: bool
         Source: "bool isReady"
        ElementaryTypeName bool
           Source: "bool"
      VariableDeclaration "cooldownIndex"
         Type: uint256
         Source: "uint256 cooldownIndex"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "nextActionAt"
         Type: uint256
         Source: "uint256 nextActionAt"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "siringWithId"
         Type: uint256
         Source: "uint256 siringWithId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "birthTime"
         Type: uint256
         Source: "uint256 birthTime"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "matronId"
         Type: uint256
         Source: "uint256 matronId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "sireId"
         Type: uint256
         Source: "uint256 sireId"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "generation"
         Type: uint256
         Source: "uint256 generation"
        ElementaryTypeName uint256
           Source: "uint256"
      VariableDeclaration "genes"
         Type: uint256[2] memory
         Source: "uint256[2] genes"
        ArrayTypeName
           Source: "uint256[2]"
          ElementaryTypeName uint256
             Source: "uint256"
          Literal, token: [no token] value: 2
             Type unknown.
             Source: "2"
    Block
       Source: "{\n        Panda storage kit = pandas[_id];\n\n        // if this variable is 0 then it's not gestating\n        isGestating = (kit.siringWithId != 0);\n        isReady = (kit.cooldownEndBlock <= block.number);\n        cooldownIndex = uint256(kit.cooldownIndex);\n        nextActionAt = uint256(kit.cooldownEndBlock);\n        siringWithId = uint256(kit.siringWithId);\n        birthTime = uint256(kit.birthTime);\n        matronId = uint256(kit.matronId);\n        sireId = uint256(kit.sireId);\n        generation = uint256(kit.generation);\n        genes = kit.genes;\n    }"
      VariableDeclarationStatement
         Gas costs: 311
         Source: "Panda storage kit = pandas[_id]"
        VariableDeclaration "kit"
           Type: struct PandaBase.Panda storage pointer
           Source: "Panda storage kit"
          UserDefinedTypeName "Panda"
             Source: "Panda"
        IndexAccess
           Type: struct PandaBase.Panda storage ref
           Source: "pandas[_id]"
          Identifier pandas
             Type: struct PandaBase.Panda storage ref[] storage ref
             Source: "pandas"
          Identifier _id
             Type: uint256
             Source: "_id"
      ExpressionStatement
         Gas costs: 315
         Source: "isGestating = (kit.siringWithId != 0)"
        Assignment using operator =
           Type: bool
           Source: "isGestating = (kit.siringWithId != 0)"
          Identifier isGestating
             Type: bool
             Source: "isGestating"
          TupleExpression
             Type: bool
             Source: "(kit.siringWithId != 0)"
            BinaryOperation using operator !=
               Type: bool
               Source: "kit.siringWithId != 0"
              MemberAccess to member siringWithId
                 Type: uint32
                 Source: "kit.siringWithId"
                Identifier kit
                   Type: struct PandaBase.Panda storage pointer
                   Source: "kit"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 314
         Source: "isReady = (kit.cooldownEndBlock <= block.number)"
        Assignment using operator =
           Type: bool
           Source: "isReady = (kit.cooldownEndBlock <= block.number)"
          Identifier isReady
             Type: bool
             Source: "isReady"
          TupleExpression
             Type: bool
             Source: "(kit.cooldownEndBlock <= block.number)"
            BinaryOperation using operator <=
               Type: bool
               Source: "kit.cooldownEndBlock <= block.number"
              MemberAccess to member cooldownEndBlock
                 Type: uint64
                 Source: "kit.cooldownEndBlock"
                Identifier kit
                   Type: struct PandaBase.Panda storage pointer
                   Source: "kit"
              MemberAccess to member number
                 Type: uint256
                 Source: "block.number"
                Identifier block
                   Type: block
                   Source: "block"
      ExpressionStatement
         Gas costs: 306
         Source: "cooldownIndex = uint256(kit.cooldownIndex)"
        Assignment using operator =
           Type: uint256
           Source: "cooldownIndex = uint256(kit.cooldownIndex)"
          Identifier cooldownIndex
             Type: uint256
             Source: "cooldownIndex"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.cooldownIndex)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member cooldownIndex
               Type: uint16
               Source: "kit.cooldownIndex"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: 306
         Source: "nextActionAt = uint256(kit.cooldownEndBlock)"
        Assignment using operator =
           Type: uint256
           Source: "nextActionAt = uint256(kit.cooldownEndBlock)"
          Identifier nextActionAt
             Type: uint256
             Source: "nextActionAt"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.cooldownEndBlock)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member cooldownEndBlock
               Type: uint64
               Source: "kit.cooldownEndBlock"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: 306
         Source: "siringWithId = uint256(kit.siringWithId)"
        Assignment using operator =
           Type: uint256
           Source: "siringWithId = uint256(kit.siringWithId)"
          Identifier siringWithId
             Type: uint256
             Source: "siringWithId"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.siringWithId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member siringWithId
               Type: uint32
               Source: "kit.siringWithId"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: 256
         Source: "birthTime = uint256(kit.birthTime)"
        Assignment using operator =
           Type: uint256
           Source: "birthTime = uint256(kit.birthTime)"
          Identifier birthTime
             Type: uint256
             Source: "birthTime"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.birthTime)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member birthTime
               Type: uint64
               Source: "kit.birthTime"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: 306
         Source: "matronId = uint256(kit.matronId)"
        Assignment using operator =
           Type: uint256
           Source: "matronId = uint256(kit.matronId)"
          Identifier matronId
             Type: uint256
             Source: "matronId"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.matronId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member matronId
               Type: uint32
               Source: "kit.matronId"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: 306
         Source: "sireId = uint256(kit.sireId)"
        Assignment using operator =
           Type: uint256
           Source: "sireId = uint256(kit.sireId)"
          Identifier sireId
             Type: uint256
             Source: "sireId"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.sireId)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member sireId
               Type: uint32
               Source: "kit.sireId"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: 306
         Source: "generation = uint256(kit.generation)"
        Assignment using operator =
           Type: uint256
           Source: "generation = uint256(kit.generation)"
          Identifier generation
             Type: uint256
             Source: "generation"
          FunctionCall
             Type: uint256
             Source: "uint256(kit.generation)"
            ElementaryTypeNameExpression uint256
               Type: type(uint256)
               Source: "uint256"
            MemberAccess to member generation
               Type: uint16
               Source: "kit.generation"
              Identifier kit
                 Type: struct PandaBase.Panda storage pointer
                 Source: "kit"
      ExpressionStatement
         Gas costs: [???]
         Source: "genes = kit.genes"
        Assignment using operator =
           Type: uint256[2] memory
           Source: "genes = kit.genes"
          Identifier genes
             Type: uint256[2] memory
             Source: "genes"
          MemberAccess to member genes
             Type: uint256[2] storage ref
             Source: "kit.genes"
            Identifier kit
               Type: struct PandaBase.Panda storage pointer
               Source: "kit"
  FunctionDefinition "unpause" - public
     Source: "function unpause() public onlyCEO whenPaused {\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n\n        // Actually unpause the contract.\n        super.unpause();\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCEO"
       Gas costs: 0
       Source: "onlyCEO"
      Identifier onlyCEO
         Type: modifier ()
         Source: "onlyCEO"
    ModifierInvocation "whenPaused"
       Gas costs: 0
       Source: "whenPaused"
      Identifier whenPaused
         Type: modifier ()
         Source: "whenPaused"
    Block
       Source: "{\n        require(saleAuction != address(0));\n        require(siringAuction != address(0));\n        require(geneScience != address(0));\n        require(newContractAddress == address(0));\n\n        // Actually unpause the contract.\n        super.unpause();\n    }"
      ExpressionStatement
         Gas costs: 286
         Source: "require(saleAuction != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(saleAuction != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "saleAuction != address(0)"
            Identifier saleAuction
               Type: contract SaleClockAuction
               Source: "saleAuction"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 286
         Source: "require(siringAuction != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(siringAuction != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "siringAuction != address(0)"
            Identifier siringAuction
               Type: contract SiringClockAuction
               Source: "siringAuction"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 286
         Source: "require(geneScience != address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(geneScience != address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator !=
             Type: bool
             Source: "geneScience != address(0)"
            Identifier geneScience
               Type: contract GeneScienceInterface
               Source: "geneScience"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 283
         Source: "require(newContractAddress == address(0))"
        FunctionCall
           Type: tuple()
           Source: "require(newContractAddress == address(0))"
          Identifier require
             Type: function (bool) pure
             Source: "require"
          BinaryOperation using operator ==
             Type: bool
             Source: "newContractAddress == address(0)"
            Identifier newContractAddress
               Type: address
               Source: "newContractAddress"
            FunctionCall
               Type: address
               Source: "address(0)"
              ElementaryTypeNameExpression address
                 Type: type(address)
                 Source: "address"
              Literal, token: [no token] value: 0
                 Type: int_const 0
                 Source: "0"
      ExpressionStatement
         Gas costs: 4
         Source: "super.unpause()"
        FunctionCall
           Type: tuple()
           Source: "super.unpause()"
          MemberAccess to member unpause
             Type: function ()
             Source: "super.unpause"
            Identifier super
               Type: contract super PandaCore
               Source: "super"
  FunctionDefinition "withdrawBalance" - public
     Source: "function withdrawBalance() external onlyCFO {\n        uint256 balance = this.balance;\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\n        uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee;\n\n        if (balance > subtractFees) {\n             // <yes> <report> UNCHECKED_LL_CALLS\n            cfoAddress.send(balance - subtractFees);\n        }\n    }"
    ParameterList
       Gas costs: 0
       Source: "()"
    ParameterList
       Gas costs: 0
       Source: ""
    ModifierInvocation "onlyCFO"
       Gas costs: 0
       Source: "onlyCFO"
      Identifier onlyCFO
         Type: modifier ()
         Source: "onlyCFO"
    Block
       Source: "{\n        uint256 balance = this.balance;\n        // Subtract all the currently pregnant kittens we have, plus 1 of margin.\n        uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee;\n\n        if (balance > subtractFees) {\n             // <yes> <report> UNCHECKED_LL_CALLS\n            cfoAddress.send(balance - subtractFees);\n        }\n    }"
      VariableDeclarationStatement
         Gas costs: 416
         Source: "uint256 balance = this.balance"
        VariableDeclaration "balance"
           Type: uint256
           Source: "uint256 balance"
          ElementaryTypeName uint256
             Source: "uint256"
        MemberAccess to member balance
           Type: uint256
           Source: "this.balance"
          Identifier this
             Type: contract PandaCore
             Source: "this"
      VariableDeclarationStatement
         Gas costs: 425
         Source: "uint256 subtractFees = (pregnantPandas + 1) * autoBirthFee"
        VariableDeclaration "subtractFees"
           Type: uint256
           Source: "uint256 subtractFees"
          ElementaryTypeName uint256
             Source: "uint256"
        BinaryOperation using operator *
           Type: uint256
           Source: "(pregnantPandas + 1) * autoBirthFee"
          TupleExpression
             Type: uint256
             Source: "(pregnantPandas + 1)"
            BinaryOperation using operator +
               Type: uint256
               Source: "pregnantPandas + 1"
              Identifier pregnantPandas
                 Type: uint256
                 Source: "pregnantPandas"
              Literal, token: [no token] value: 1
                 Type: int_const 1
                 Source: "1"
          Identifier autoBirthFee
             Type: uint256
             Source: "autoBirthFee"
      IfStatement
         Source: "if (balance > subtractFees) {\n             // <yes> <report> UNCHECKED_LL_CALLS\n            cfoAddress.send(balance - subtractFees);\n        }"
        BinaryOperation using operator >
           Type: bool
           Gas costs: 9
           Source: "balance > subtractFees"
          Identifier balance
             Type: uint256
             Source: "balance"
          Identifier subtractFees
             Type: uint256
             Source: "subtractFees"
        Block
           Source: "{\n             // <yes> <report> UNCHECKED_LL_CALLS\n            cfoAddress.send(balance - subtractFees);\n        }"
          ExpressionStatement
             Gas costs: [???]
             Source: "cfoAddress.send(balance - subtractFees)"
            FunctionCall
               Type: bool
               Source: "cfoAddress.send(balance - subtractFees)"
              MemberAccess to member send
                 Type: function (uint256) returns (bool)
                 Source: "cfoAddress.send"
                Identifier cfoAddress
                   Type: address
                   Source: "cfoAddress"
              BinaryOperation using operator -
                 Type: uint256
                 Source: "balance - subtractFees"
                Identifier balance
                   Type: uint256
                   Source: "balance"
                Identifier subtractFees
                   Type: uint256
                   Source: "subtractFees"
